<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySql</title>
    <url>/2022/03/30/MySql/</url>
    <content><![CDATA[<h1 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h1><h2 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h2><h3 id="1-1-数据库概念"><a href="#1-1-数据库概念" class="headerlink" title="1.1 数据库概念"></a>1.1 数据库概念</h3><blockquote>
<p>数据库（DataBase）是长期存储在计算机内部有结构的，大量的，共享的数据集合</p>
</blockquote>
<ul>
<li>长期存储：持久存储</li>
<li>有结构：<ul>
<li>类型：存储的数据是有类型的</li>
<li>关系：存储数据于数据之间的关系</li>
</ul>
</li>
<li>大量：大多数数据库是文件系统的，也就是说存储在数据库中的数据实际上存储在磁盘的文件中</li>
<li>共享：多个应用程序通过数据库实现数据共享</li>
</ul>
<h3 id="1-2-关系型数据库与非关系型数据库"><a href="#1-2-关系型数据库与非关系型数据库" class="headerlink" title="1.2 关系型数据库与非关系型数据库"></a>1.2 关系型数据库与非关系型数据库</h3><ul>
<li>关系型数据库</li>
</ul>
<blockquote>
<p>采用了关系模型来组织数据的存储，以行和列的的形式存储数据并记录数据与数据之间的关系<br>将数据存储在表格中，可以通过建立表格与表格之间的关系来维护数据与数据之间的关系</p>
</blockquote>
<ul>
<li>非关系型数据库</li>
</ul>
<blockquote>
<p>采用键值对的模型来存储数据，只完成数据的记录，不会记录数据与数据之间的关系<br>基于其特定的的存储结构来解决一些大数据应用难题</p>
<p>NoSQL(Not Only SQL)</p>
</blockquote>
<h3 id="1-3-常见的数据库产品"><a href="#1-3-常见的数据库产品" class="headerlink" title="1.3 常见的数据库产品"></a>1.3 常见的数据库产品</h3><p><strong>关系型数据库</strong></p>
<ul>
<li>mysql 免费<ul>
<li>MariaDB</li>
<li>Persona Server</li>
</ul>
</li>
<li>PostgreSQL</li>
<li>Oracle 收费</li>
<li>SQL Server</li>
<li>Access</li>
<li>Sybase</li>
<li>达梦数据库</li>
</ul>
<p><strong>非关系型数据库</strong></p>
<ul>
<li>面向检索的列式存储<ul>
<li>HaBase(Hadoop子系统)</li>
<li>BigTable（Google)</li>
</ul>
</li>
<li>面向高并发的缓存存储 key-value<ul>
<li>Redis</li>
<li>MemcacheDB</li>
</ul>
</li>
<li>面向海量数据访问文档存储 document-oriented<ul>
<li>MongoDB</li>
<li>CouchDB</li>
</ul>
</li>
</ul>
<h2 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h2><hr>
<h3 id="2-1-SQL概述"><a href="#2-1-SQL概述" class="headerlink" title="2.1 SQL概述"></a>2.1 SQL概述</h3><blockquote>
<p>SQL (Structured Query Language) 结构化查询语言，用于存储、查询、更新数据及管理关系型数据库系统</p>
</blockquote>
<h4 id="2-1-1-SQL分类"><a href="#2-1-1-SQL分类" class="headerlink" title="2.1.1 SQL分类"></a>2.1.1 SQL分类</h4><blockquote>
<p>根据SQL指令完成的数据库操作不同，可以将SQL指令分为四类</p>
</blockquote>
<ul>
<li><strong>DDL (Data Define Language)</strong> 数据库定义语言<ul>
<li>用于完成对数据库对象（数据库，数据表，视图，索引等）的管理</li>
</ul>
</li>
<li><strong>DML (Data Manipulation Language)</strong> 数据库操作语言<ul>
<li>用于完成对数据表中的数据进行添加，删除，修改等操作</li>
</ul>
</li>
<li><strong>DQL (Data Query Language)</strong> 数据库查询语言<ul>
<li>用于将数据表中的数据查询出来</li>
</ul>
</li>
<li><strong>DCL (Data Control Language)</strong> 数据库控制语言<ul>
<li>用于完成事务管理等操作</li>
</ul>
</li>
</ul>
<h3 id="2-2-SQL基本语法"><a href="#2-2-SQL基本语法" class="headerlink" title="2.2 SQL基本语法"></a>2.2 SQL基本语法</h3><ul>
<li>sql指令不区分大小写</li>
<li>每条sql指令结束后都以；结尾</li>
<li>sql关键词之间以空格进行分割</li>
<li>sql之间可以不限制换行</li>
</ul>
<h3 id="2-3-DDL"><a href="#2-3-DDL" class="headerlink" title="2.3 DDL"></a>2.3 DDL</h3><h4 id="2-3-1-数据库操作"><a href="#2-3-1-数据库操作" class="headerlink" title="2.3.1 数据库操作"></a>2.3.1 数据库操作</h4><blockquote>
<p>使用DDL语句创建数据库，修改数据库，查询数据库，删除数据库</p>
</blockquote>
<p><strong>查询数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">##显示当前数据库列表</span><br><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>

<p><strong>创建数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database <span class="operator">&lt;</span>dbName<span class="operator">&gt;</span>;</span><br><span class="line"><span class="keyword">create</span> database <span class="operator">&lt;</span>dbName<span class="operator">&gt;</span> if <span class="keyword">not</span> <span class="keyword">exists</span>;</span><br><span class="line">##指定字符集</span><br><span class="line"><span class="keyword">create</span> database <span class="operator">&lt;</span>dbName<span class="operator">&gt;</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure>

<p><strong>修改数据库</strong></p>
<ul>
<li>修改数据库字符集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> database <span class="operator">&lt;</span>dbName<span class="operator">&gt;</span> <span class="type">character</span> <span class="keyword">set</span> utf8; ## utf8 gbk</span><br></pre></td></tr></table></figure>



<p><strong>删除数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database <span class="operator">&lt;</span>dbName<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> <span class="operator">&lt;</span>dbName<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>切换数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use <span class="operator">&lt;</span>dbName<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="2-3-2-数据表操作"><a href="#2-3-2-数据表操作" class="headerlink" title="2.3.2 数据表操作"></a>2.3.2 数据表操作</h4><blockquote>
<p>数据表实际就是一个二维表格，一个表格由多列组成，表格中的每一列成为一个字段</p>
</blockquote>
<p><strong>创建数据表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line">stu_num <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">stu_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">stu_age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">stu_tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">stu_qq <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span></span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<p><strong>查询数据表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>

<p><strong>查询表结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>删除表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>修改数据表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">##改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span> rename <span class="keyword">to</span> <span class="operator">&lt;</span>newTableName<span class="operator">&gt;</span>;</span><br><span class="line">##改字符集</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">##添加列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span> <span class="keyword">add</span> <span class="operator">&lt;</span>columnName<span class="operator">&gt;</span> <span class="operator">&lt;</span>type<span class="operator">&gt;</span>;</span><br><span class="line">##修改字段名和类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span> change <span class="operator">&lt;</span>oldColumnName<span class="operator">&gt;</span> <span class="operator">&lt;</span>newColumnName<span class="operator">&gt;</span> <span class="operator">&lt;</span>type<span class="operator">&gt;</span>;</span><br><span class="line">##修改字段类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span> modify <span class="operator">&lt;</span>columnName<span class="operator">&gt;</span> <span class="operator">&lt;</span>type<span class="operator">&gt;</span>;</span><br><span class="line">##删除字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="operator">&lt;</span>columnName<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-mysql数据类型"><a href="#2-4-mysql数据类型" class="headerlink" title="2.4 mysql数据类型"></a>2.4 mysql数据类型</h3><h4 id="2-4-1-数值类型"><a href="#2-4-1-数值类型" class="headerlink" title="2.4.1 数值类型"></a>2.4.1 数值类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>内存空间大小</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>tinyint</td>
<td>1 byte</td>
<td>特小型整数（年龄）</td>
</tr>
<tr>
<td>smallint</td>
<td>2 byte</td>
<td>小型整数</td>
</tr>
<tr>
<td>mediumint</td>
<td>3 byte</td>
<td>中型整数</td>
</tr>
<tr>
<td>int&#x2F;integer</td>
<td>4 byte</td>
<td>整数</td>
</tr>
<tr>
<td>bigint</td>
<td>8 byte</td>
<td>大型整数</td>
</tr>
<tr>
<td>float</td>
<td>4 byte</td>
<td>单精度</td>
</tr>
<tr>
<td>double</td>
<td>8 byte</td>
<td>双精度</td>
</tr>
<tr>
<td>decimal</td>
<td>第一参数+2</td>
<td>decimal(10,2) 表示一共有10位数字，小数有两位</td>
</tr>
</tbody></table>
<h4 id="2-4-2-字符类型"><a href="#2-4-2-字符类型" class="headerlink" title="2.4.2 字符类型"></a>2.4.2 字符类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>字符长度</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>0~255</td>
<td>定字符长度，最多可以存储255字符，当我们指定数据表字段为char(n)<br />此列中的数据最多为n个字符，如果添加的数据少于n，则补”\u0000”至n长度</td>
</tr>
<tr>
<td>varchar</td>
<td>0~65536</td>
<td>可变字符串长度</td>
</tr>
<tr>
<td>tinyblob</td>
<td>0~255</td>
<td>存储二进制字符串</td>
</tr>
<tr>
<td>blob</td>
<td>0~65536</td>
<td>存储二进制字符串</td>
</tr>
<tr>
<td>mediumblob</td>
<td>0~1677215</td>
<td>存储二进制字符串</td>
</tr>
<tr>
<td>longblob</td>
<td>0~4294967295</td>
<td>存储二进制字符串</td>
</tr>
<tr>
<td>tinytext</td>
<td>0~255</td>
<td>文本数据（字符串）</td>
</tr>
<tr>
<td>text</td>
<td>0~65535</td>
<td>文本数据（字符串）</td>
</tr>
<tr>
<td>mediumtext</td>
<td>0~1677215</td>
<td>文本数据（字符串）</td>
</tr>
<tr>
<td>longtext</td>
<td>0~4294967295</td>
<td>文本数据（字符串）</td>
</tr>
</tbody></table>
<h4 id="2-4-3-日起类型"><a href="#2-4-3-日起类型" class="headerlink" title="2.4.3 日起类型"></a>2.4.3 日起类型</h4><blockquote>
<p>在mysql中可以用字符串存储时间 ，但如果我们需要基于时间字段进行查询操作，（某个时间段）<br>就不太方便了</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>2021-09-13</td>
<td>只存年月日</td>
</tr>
<tr>
<td>time</td>
<td>11:12:13</td>
<td>只存分秒</td>
</tr>
<tr>
<td>year</td>
<td>2021</td>
<td>年份</td>
</tr>
<tr>
<td>datatime</td>
<td>2021-09-13 11:12:13</td>
<td>日期加时间</td>
</tr>
<tr>
<td>timestamp</td>
<td>20210913 111213</td>
<td>时间戳</td>
</tr>
</tbody></table>
<h3 id="2-5-字段约束"><a href="#2-5-字段约束" class="headerlink" title="2.5 字段约束"></a>2.5 字段约束</h3><h4 id="2-5-1-约束介绍"><a href="#2-5-1-约束介绍" class="headerlink" title="2.5.1 约束介绍"></a>2.5.1 约束介绍</h4><blockquote>
<p>在创建数据表的时候，指定的对数据表的列的数据限制性的要求</p>
</blockquote>
<p><strong>为什么添加约束</strong></p>
<ul>
<li>保证数据有效性</li>
<li>保证数据完整性</li>
<li>保证数据正确性</li>
</ul>
<p><strong>常见约束</strong></p>
<ul>
<li>非空  not null</li>
<li>唯一 unique</li>
<li>主键 primary</li>
<li>外键 foreign key </li>
<li>联合主键 primary key (key1, key2 ….)</li>
</ul>
<h3 id="2-6-DML"><a href="#2-6-DML" class="headerlink" title="2.6 DML"></a>2.6 DML</h3><blockquote>
<p>用于完成数据表中对数据的插入，删除，修改操作</p>
</blockquote>
<h4 id="2-6-1-插入数据"><a href="#2-6-1-插入数据" class="headerlink" title="2.6.1 插入数据"></a>2.6.1 插入数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> (columnName1,columnName2,....) <span class="keyword">values</span>(value1,value2,...)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>tabName<span class="operator">&gt;</span> <span class="keyword">values</span>(...) ##全添加，且顺序保持一致</span><br></pre></td></tr></table></figure>



<h4 id="2-6-2-删除数据"><a href="#2-6-2-删除数据" class="headerlink" title="2.6.2 删除数据"></a>2.6.2 删除数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> <span class="keyword">where</span> <span class="operator">&lt;</span>conditions<span class="operator">&gt;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span>; ##删除所有数据</span><br></pre></td></tr></table></figure>



<h4 id="2-6-3-修改数据"><a href="#2-6-3-修改数据" class="headerlink" title="2.6.3 修改数据"></a>2.6.3 修改数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> <span class="keyword">set</span> columnName <span class="operator">=</span> <span class="keyword">value</span> <span class="keyword">where</span> conditions</span><br></pre></td></tr></table></figure>







<h3 id="2-7-DQL"><a href="#2-7-DQL" class="headerlink" title="2.7 DQL"></a>2.7 DQL</h3><h4 id="2-7-1-查询基础"><a href="#2-7-1-查询基础" class="headerlink" title="2.7.1 查询基础"></a>2.7.1 查询基础</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c1,c2,c3 <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure>



<h4 id="2-7-2-where子句"><a href="#2-7-2-where子句" class="headerlink" title="2.7.2 where子句"></a>2.7.2 where子句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> <span class="keyword">where</span> conditions;</span><br><span class="line"><span class="keyword">update</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> set... <span class="keyword">where</span> conditions;</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> <span class="keyword">where</span> conditions;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#: <span class="operator">=</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> stu_num<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>;</span><br><span class="line">#: <span class="operator">!=</span> 和 <span class="operator">&lt;&gt;</span>效果一样,都标示不等于</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> stu_num<span class="operator">!=</span><span class="string">&#x27;001&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> stu_num<span class="operator">&lt;&gt;</span><span class="string">&#x27;001&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#多条件查询:<span class="keyword">and</span> <span class="keyword">or</span> </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students modify stu_gender <span class="type">char</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> students <span class="keyword">where</span> stu_age<span class="operator">&gt;</span><span class="number">20</span> <span class="keyword">and</span> stu_gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> students <span class="keyword">where</span> stu_age<span class="operator">&gt;</span><span class="number">20</span> <span class="keyword">or</span> stu_gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">between</span> <span class="keyword">and</span>(闭区间，<span class="keyword">not</span> ; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> students <span class="keyword">where</span> stu_age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">22</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> students <span class="keyword">where</span> stu_age <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">22</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-7-3-模糊查询-like"><a href="#2-7-3-模糊查询-like" class="headerlink" title="2.7.3 模糊查询 like"></a>2.7.3 模糊查询 like</h4><p>%: 任意多个字符</p>
<p>_: 任意一个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> <span class="keyword">where</span> valueName <span class="keyword">like</span> <span class="string">&#x27;%o%&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> <span class="keyword">where</span> valueName <span class="keyword">like</span> <span class="string">&#x27;_o_&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-7-4-对查询结果进行处理"><a href="#2-7-4-对查询结果进行处理" class="headerlink" title="2.7.4 对查询结果进行处理"></a>2.7.4 对查询结果进行处理</h4><p><strong>计算列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询学生年龄，姓名</span><br><span class="line"><span class="keyword">select</span> stu_name,<span class="number">2022</span><span class="operator">-</span>stu_age <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>

<p><strong>字段别名</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#为查询结果的列取语义性更强的别名</span><br><span class="line"><span class="keyword">select</span> stu_name <span class="keyword">as</span> 姓名 ,stu_age <span class="keyword">as</span> 年龄 <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>

<p><strong>消除重复行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> stu_age <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>







<h4 id="2-7-5-排序"><a href="#2-7-5-排序" class="headerlink" title="2.7.5 排序"></a>2.7.5 排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> <span class="keyword">where</span> conditions <span class="keyword">order</span> <span class="keyword">by</span> columnName <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#多字段排序，若第一个排序的值相同再按第二个值排序</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stus <span class="keyword">where</span> stu_age<span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> stu_gender <span class="keyword">asc</span>, stu_age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>



<h4 id="2-7-6-聚合函数"><a href="#2-7-6-聚合函数" class="headerlink" title="2.7.6 聚合函数"></a>2.7.6 聚合函数</h4><ul>
<li><strong>count( )</strong> :统计满足条件的字段的值的个数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#统计学生个数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(stu_num) <span class="keyword">from</span> stus;</span><br><span class="line">#统计男生个数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(stu_num) <span class="keyword">from</span> stus <span class="keyword">where</span> stu_gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>max( )</strong> :找出满足条件的记录中指定列的最大值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(stu_age) <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>min( )</strong>: 同上，找出最小值</p>
</li>
<li><p><strong>sum( )</strong> ;查询满足条件的记录中，指定列的值的综合</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(stu_age) <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>

<ul>
<li>avg( ) :求平均值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(stu_age) <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>





<h4 id="2-7-7-日期函数和字符串函数"><a href="#2-7-7-日期函数和字符串函数" class="headerlink" title="2.7.7 日期函数和字符串函数"></a>2.7.7 日期函数和字符串函数</h4><ul>
<li>日期函数</li>
</ul>
<blockquote>
<p>当我们向日期类型的列添加数据时，卡哇伊通过字符串类型赋值：格式:aaaa-bb-cc dd:ee:ff</p>
<p>用now（） 和sysdate（） 获取当前时间</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stus(entrance_time) <span class="keyword">values</span>(<span class="string">&#x27;2022-01-02 11:22:33&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stus(entrance_time) <span class="keyword">values</span>(now())</span><br></pre></td></tr></table></figure>



<ul>
<li><p>字符串函数</p>
<ul>
<li>​	concat</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(stu_name,stu_age) <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>

<ul>
<li>upper &#x2F; lower</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(stu_name) <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure>

<ul>
<li>substring</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#截取指定字符串的字串</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(stu_tel,<span class="number">7</span>,<span class="number">4</span>) <span class="keyword">from</span> stus;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-7-8-分组查询"><a href="#2-7-8-分组查询" class="headerlink" title="2.7.8 分组查询"></a>2.7.8 分组查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#先对查询的学生信息按性别进行分组，然后分别统计每组人数</span><br><span class="line"><span class="keyword">select</span> stu_gender,<span class="built_in">count</span>(stu_num) <span class="keyword">from</span> stus <span class="keyword">group</span> <span class="keyword">by</span> stu_gender;</span><br><span class="line">#先对查询的学生信息按性别进行分组，再计算每一组平均年龄</span><br><span class="line"><span class="keyword">select</span> stu_gender,<span class="built_in">avg</span>(stu_age) <span class="keyword">from</span> stus <span class="keyword">group</span> <span class="keyword">by</span> stu_gender;</span><br><span class="line">#先把学生按年龄分组，再统计学生数量，再对结果排序</span><br><span class="line"><span class="keyword">select</span> stu_age,<span class="built_in">count</span>(stu_num) <span class="keyword">from</span> stus <span class="keyword">group</span> <span class="keyword">by</span> stu_age <span class="keyword">order</span> <span class="keyword">by</span> stu_age <span class="keyword">desc</span>;</span><br><span class="line">#查询所有学生，按年龄分组，然后分别统计每组人数，再筛选当前组人数<span class="operator">&gt;</span><span class="number">1</span>的组，再按年龄升序显示出来</span><br><span class="line"><span class="keyword">select</span> stu_age, <span class="built_in">count</span>(stu_num) <span class="keyword">from</span> stus <span class="keyword">group</span> <span class="keyword">by</span> stu_age <span class="keyword">having</span> <span class="built_in">count</span>(stu_num)<span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> stu_age;</span><br></pre></td></tr></table></figure>

<h4 id="2-7-9-分页查询"><a href="#2-7-9-分页查询" class="headerlink" title="2.7.9 分页查询"></a>2.7.9 分页查询</h4><p><strong>语法</strong></p>
<blockquote>
<p>select…<br>from…<br>where…<br>limit param1,param2;</p>
<p>param1:表示获取查询语句的结果中俄第一条数据的索引（索引从0开始）<br>param2: 表示获取的查询记录的条数，如果剩下的记录数小于param2，则返回剩下的记录数</p>
</blockquote>
<p><strong>案例</strong></p>
<p>对学生信息进行分页查询，共有10条数据，每页显示3条<br>总记录数：count 10<br>每页显示：pageSize 3<br>总页数：pageCount &#x3D; count%pageSize &#x3D;&#x3D; 0?count&#x2F;pageSize:count&#x2F;pageSize+1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询第一页</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stus <span class="keyword">where</span> ... limit <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line">#查询第二页</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stus <span class="keyword">where</span> ... limit <span class="number">1</span>,<span class="number">3</span>;</span><br><span class="line">#pageNum表示查询的页码,pageSize表示查询的条数</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tbName<span class="operator">&gt;</span> [<span class="keyword">where</span>] limit (pageNum<span class="number">-1</span>)<span class="operator">*</span>pageSize,pageSize;</span><br></pre></td></tr></table></figure>







<h2 id="三、数据表的关联关系"><a href="#三、数据表的关联关系" class="headerlink" title="三、数据表的关联关系"></a>三、数据表的关联关系</h2><hr>
<h3 id="3-1-关联关系介绍"><a href="#3-1-关联关系介绍" class="headerlink" title="3.1 关联关系介绍"></a>3.1 关联关系介绍</h3><blockquote>
<p>通过在数据表中添加字段建立外键约束建立关联关系</p>
</blockquote>
<p><strong>数据关系分为四种</strong></p>
<ul>
<li>一对一</li>
<li>一对多</li>
<li>多对一</li>
<li>多对多</li>
</ul>
<h3 id="3-2-外键约束"><a href="#3-2-外键约束" class="headerlink" title="3.2 外键约束"></a>3.2 外键约束</h3><p><strong>案例：学生表 与 班级表</strong></p>
<p>1.创建班级表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#建立没关系的表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">class_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">class_name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">class_remark <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2.创建学生表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#创建学生表，在创建时添加外键约束</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_info(</span><br><span class="line">stu_num <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">primary</span> key,</span><br><span class="line">stu_name <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">stu_gender <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line">stu_age <span class="type">int</span>,</span><br><span class="line">cid <span class="type">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> FK_stu_classes <span class="keyword">foreign</span> key(cid) <span class="keyword">references</span> classes(class_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>级联</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#级联操作</span><br><span class="line">#当class_id被关联，那既不能删除也不能修改，如果一定要修改：</span><br><span class="line"><span class="keyword">update</span> stu_info <span class="keyword">set</span> cid<span class="operator">=</span><span class="keyword">null</span> <span class="keyword">where</span> cid<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">update</span> classes <span class="keyword">set</span> class_id<span class="operator">=</span><span class="number">5</span> <span class="keyword">where</span> class_id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">#在<span class="keyword">sql</span>中判断是否等于<span class="keyword">null</span>用<span class="keyword">is</span></span><br><span class="line"><span class="keyword">update</span> stu_info <span class="keyword">set</span> cid<span class="operator">=</span><span class="number">5</span> <span class="keyword">where</span> cid <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">#若用级联操作可以很方便解决</span><br><span class="line">#先删除外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">drop</span> <span class="keyword">foreign</span> key FK_stu_classes;</span><br><span class="line">#添加外键时添加级联修改和级联删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> <span class="keyword">constraint</span> FK_stu_classes <span class="keyword">foreign</span> key(cid) <span class="keyword">references</span> classes(class_id)</span><br><span class="line">      <span class="keyword">on</span> <span class="keyword">update</span> CASCADE <span class="keyword">on</span> <span class="keyword">delete</span> CASCADE;</span><br><span class="line">#修改，删除测试</span><br><span class="line"><span class="keyword">update</span> classes <span class="keyword">set</span> class_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">where</span> class_name<span class="operator">=</span><span class="string">&#x27;Java002&#x27;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> classes <span class="keyword">where</span> class_id<span class="operator">=</span><span class="number">2</span>;#删除了id<span class="operator">=</span><span class="number">2</span>的课程后，与其相关联的学生也都被删除了</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="四、连结查询"><a href="#四、连结查询" class="headerlink" title="四、连结查询"></a>四、连结查询</h2><hr>
<h3 id="4-1-内连接"><a href="#4-1-内连接" class="headerlink" title="4.1 内连接"></a>4.1 内连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">inner</span> <span class="keyword">join</span>:</span><br><span class="line">#执行以下语句，会产生两张表的笛卡尔积</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">inner</span> <span class="keyword">join</span> classes;</span><br><span class="line">#先生成笛卡尔积，再用<span class="keyword">where</span>进行过滤（效率很低），所以把<span class="keyword">where</span>改<span class="keyword">on</span>，先判断条件，再链接,所以基本用<span class="keyword">on</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">inner</span> <span class="keyword">join</span> classes <span class="keyword">where</span> stu_info.cid<span class="operator">=</span>classes.class_id;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">inner</span> <span class="keyword">join</span> classes <span class="keyword">on</span> stu_info.cid<span class="operator">=</span>classes.class_id;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">inner</span> <span class="keyword">join</span> classes <span class="keyword">on</span> stu_info.cid<span class="operator">=</span>classes.class_id <span class="keyword">where</span> stu_gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-左连接"><a href="#4-2-左连接" class="headerlink" title="4.2 左连接"></a>4.2 左连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">left</span> <span class="keyword">join</span>:显示左表所有数据，如果有和右表匹配的数据那就匹配，如果没有就显示<span class="keyword">null</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">left</span> <span class="keyword">join</span> classes <span class="keyword">on</span> stu_info.cid<span class="operator">=</span>classes.class_id;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-右连接"><a href="#4-3-右连接" class="headerlink" title="4.3 右连接"></a>4.3 右连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">right</span> <span class="keyword">join</span>:与左链接相反</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">right</span> <span class="keyword">join</span> classes <span class="keyword">on</span> stu_info.cid<span class="operator">=</span>classes.class_id;</span><br></pre></td></tr></table></figure>



<h3 id="4-4-数据表别名"><a href="#4-4-数据表别名" class="headerlink" title="4.4 数据表别名"></a>4.4 数据表别名</h3><blockquote>
<p>当两张表有相同字段时，可以用table.column来区分，但是当表名太长这样不方便时，可以使用数据表别名</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>,c.class_name</span><br><span class="line"><span class="keyword">from</span> stu_info s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> classes c</span><br><span class="line"><span class="keyword">on</span> s.cid<span class="operator">=</span>c.class_id;</span><br></pre></td></tr></table></figure>



<h3 id="4-5-子查询"><a href="#4-5-子查询" class="headerlink" title="4.5 子查询"></a>4.5 子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#子查询<span class="operator">/</span>嵌套查询:第一次查询的结果作为第二次查询的条件</span><br><span class="line">#case1:假设只知道班级名Java001，不知道班级id，去查该班级学生信息，返回单列：<span class="operator">&gt;</span> <span class="operator">&lt;</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">where</span> cid<span class="operator">=</span>(<span class="keyword">select</span> class_id <span class="keyword">from</span> classes <span class="keyword">where</span> class_name<span class="operator">=</span><span class="string">&#x27;Java001&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#case2:查询所有java班级中的学生信息</span><br><span class="line">#function1:<span class="keyword">union</span>:表示将多个查询语句的结果放在一起,</span><br><span class="line"><span class="keyword">select</span> class_id <span class="keyword">from</span> classes <span class="keyword">where</span> class_name <span class="keyword">like</span> <span class="string">&#x27;%Java%&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">where</span> cid<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">where</span> cid<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">where</span> cid<span class="operator">=</span><span class="number">3</span></span><br><span class="line">#funtion2:返回多列：<span class="keyword">in</span> , <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">where</span> cid <span class="keyword">in</span> (<span class="keyword">select</span> class_id <span class="keyword">from</span> classes <span class="keyword">where</span> class_name <span class="keyword">like</span> <span class="string">&#x27;%Java%&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#case3:查询所有cid<span class="operator">=</span><span class="number">1</span>的班级中性别为男的学生信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">where</span> stu_gender<span class="operator">=</span><span class="string">&#x27;female&#x27;</span> <span class="keyword">and</span> cid<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#记得要取别名，不然就有虚拟表和stu表字段重名的错误了</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> stu_info <span class="keyword">where</span> cid<span class="operator">=</span><span class="number">1</span>) t <span class="keyword">where</span> t.stu_gender<span class="operator">=</span><span class="string">&#x27;female&#x27;</span>;</span><br></pre></td></tr></table></figure>





<h2 id="五、存储过程"><a href="#五、存储过程" class="headerlink" title="五、存储过程"></a>五、存储过程</h2><hr>
<h3 id="5-1-存储过程介绍"><a href="#5-1-存储过程介绍" class="headerlink" title="5.1 存储过程介绍"></a>5.1 存储过程介绍</h3><h4 id="5-1-1-SQL指令执行过程"><a href="#5-1-1-SQL指令执行过程" class="headerlink" title="5.1.1 SQL指令执行过程"></a>5.1.1 SQL指令执行过程</h4><img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-03-30 at 23.15.18.png" alt="Screen Shot 2022-03-30 at 23.15.18" style="zoom:50%;" />



<h4 id="5-1-2-存储过程介绍"><a href="#5-1-2-存储过程介绍" class="headerlink" title="5.1.2 存储过程介绍"></a>5.1.2 存储过程介绍</h4><blockquote>
<p>将能够完成特定功能的sql指令进行封装（sql指令集），编译后存储在数据库服务器上，并且为之取一个名字，<br>客户端可以通过这个名字直接调用这个sql指令集，获得执行结果</p>
</blockquote>
<p><strong>优点</strong></p>
<ul>
<li>sql指令无需客户端编写，通过网络传送，既可以节省网络开销，同时避免sql指令在网络传输过程中被恶意篡改<br>保证安全性</li>
<li>存储过程经过编译创建并保存在数据库中的，执行过程无需重复的进行编译操作，对sql指令的性能进行提升</li>
<li>存储过程中多个sql指令之间存在逻辑关系，支持流程控制语句，可以实现更为复杂的业务</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>存储过程时针对不同数据库编写的，当我们切换到其他数据库就要重新进行编写</li>
<li>存储过程受限于数据库产品</li>
<li>如果是高并发业务会增加执行时间</li>
</ul>
<h3 id="5-2-创建存储过程"><a href="#5-2-创建存储过程" class="headerlink" title="5.2 创建存储过程"></a>5.2 创建存储过程</h3><h4 id="5-2-1-存储过程创建语句"><a href="#5-2-1-存储过程创建语句" class="headerlink" title="5.2.1 存储过程创建语句"></a>5.2.1 存储过程创建语句</h4><p><strong>案例</strong></p>
<p>创建存储过程实现加法运算</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_test1(<span class="keyword">in</span> a <span class="type">int</span>, <span class="keyword">in</span> b <span class="type">int</span>, <span class="keyword">out</span> c <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">set</span> c <span class="operator">=</span> a<span class="operator">+</span>b;</span><br><span class="line"><span class="keyword">end</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-调用存储过程"><a href="#5-3-调用存储过程" class="headerlink" title="5.3 调用存储过程"></a>5.3 调用存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#定义变量m</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">#调用存储过程</span><br><span class="line"><span class="keyword">call</span> proc_test(<span class="number">1</span>,<span class="number">2</span>,<span class="variable">@m</span>)</span><br><span class="line">#显示变量<span class="variable">@m</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@m</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-存储过程中变量的使用"><a href="#5-4-存储过程中变量的使用" class="headerlink" title="5.4 存储过程中变量的使用"></a>5.4 存储过程中变量的使用</h3><blockquote>
<p>存储过程中的变量分为两种，**局部变量 **和 <strong>用户变量</strong></p>
</blockquote>
<h4 id="5-4-1-局部变量"><a href="#5-4-1-局部变量" class="headerlink" title="5.4.1 局部变量"></a>5.4.1 局部变量</h4><blockquote>
<p>定义在存储过程中的变量，只能在存储过程内部使用<br>—–局部变量要定义在存储过程中，而且必须定义在存储过程开始</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test2(<span class="keyword">in</span> a <span class="type">int</span>, <span class="keyword">out</span> r <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> x <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;#定义局部变量</span><br><span class="line">  <span class="keyword">declare</span> y <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">set</span> x <span class="operator">=</span> a<span class="operator">*</span>a;</span><br><span class="line">  <span class="keyword">set</span> y <span class="operator">=</span> a<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line">  <span class="keyword">set</span> r <span class="operator">=</span> x<span class="operator">+</span>y;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>



<h4 id="5-4-2-用户变量"><a href="#5-4-2-用户变量" class="headerlink" title="5.4.2 用户变量"></a>5.4.2 用户变量</h4><blockquote>
<p>用户变量相当于全局变量，定义的用户变量可以通过‘select @name’ 进行查询</p>
<p>–用户变量会存储在mysql数据库的数据字典中（dual）<br>–用户变量定义使用set关键字直接定义变量名要以@开头</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>



<h4 id="5-4-3-给变量赋值"><a href="#5-4-3-给变量赋值" class="headerlink" title="5.4.3 给变量赋值"></a>5.4.3 给变量赋值</h4><blockquote>
<p>无论局部变量还是用户变量，都使用set关键字修改值</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@n</span> <span class="operator">=</span><span class="number">1</span>;           #给用户变量赋值</span><br><span class="line"><span class="keyword">call</span> test2(<span class="number">6</span>,<span class="variable">@n</span>);    #给局部变量赋值</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@n</span> <span class="keyword">from</span> dual; </span><br></pre></td></tr></table></figure>



<h4 id="5-4-4-将查询结果赋值给变量"><a href="#5-4-4-将查询结果赋值给变量" class="headerlink" title="5.4.4 将查询结果赋值给变量"></a>5.4.4 将查询结果赋值给变量</h4><p>在存储过程中使用select..into..给变量赋值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test3(<span class="keyword">out</span> c <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(sid) <span class="keyword">into</span> c <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">end</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@num</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">call</span> test3(<span class="variable">@num</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@num</span> <span class="keyword">from</span> dual; </span><br></pre></td></tr></table></figure>



<h4 id="5-4-5-用户变量使用注意事项"><a href="#5-4-5-用户变量使用注意事项" class="headerlink" title="5.4.5 用户变量使用注意事项"></a>5.4.5 用户变量使用注意事项</h4><blockquote>
<p>因为用户变量相当于全局变量，可以在sql指令以及多个存储过程中共享，在开发中<br>建议少使用用户变量，因为用户变量过多，会导致程序不易理解，难以维护。</p>
</blockquote>
<h3 id="5-5-存储过程的参数"><a href="#5-5-存储过程的参数" class="headerlink" title="5.5 存储过程的参数"></a>5.5 存储过程的参数</h3><blockquote>
<p>mysql存储过程的参数共三种：in , out , inout</p>
</blockquote>
<h4 id="5-5-1-in输入参数"><a href="#5-5-1-in输入参数" class="headerlink" title="5.5.1 in输入参数"></a>5.5.1 in输入参数</h4><p>输入参数–在调用存储过程中传递参数给存储过程饿的参数（在调用过程中必须有实际值 或者是字面值）</p>
<h4 id="5-5-2-输出参数"><a href="#5-5-2-输出参数" class="headerlink" title="5.5.2 输出参数"></a>5.5.2 输出参数</h4><p>输出参数–将存储过程中产生的数据返回给过程的调用者，相当于java方法的返回值，<br>                 但不同的是，一个存储过程可以有多个输出参数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test4(<span class="keyword">in</span> stu_id <span class="type">char</span>(<span class="number">5</span>),<span class="keyword">out</span> stu_name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">into</span> stu_name <span class="keyword">from</span> students <span class="keyword">where</span> stu_id <span class="operator">=</span> sid;</span><br><span class="line"><span class="keyword">end</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@name</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> test4(<span class="string">&#x27;10001&#x27;</span>,<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>



<h4 id="5-5-3-输入输出参数"><a href="#5-5-3-输入输出参数" class="headerlink" title="5.5.3 输入输出参数"></a>5.5.3 输入输出参数</h4><p>不建议使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test5(<span class="keyword">inout</span> str <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">into</span> str <span class="keyword">from</span> students <span class="keyword">where</span> sid <span class="operator">=</span> str;</span><br><span class="line"><span class="keyword">end</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@name</span> <span class="operator">=</span> <span class="string">&#x27;10001&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> test5(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>





<h3 id="5-6-存储过程中流程控制"><a href="#5-6-存储过程中流程控制" class="headerlink" title="5.6 存储过程中流程控制"></a>5.6 存储过程中流程控制</h3><blockquote>
<p>在存储过程中支持流程控制语句用于实现流程的控制</p>
</blockquote>
<h4 id="5-6-1-分支语句"><a href="#5-6-1-分支语句" class="headerlink" title="5.6.1 分支语句"></a>5.6.1 分支语句</h4><ul>
<li>If-then-else</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#单分支</span><br><span class="line">if a<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> </span><br><span class="line">         #<span class="keyword">sql</span>；</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line">#双分支</span><br><span class="line">if a<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> </span><br><span class="line">        #sql1；</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        #sql2；</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>case</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test(<span class="keyword">in</span> a <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"> <span class="keyword">case</span> a </span><br><span class="line"> <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> </span><br><span class="line">         #sql1;</span><br><span class="line"> <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> </span><br><span class="line">         #sql2;</span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">         #sql3; 如果a的值和<span class="keyword">when</span>的选项都不匹配，则执行此语句</span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"> <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>



<h4 id="5-6-2-循环语句"><a href="#5-6-2-循环语句" class="headerlink" title="5.6.2 循环语句"></a>5.6.2 循环语句</h4><ul>
<li>while</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test(<span class="keyword">in</span> a <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> i <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">while i <span class="operator">&lt;</span> a do</span><br><span class="line">#<span class="keyword">sql</span>;这里如果想用i，要用concat(‘str’,i)的操作</span><br><span class="line"><span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>repeat</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test(<span class="keyword">in</span> a <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> i <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">repeat </span><br><span class="line">#<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">until i<span class="operator">&gt;=</span>a</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure>

<ul>
<li>Loop</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test(<span class="keyword">in</span> a <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> i <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">myloop:loop</span><br><span class="line">#<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">set</span> i<span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">  if i <span class="operator">=</span> a <span class="keyword">then</span> </span><br><span class="line">        leave myloop;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br></pre></td></tr></table></figure>





<h3 id="5-7-存储过程管理"><a href="#5-7-存储过程管理" class="headerlink" title="5.7 存储过程管理"></a>5.7 存储过程管理</h3><h4 id="5-7-1-查询存储过程"><a href="#5-7-1-查询存储过程" class="headerlink" title="5.7.1 查询存储过程"></a>5.7.1 查询存储过程</h4><blockquote>
<p>存储过程属于某个数据库，所以我们创建存储过程在某个数据库中时，只可以在这个数据库中调用此存储过程<br>存储过程在多个数据库中不共享</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#根据数据库名查询当前数据库所有存储过程</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> status <span class="keyword">where</span> db <span class="operator">=</span><span class="string">&#x27;&lt;db_mybatis&#x27;</span>;</span><br><span class="line">#查询存储过程创建细节</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> db_mybatis.test3;</span><br></pre></td></tr></table></figure>

<h4 id="5-7-2-修改存储过程"><a href="#5-7-2-修改存储过程" class="headerlink" title="5.7.2 修改存储过程"></a>5.7.2 修改存储过程</h4><blockquote>
<p>修改存储过程的特称&#x2F;特性<br>存储过程的特征参数：</p>
<ul>
<li><strong>CONTAINS SQL</strong> :表示子程序包含sql语句，但不包含读或写的语句</li>
<li><strong>No SQL</strong> :表示子程序中不包含sql语句</li>
<li><strong>READS SQL DATA</strong> :表示子程序中包含读数据语句</li>
<li><strong>MODIFIES SQL DATA</strong> :表示子程序中包含写数据语句</li>
<li><strong>SQL SECURITY</strong> :指明谁有权限来执行</li>
<li><strong>DEFINER</strong> :表示只有定义者自己才能执行</li>
<li><strong>INVOKER</strong> :表示调用者可以执行</li>
<li><strong>COMMENT ‘string’</strong> :表示注解信息</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">procedure</span> test3 <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA;</span><br></pre></td></tr></table></figure>



<h4 id="5-7-3-删除存储过程"><a href="#5-7-3-删除存储过程" class="headerlink" title="5.7.3 删除存储过程"></a>5.7.3 删除存储过程</h4><p>从可视化界面删除，或者:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> test;</span><br></pre></td></tr></table></figure>







<h3 id="5-8-存储过程案例"><a href="#5-8-存储过程案例" class="headerlink" title="5.8 存储过程案例"></a>5.8 存储过程案例</h3><blockquote>
<p>使用存储过程解决项目开发过程中的问题</p>
<p>使用存储过程，完成借书操作</p>
</blockquote>
<h4 id="5-8-1-数据准备"><a href="#5-8-1-数据准备" class="headerlink" title="5.8.1 数据准备"></a>5.8.1 数据准备</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> books(</span><br><span class="line">book_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">book_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">book_author <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">book_price <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">book_stock <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">book_desc <span class="type">varchar</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> books(book_id,book_name,book_author,book_price,book_stock,book_desc)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;java程序设计&#x27;</span>,<span class="string">&#x27;亮亮&#x27;</span>,<span class="number">38.80</span>,<span class="number">12</span>,<span class="string">&#x27;亮亮带你学java&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> books(book_id,book_name,book_author,book_price,book_stock,book_desc)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;java王者之路&#x27;</span>,<span class="string">&#x27;威哥&#x27;</span>,<span class="number">44.40</span>,<span class="number">9</span>,<span class="string">&#x27;java王者领路人&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> i_students(</span><br><span class="line">stu_num <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">primary</span> key,</span><br><span class="line">stu_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">stu_gender <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">stu_age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> i_students(stu_num,stu_name,stu_gender,stu_age)<span class="keyword">values</span>(<span class="string">&#x27;1001&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> i_students(stu_num,stu_name,stu_gender,stu_age)<span class="keyword">values</span>(<span class="string">&#x27;1002&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> i_students(stu_num,stu_name,stu_gender,stu_age)<span class="keyword">values</span>(<span class="string">&#x27;1003&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>



<h4 id="5-8-2-业务分析"><a href="#5-8-2-业务分析" class="headerlink" title="5.8.2 业务分析"></a>5.8.2 业务分析</h4><blockquote>
<p>创建存储过程实现借书的操作：哪个学生借哪本书，借多少本</p>
<p>操作：</p>
<ul>
<li>保存图书记录</li>
<li>修改图书库存</li>
</ul>
<p>条件：</p>
<ul>
<li>判断学生是否存在</li>
<li>判断图书是否存在，库存是否充足？</li>
</ul>
</blockquote>
<p><strong>创建借书记录表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>  records(</span><br><span class="line">rid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">snum <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">bid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">borrow_num <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">is_return <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>, #<span class="number">0</span>表示未归还，<span class="number">1</span>表示归还</span><br><span class="line">borrow_date <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> FK_records_students <span class="keyword">foreign</span> key(snum) <span class="keyword">references</span> i_students(stu_num),</span><br><span class="line"><span class="keyword">constraint</span> FK_records_books <span class="keyword">foreign</span> key(bid) <span class="keyword">references</span> books(book_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h4 id="5-8-3-创建存储过程–借书"><a href="#5-8-3-创建存储过程–借书" class="headerlink" title="5.8.3 创建存储过程–借书"></a>5.8.3 创建存储过程–借书</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#参数<span class="number">1</span>:学号</span><br><span class="line">#参数<span class="number">2</span>:图书编号</span><br><span class="line">#参数<span class="number">3</span>：借书数量</span><br><span class="line">#参数<span class="number">4</span>:借书状态 （<span class="number">1</span>成功，<span class="number">2</span>学号不存在，<span class="number">3</span>图书不存在，<span class="number">4</span>库存不够）</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_boorrow_book(<span class="keyword">in</span> a <span class="type">char</span>(<span class="number">8</span>), <span class="keyword">in</span> b <span class="type">int</span>, <span class="keyword">in</span> m <span class="type">int</span>,<span class="keyword">out</span> state <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> stu_count <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">declare</span> book_count <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">declare</span> stock <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">#判断学号是否存在</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(stu_num) <span class="keyword">into</span> stu_count <span class="keyword">from</span> i_students <span class="keyword">where</span> stu_num<span class="operator">=</span>a;</span><br><span class="line">if stu_count<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">	#学号存在,则判断图书id是否存在</span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">count</span>(book_id) <span class="keyword">into</span> book_count <span class="keyword">from</span> books <span class="keyword">where</span> book_id<span class="operator">=</span>b;</span><br><span class="line">	if book_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line">		#图书存在,则查询图书库存是否充足</span><br><span class="line">		<span class="keyword">select</span> book_stock <span class="keyword">into</span> stock <span class="keyword">from</span> books <span class="keyword">where</span> book_id <span class="operator">=</span> b;</span><br><span class="line">		if stock <span class="operator">&gt;=</span> m <span class="keyword">then</span> </span><br><span class="line">			#执行借书</span><br><span class="line">			#操作<span class="number">1</span>:生成借书记录，即在借书记录表中添加记录</span><br><span class="line">			<span class="keyword">insert</span> <span class="keyword">into</span> records(snum,bid,borrow_num,is_return,borrow_date) <span class="keyword">values</span>(a,b,m,<span class="number">0</span>,sysdate());</span><br><span class="line">			#操作<span class="number">2</span>：修改图书库存</span><br><span class="line">			<span class="keyword">update</span> books <span class="keyword">set</span> book_stock <span class="operator">=</span> stock<span class="operator">-</span>m <span class="keyword">where</span> book_id <span class="operator">=</span> b;</span><br><span class="line">			#借书成功</span><br><span class="line">			<span class="keyword">set</span> state <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			#库存不足</span><br><span class="line">			<span class="keyword">set</span> state <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">end</span> if;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		#图书不存在</span><br><span class="line">		<span class="keyword">set</span> state <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  #学号不存在</span><br><span class="line">	<span class="keyword">set</span> state <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span> if; </span><br><span class="line"><span class="keyword">end</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>



<h4 id="5-8-4-创建存储过程–还书"><a href="#5-8-4-创建存储过程–还书" class="headerlink" title="5.8.4 创建存储过程–还书"></a>5.8.4 创建存储过程–还书</h4><h3 id="5-9-游标"><a href="#5-9-游标" class="headerlink" title="5.9 游标"></a>5.9 游标</h3><blockquote>
<p>如果要创建一个存储过程，需要返回查询语句查询到的多条语句，如何实现？</p>
</blockquote>
<p><strong>查询一条数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test6(<span class="keyword">in</span> id <span class="type">int</span> ,<span class="keyword">out</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">200</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> bname <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">declare</span> bauthor <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">declare</span> bprice <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">select</span> book_name,book_author,book_price <span class="keyword">into</span> bname,bauthor,bprice <span class="keyword">from</span> books <span class="keyword">where</span> book_id <span class="operator">=</span> id;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> concat_ws(<span class="string">&#x27;~&#x27;</span>,bname,bauthor,bprice);</span><br><span class="line"><span class="keyword">end</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@r</span> <span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> test6(<span class="number">1</span>,<span class="variable">@r</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@r</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-1-游标概念"><a href="#5-1-1-游标概念" class="headerlink" title="5.1.1 游标概念"></a>5.1.1 游标概念</h4><blockquote>
<p>游标可以用来依次取出查询结果集中的每一条数据–逐条读取查询结果集中的记录</p>
</blockquote>
<h4 id="5-1-2-游标使用步骤"><a href="#5-1-2-游标使用步骤" class="headerlink" title="5.1.2 游标使用步骤"></a>5.1.2 游标使用步骤</h4><ul>
<li>声明游标</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">declare</span> cursor_name <span class="keyword">cursor</span> <span class="keyword">for</span> select_statement;</span><br><span class="line">#示例</span><br><span class="line"><span class="keyword">declare</span> mycursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> book_name,book_author,book_price <span class="keyword">from</span> books;</span><br></pre></td></tr></table></figure>

<ul>
<li>打开游标</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">open</span> cursor_name;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用游标,提取游标当前指向的记录，提取后游标自动下移</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> i<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">while i<span class="operator">&lt;</span>num do</span><br><span class="line">	<span class="keyword">fetch</span> mycursor <span class="keyword">into</span> bname,bauthor,bprice;</span><br><span class="line">	<span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	#<span class="keyword">set</span> str <span class="operator">=</span> concat_ws(<span class="string">&#x27;~&#x27;</span>,bname,bauthor,bprice)</span><br><span class="line">	<span class="keyword">select</span> concat_ws(<span class="string">&#x27;~&#x27;</span>,bname,bauthor,bprice) <span class="keyword">into</span> str;</span><br><span class="line">	<span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> concat(<span class="string">&#x27;,&#x27;</span>,<span class="keyword">result</span>,str);</span><br><span class="line">	<span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭游标</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">close</span> cursor_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>完整代码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test7(<span class="keyword">out</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">200</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> bname <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">declare</span> bauthor <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">declare</span> bprice <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">declare</span> num <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> str <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">#此查询语句返回一个结果集合，使用游标遍历查询的结果集合</span><br><span class="line"><span class="keyword">declare</span> mycursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> book_name,book_author,book_price <span class="keyword">from</span> books;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">into</span> num <span class="keyword">from</span> books;</span><br><span class="line">#打开游标</span><br><span class="line"><span class="keyword">open</span> mycursor;</span><br><span class="line">#使用游标要结合循环语句</span><br><span class="line"><span class="keyword">set</span> i<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">while i<span class="operator">&lt;</span>num do</span><br><span class="line">	<span class="keyword">fetch</span> mycursor <span class="keyword">into</span> bname,bauthor,bprice;</span><br><span class="line">	<span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	#<span class="keyword">set</span> str <span class="operator">=</span> concat_ws(<span class="string">&#x27;~&#x27;</span>,bname,bauthor,bprice)</span><br><span class="line">	<span class="keyword">select</span> concat_ws(<span class="string">&#x27;~&#x27;</span>,bname,bauthor,bprice) <span class="keyword">into</span> str;</span><br><span class="line">	<span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> concat_ws(<span class="string">&#x27;,&#x27;</span>,<span class="keyword">result</span>,str);</span><br><span class="line">	<span class="keyword">end</span> while;</span><br><span class="line">	#关闭游标</span><br><span class="line">	<span class="keyword">close</span> mycursor;</span><br><span class="line"><span class="keyword">end</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@r</span> <span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> test7(<span class="variable">@r</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@r</span> <span class="keyword">from</span> dual;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="六、触发器"><a href="#六、触发器" class="headerlink" title="六、触发器"></a>六、触发器</h3><hr>
<h4 id="6-1-触发器概念"><a href="#6-1-触发器概念" class="headerlink" title="6.1 触发器概念"></a>6.1 触发器概念</h4><blockquote>
<p>触发器是一种特殊的存储过程。触发器和存储过程一样是一个能够完成特定功能，存储在数据库服务器上的SQL<br>片段，但触发器无需调用，当对数据表中的数据执行DML操作时会自动触发SQL片段的执行，而无需手动调用</p>
<p>在mysql中，只有执行insert&#x2F;delete&#x2F;update操作才能触发触发器的执行</p>
</blockquote>
<h3 id="6-2-触发器的使用"><a href="#6-2-触发器的使用" class="headerlink" title="6.2 触发器的使用"></a>6.2 触发器的使用</h3><h4 id="6-2-1-案例说明"><a href="#6-2-1-案例说明" class="headerlink" title="6.2.1 案例说明"></a>6.2.1 案例说明</h4><p><strong>案例：日志信息表，记录对学生信息的操作（某时间对某学生进行某操作）</strong>，数据同5.1</p>
<ul>
<li>手动日志记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#日志信息表，记录对学生信息的操作（某时间对某学生进行某操作）</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stulogs(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">logtime <span class="type">timestamp</span>,</span><br><span class="line">logtext <span class="type">varchar</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#当向学生表添加一条信息时，同时向日志表添加一条操作日志</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> i_students(stu_num,stu_name,stu_gender,stu_age) <span class="keyword">values</span>(<span class="string">&#x27;1004&#x27;</span>,<span class="string">&#x27;小丽&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stulogs(<span class="type">time</span>,logtext) <span class="keyword">values</span>(now(),<span class="string">&#x27;添加1004学生信息&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="6-2-2-创建触发器"><a href="#6-2-2-创建触发器" class="headerlink" title="6.2.2 创建触发器"></a>6.2.2 创建触发器</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_name </span><br><span class="line"><span class="operator">&lt;</span>before<span class="operator">&gt;</span><span class="operator">|</span><span class="operator">&lt;</span>after<span class="operator">&gt;</span>      #定义触发时机</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">insert</span><span class="operator">&gt;</span><span class="operator">|</span><span class="operator">&lt;</span><span class="keyword">delete</span><span class="operator">&gt;</span><span class="operator">|</span><span class="operator">&lt;</span><span class="keyword">update</span><span class="operator">&gt;</span> #定义触发类型</span><br><span class="line"><span class="keyword">on</span> <span class="operator">&lt;</span>tableName<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span>      #声明为行级触发器，即只要操作一条记录就触发触发器一次</span><br><span class="line">sql_statement     #触发器操作</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#示例</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_test1</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> i_students</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stulogs(logtime,logtext) <span class="keyword">values</span>(now(),concat(<span class="string">&#x27;添加&#x27;</span>,new.stu_num,<span class="string">&#x27;学生信息&#x27;</span>));</span><br></pre></td></tr></table></figure>



<h4 id="6-2-3-查看触发器"><a href="#6-2-3-查看触发器" class="headerlink" title="6.2.3 查看触发器"></a>6.2.3 查看触发器</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br></pre></td></tr></table></figure>



<h4 id="6-2-3-测试触发器"><a href="#6-2-3-测试触发器" class="headerlink" title="6.2.3 测试触发器"></a>6.2.3 测试触发器</h4><ul>
<li>创建的触发器是在students表发生insert操作时触发，所以只需执行学生信息的添加操作</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#可同时添加多条或一条</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> i_students(stu_num,stu_name,stu_gender,stu_age) </span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;1006&#x27;</span>,<span class="string">&#x27;小刚&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">21</span>),(<span class="string">&#x27;1007&#x27;</span>,<span class="string">&#x27;小微&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<h4 id="6-2-4-删除触发器"><a href="#6-2-4-删除触发器" class="headerlink" title="6.2.4 删除触发器"></a>6.2.4 删除触发器</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> <span class="operator">&lt;</span>trigger_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="6-3-NEW-amp-OLD"><a href="#6-3-NEW-amp-OLD" class="headerlink" title="6.3 NEW &amp; OLD"></a>6.3 NEW &amp; OLD</h3><blockquote>
<p>触发器用于监听对数据表中数据的insert、delete、update操作，在触发器中通常处理这种DML的关联操作，我们可以<br>使用&#x3D;&#x3D;new&#x3D;&#x3D;和&#x3D;&#x3D;old&#x3D;&#x3D;关键字在触发器中获取触发这个触发器的DML操作的数据</p>
<ul>
<li>new  在触发器中用于获取insert操作添加的数据、或update操作修改后的数据</li>
<li>old  在触发器中用于获取delete操作删除前的数据,或update操作修改前的数据</li>
</ul>
</blockquote>
<h4 id="6-3-1-NEW"><a href="#6-3-1-NEW" class="headerlink" title="6.3.1 NEW"></a>6.3.1 NEW</h4><ul>
<li>insert操作中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_test1</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> i_students</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stulogs(logtime,logtext) <span class="keyword">values</span>(now(),concat(<span class="string">&#x27;添加&#x27;</span>,new.stu_num,<span class="string">&#x27;学生信息&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>update操作中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_test2</span><br><span class="line">after <span class="keyword">update</span> <span class="keyword">on</span> i_students <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stulogs(logtime,logtext) <span class="keyword">values</span>(now(),concat(<span class="string">&#x27;修改学生信息为&#x27;</span>,new.stu_num,new.stu_name));</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> i_students <span class="keyword">set</span> stu_name <span class="operator">=</span> <span class="string">&#x27;李雷&#x27;</span> <span class="keyword">where</span> stu_num <span class="operator">=</span> <span class="string">&#x27;1007&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="6-3-2-OLD"><a href="#6-3-2-OLD" class="headerlink" title="6.3.2 OLD"></a>6.3.2 OLD</h4><ul>
<li>delete操作中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_test3</span><br><span class="line">after <span class="keyword">delete</span> <span class="keyword">on</span> i_students <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stulogs(logtime,logtext) <span class="keyword">values</span>(now(),concat(<span class="string">&#x27;删除学生信息为&#x27;</span>,old.stu_num,old.stu_name));</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> i_students <span class="keyword">where</span> stu_num <span class="operator">=</span> <span class="string">&#x27;1007&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>update操作中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_test4</span><br><span class="line">after <span class="keyword">update</span> <span class="keyword">on</span> i_students <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stulogs(logtime,logtext) <span class="keyword">values</span>(now(),concat(<span class="string">&#x27;将学生信息从&#x27;</span>,old.stu_name,<span class="string">&#x27;修改为&#x27;</span>,new.stu_name));</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> i_students <span class="keyword">set</span> stu_name <span class="operator">=</span> <span class="string">&#x27;李lei&#x27;</span> <span class="keyword">where</span> stu_num <span class="operator">=</span> <span class="string">&#x27;1006&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-触发器使用总结"><a href="#6-4-触发器使用总结" class="headerlink" title="6.4 触发器使用总结"></a>6.4 触发器使用总结</h3><h4 id="6-4-1-优点"><a href="#6-4-1-优点" class="headerlink" title="6.4.1 优点"></a>6.4.1 优点</h4><ul>
<li>触发器是自动执行的,当对触发器相关表执行相应DML操作会立即触发触发器</li>
<li>触发器可以实现表中的级联操作(关联操作),有利于保证数据的完整性</li>
<li>触发器可以对DML操作的数据更为复杂的合法性进行校验</li>
</ul>
<h4 id="6-4-2-缺点"><a href="#6-4-2-缺点" class="headerlink" title="6.4.2 缺点"></a>6.4.2 缺点</h4><ul>
<li>使用触发器实现的业务逻辑如果出现问题将难于定位,后期维护困难</li>
<li>如果大量使用触发器,导致代码结构杂乱,增加程序复杂性</li>
<li>当触发器处操作的数据量比较大时,执行效率会降低</li>
</ul>
<h4 id="6-4-3-使用建议"><a href="#6-4-3-使用建议" class="headerlink" title="6.4.3 使用建议"></a>6.4.3 使用建议</h4><ul>
<li>在互联网项目中,应避免使用触发器</li>
<li>对于并发量不大的项目可以选择使用存储过程,但在互联网使用存储过程<ul>
<li>原因是存储过程将实现业务逻辑交给数据库处理,增加了数据库负载,不利于数据库迁移</li>
</ul>
</li>
</ul>
<h2 id="七、视图"><a href="#七、视图" class="headerlink" title="七、视图"></a>七、视图</h2><hr>
<h3 id="7-1-视图的概念"><a href="#7-1-视图的概念" class="headerlink" title="7.1 视图的概念"></a>7.1 视图的概念</h3><blockquote>
<p>视图,&#x3D;&#x3D;就是数据库中一张表或多张表根据特定的条件查询出的数据构造成的虚拟表&#x3D;&#x3D;</p>
</blockquote>
<h3 id="7-2-视图的作用"><a href="#7-2-视图的作用" class="headerlink" title="7.2 视图的作用"></a>7.2 视图的作用</h3><ul>
<li><strong>安全性</strong> : 如果直接将数据表授权给用户操作,那么用户可以CRUD数据表中所有数据,假如我们想要对数据表中的数据进行保护<br>可以将公开的数据生成视图,授权用户访问视图,用户通过查询视图可以获取数据表中公开的数据,从而达到将数据表中的部分<br>数据对客户隐藏.</li>
<li><strong>简单性</strong> : 如果我们需要查询的数据来源于多张数据表,可以使用多表连结查询实现,我们通过视图将这些连结查询的结果对用户<br>开放,用户可以直接捅过查询视图获取多表数据,操作更便捷.</li>
</ul>
<h3 id="7-3-创建视图"><a href="#7-3-创建视图" class="headerlink" title="7.3 创建视图"></a>7.3 创建视图</h3><h4 id="7-3-1-语法"><a href="#7-3-1-语法" class="headerlink" title="7.3.1 语法"></a>7.3.1 语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_name</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">select_statement</span><br></pre></td></tr></table></figure>

<h4 id="7-3-2-示例"><a href="#7-3-2-示例" class="headerlink" title="7.3.2 示例"></a>7.3.2 示例</h4><ul>
<li>示例1</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#将学生表中性别为男的学生组成一个视图,这样女生信息将被“保护”起来</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_test1</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> i_students <span class="keyword">where</span> stu_gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> view_test1;</span><br></pre></td></tr></table></figure>

<ul>
<li>示例二</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询学生借书信息,学生名,图书名,借书数量</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_test2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">select</span> s.stu_name , b.book_name , borrow_num</span><br><span class="line"><span class="keyword">from</span> i_students s <span class="keyword">inner</span> <span class="keyword">join</span> books b <span class="keyword">inner</span> <span class="keyword">join</span> records r</span><br><span class="line"><span class="keyword">on</span> r.bid <span class="operator">=</span> b.book_id <span class="keyword">and</span> r.snum <span class="operator">=</span> s.stu_num;</span><br><span class="line">#测试</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> view_test2;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="7-4-视图数据的特性"><a href="#7-4-视图数据的特性" class="headerlink" title="7.4 视图数据的特性"></a>7.4 视图数据的特性</h3><blockquote>
<p>视图是虚拟表,查询视图的数据是来源于数据表的.当对视图数据进行操作时,对原数据表的数据是否有影响呢?</p>
</blockquote>
<p><strong>查询操作</strong>:如果在数据表中添加了新的数据,且这个数据满足创建视图时查询语句的条件,<br>               通过查询视图也可以查询出新增的数据,当删除原表中满足查询条件的数据时,<br>               也会从视图中删除.</p>
<p><strong>新增数据</strong>: 如果在视图中添加数据,那么数据会被添加到原表</p>
<p><strong>删除数据</strong>: 如果从视图删除数据也将从原表中删除</p>
<p><strong>修改数据</strong>: 如果在视图中修改数据原表也会修改</p>
<p>&#x3D;&#x3D;视图的使用建议&#x3D;&#x3D;: 对复杂查询简化操作,并且不会对数据进行修改的情况下可以使用视图,如果是多表联合查询,则不会成功</p>
<h3 id="7-5-查询视图结构"><a href="#7-5-查询视图结构" class="headerlink" title="7.5 查询视图结构"></a>7.5 查询视图结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> view_name;</span><br></pre></td></tr></table></figure>



<h3 id="7-6-修改视图"><a href="#7-6-修改视图" class="headerlink" title="7.6 修改视图"></a>7.6 修改视图</h3><ul>
<li>方式1–重新创建,覆盖原视图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> view_test1</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> i_students <span class="keyword">where</span> stu_gender <span class="operator">=</span>&quot;女&quot;;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式2–使用alter view语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> view_test1</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> i_students <span class="keyword">where</span> stu_gender <span class="operator">=</span>&quot;男&quot;;</span><br></pre></td></tr></table></figure>



<h3 id="7-7-删除视图"><a href="#7-7-删除视图" class="headerlink" title="7.7 删除视图"></a>7.7 删除视图</h3><p><strong>删除数据表时会同时删除数据表中数据,删除视图时不会影响原数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> view_test1;</span><br></pre></td></tr></table></figure>





<h2 id="八、索引"><a href="#八、索引" class="headerlink" title="八、索引"></a>八、索引</h2><hr>
<blockquote>
<p>数据库是用来存储数据的,在互联应用中数据库中存储的数据会很多(大数据),数据表中数据的查询速度会随着<br>数据量的增长逐渐变慢,从而导致相应用户请求的速度变慢—-用户体验很差,如何提高数据的查询效率呢?</p>
</blockquote>
<h3 id="8-1索引介绍"><a href="#8-1索引介绍" class="headerlink" title="8.1索引介绍"></a>8.1索引介绍</h3><blockquote>
<p>索引,就是将数据表中的某一列或某几列的值取出来构造成B+树结构进行存储,生成数据表的&#x3D;&#x3D;目录&#x3D;&#x3D;</p>
<p>当我们进行数据查找时现在目录中进行查找,得到对应的数据地址,然后再到数据表中根据地址快<br>速获取数据记录避免全表扫描</p>
</blockquote>
<h3 id="8-2-索引的分类"><a href="#8-2-索引的分类" class="headerlink" title="8.2 索引的分类"></a>8.2 索引的分类</h3><p>mysql中的索引,根据创建索引的列的不同分为:</p>
<ul>
<li>主键索引 : 在数据表的主键字段创建的索引,这个字段必须被primary key修饰,每张表只能有一个主键</li>
<li>唯一索引 : 在数据表中的唯一列创建的索引,此列的值只能出现一次,可以为null</li>
<li>普通索引 : 在普通字段上添加的索引,没有唯一限制</li>
<li>组合索引 : 两个及以上字段联合起来创建的索引</li>
</ul>
<p>&#x3D;&#x3D;说明&#x3D;&#x3D; :<br>1.在创建表时,将字段声明为主键,会自动在主键字段创建主键索引<br>2.在创建表时,将字段声明为唯一键(unique),会自动在唯一字段创建唯一索引</p>
<h3 id="8-3-创建索引"><a href="#8-3-创建索引" class="headerlink" title="8.3 创建索引"></a>8.3 创建索引</h3><h4 id="8-3-1-唯一索引"><a href="#8-3-1-唯一索引" class="headerlink" title="8.3.1 唯一索引"></a>8.3.1 唯一索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">create</span> <span class="keyword">unique</span> index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span>(column_name);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index index_test1 <span class="keyword">on</span> tb_testindex(tid);</span><br></pre></td></tr></table></figure>

<h4 id="8-3-2-普通索引"><a href="#8-3-2-普通索引" class="headerlink" title="8.3.2 普通索引"></a>8.3.2 普通索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">create</span> index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span>(column_name);</span><br><span class="line"><span class="keyword">create</span> index index_test2 <span class="keyword">on</span> tb_testindex(sid);</span><br></pre></td></tr></table></figure>

<h4 id="8-3-3-组合索引"><a href="#8-3-3-组合索引" class="headerlink" title="8.3.3 组合索引"></a>8.3.3 组合索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">create</span> index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span>(col1,col2);</span><br><span class="line"><span class="keyword">create</span> index index_test <span class="keyword">on</span> tb_testindex(sid,name);</span><br></pre></td></tr></table></figure>

<h4 id="8-3-4-全文索引"><a href="#8-3-4-全文索引" class="headerlink" title="8.3.4 全文索引"></a>8.3.4 全文索引</h4><blockquote>
<p>Mysql5.6 版本新增的索引,可以通过此索引进行全文检索操作,因为mysql全文检索不支持中文,因此<br>这个全文索引不被关注,在应用开发中通常是通过搜索引擎(数据库中间件)实现全文索引</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> fulltext index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span>(col);</span><br></pre></td></tr></table></figure>



<h3 id="8-4-索引的使用"><a href="#8-4-索引的使用" class="headerlink" title="8.4 索引的使用"></a>8.4 索引的使用</h3><blockquote>
<p>索引创建成功后,无需调用,当根据创建索引的列进行查询的时候会自动使用索引</p>
<p>组合索引需要根据创建索引的所有字段进行查询时触发</p>
</blockquote>
<ul>
<li>在命令行窗口中可以查看查询语句的查询规划</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> tb_testindex <span class="keyword">where</span> tid <span class="operator">=</span> <span class="number">20000</span>\G;</span><br></pre></td></tr></table></figure>





<h3 id="8-5-查看索引"><a href="#8-5-查看索引" class="headerlink" title="8.5 查看索引"></a>8.5 查看索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#命令行查询语句</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tb_testindex\G;</span><br><span class="line"></span><br><span class="line">#可视化出窗口</span><br><span class="line"><span class="keyword">show</span> indexes <span class="keyword">from</span> tb_testindex;</span><br><span class="line"><span class="keyword">show</span> keys <span class="keyword">from</span> tb_testindex;</span><br></pre></td></tr></table></figure>



<h3 id="8-6-删除索引"><a href="#8-6-删除索引" class="headerlink" title="8.6 删除索引"></a>8.6 删除索引</h3><p>由于不同表中可能存在相同名的索引,所以删除索引时需要指定表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>





<h3 id="8-7-索引的使用总结"><a href="#8-7-索引的使用总结" class="headerlink" title="8.7 索引的使用总结"></a>8.7 索引的使用总结</h3><h4 id="8-7-1-优点"><a href="#8-7-1-优点" class="headerlink" title="8.7.1 优点"></a>8.7.1 优点</h4><ul>
<li>索引大大降低了数据库服务器在执行查询操作时扫描的数据量,提高查询效率</li>
<li>索引可以避免服务器进行排序、将随机的IO变成顺序IO</li>
<li>加锁</li>
</ul>
<h4 id="8-7-2-缺点"><a href="#8-7-2-缺点" class="headerlink" title="8.7.2 缺点"></a>8.7.2 缺点</h4><ul>
<li>索引是根据数据表列的值创建的,当数据表中数据发生DML操作时,索引页会更新</li>
<li>索引文件也会占用磁盘空间</li>
</ul>
<h4 id="8-7-3-使用注意事项"><a href="#8-7-3-使用注意事项" class="headerlink" title="8.7.3 使用注意事项"></a>8.7.3 使用注意事项</h4><ul>
<li>数据表中数据不多时,全表扫描可能更快,不建议使用索引</li>
<li>数据量很大,但DML操作频繁,不建议使用索引</li>
<li>不要在数据重复度高的列上创建索引(性别)</li>
<li>创建索引后要注意sql语句的编写,避免索引失效</li>
</ul>
<h2 id="九、数据库事务"><a href="#九、数据库事务" class="headerlink" title="九、数据库事务"></a>九、数据库事务</h2><hr>
<h3 id="9-1-数据库事务介绍"><a href="#9-1-数据库事务介绍" class="headerlink" title="9.1 数据库事务介绍"></a>9.1 数据库事务介绍</h3><ul>
<li>把完成特定业务的多个数据库DML操作步骤称之为一个事务</li>
<li>事务,就是完成同一个业务的多个DML操作</li>
<li>比如,借书和修改库存</li>
</ul>
<h3 id="9-2-数据库事务特性-ACID"><a href="#9-2-数据库事务特性-ACID" class="headerlink" title="9.2 数据库事务特性(ACID)"></a>9.2 数据库事务特性(ACID)</h3><ul>
<li>原子性(Atomicity) : 一个事务中的多个DML操作,要么同时执行成功,要么执行失败</li>
<li>一致性(Consistency) : 事务执行前后的数据库中的数据是一致的,完整性和一致性不被破坏</li>
<li>隔离型(Isolation) : 数据库允许多个事务同时执行,多个并行的事务不能相互影响.</li>
<li>持久性(Durability) : 事务完成后会数据的操作是永久的</li>
</ul>
<h3 id="9-3-MySQL事务管理"><a href="#9-3-MySQL事务管理" class="headerlink" title="9.3 MySQL事务管理"></a>9.3 MySQL事务管理</h3><h4 id="9-3-1-自动提交与手动提交"><a href="#9-3-1-自动提交与手动提交" class="headerlink" title="9.3.1 自动提交与手动提交"></a>9.3.1 自动提交与手动提交</h4><ul>
<li>在mysql中,默认DML指令的执行是自动提交的,当我们执行一个DML指令后,自动同步到数据库中</li>
</ul>
<img src="/Users/lei/Desktop/Screen Shot 2022-04-04 at 00.00.54.png" alt="Screen Shot 2022-04-04 at 00.00.54" style="zoom:50%;" />

<h4 id="9-3-2-事务管理"><a href="#9-3-2-事务管理" class="headerlink" title="9.3.2 事务管理"></a>9.3.2 事务管理</h4><blockquote>
<p>开启事务,就是关闭自动提交</p>
</blockquote>
<ul>
<li>在开始事务的第一个操作之前,执行 start transaction 开启事务</li>
<li>依次执行事务中每个DML操作</li>
<li>如果在执行过程中任何步骤出现异常,则执行 rollback 回滚事务</li>
<li>如果事务所有DML操作都成功,执行 commit 提交事务</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#开启事务</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">#操作<span class="number">1</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> records(snum,bid,borrow_num,is_return,borrow_date) <span class="keyword">values</span>(<span class="string">&#x27;1007&#x27;</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,sysdate());</span><br><span class="line">#回滚</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line">#操作<span class="number">2</span></span><br><span class="line"><span class="keyword">update</span> books <span class="keyword">set</span> book_stock <span class="operator">=</span> book_stock<span class="number">-2</span> <span class="keyword">where</span> book_id <span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">#提交事务 </span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>



<h3 id="9-4-事务隔离级别"><a href="#9-4-事务隔离级别" class="headerlink" title="9.4 事务隔离级别"></a>9.4 事务隔离级别</h3><blockquote>
<p>数据库允许多个事务并行,多个事务之间是隔离的、相互独立的;如果多个事务之间不隔离,操作同一数据时<br>可能会导致数据的一致性被破坏</p>
</blockquote>
<p>mysql数据库事务隔离级别</p>
<ul>
<li><strong>读未提交(read uncommitted)</strong> : t2可以读取t1执行但未提交的数据,可能会导致脏读</li>
</ul>
<blockquote>
<p>脏读: 一个事务读取到了另一个事务中未提交的数据,因为未提交的数据可能会回滚</p>
</blockquote>
<ul>
<li><strong>读已提交(red committed)</strong> : t2只能读区t1已经提交的数据,避免了脏读,但可能会导致虚读</li>
</ul>
<blockquote>
<p>不可重复读(虚读) : 同一个事务中两次查询到的价格不一致</p>
<p>例如: t2查询数据后, t1 修改了数据,t2第二次查询的数据与第一次查询的数据不一致</p>
</blockquote>
<ul>
<li><strong>可重复读(repeatable read)</strong> : t2执行第一次查询后,在事务结束之前其他事务不能修改对应数据,<br>避免了虚读,但可能会导致幻读</li>
</ul>
<blockquote>
<p>幻读: t2把所有商品价格修改为1元,然后t1向表中新增一个3元的商品,t2再查询时会以为查询出<br>了与修改不一致的商品</p>
</blockquote>
<ul>
<li>串行化(serializable) : 同时只允许一个事务对数据表进行操作;避免了脏读,虚读,幻读问题</li>
</ul>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读(虚读)</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>Read committed</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>Repeatable read</td>
<td>no</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>Serializable</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
</tbody></table>
<h4 id="9-4-1-设置事务隔离级别"><a href="#9-4-1-设置事务隔离级别" class="headerlink" title="9.4.1 设置事务隔离级别"></a>9.4.1 设置事务隔离级别</h4><blockquote>
<p>我们可以通过设置数据库默认的事务隔离级别来控制事务之间的隔离性<br>也可以通过客户端与数据库连接来设置事务隔离性(在应用程序中);</p>
<p>MySql数据库默认隔离级别是&#x3D;&#x3D;可重复读&#x3D;&#x3D;</p>
</blockquote>
<ul>
<li>查看mysql数据库默认的隔离级别</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#在mysql8<span class="number">.0</span><span class="number">.3</span>以前</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx_isolation</span>;</span><br><span class="line">#之后</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置mysql默认隔离级别</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level read committed;</span><br></pre></td></tr></table></figure>









<h2 id="十、数据库设计"><a href="#十、数据库设计" class="headerlink" title="十、数据库设计"></a>十、数据库设计</h2><hr>
<blockquote>
<p>mysql数据库作为数据存储的介质为应用系统提供数据存储的服务,我们如何设计出合理的数据库、数据表<br>以满足应用系统的数据存储需求呢?</p>
</blockquote>
<h3 id="10-1-数据库设计流程"><a href="#10-1-数据库设计流程" class="headerlink" title="10.1 数据库设计流程"></a>10.1 数据库设计流程</h3><blockquote>
<p>数据库是为应用系统服务的,数据库存储什么样的数据也是由应用系统决定的 </p>
<p>当我们进行应用系统开发时,首先要明确应用系统功能需求–系统需求分析</p>
</blockquote>
<ol>
<li><p><strong>根据应用系统的功能,分析数据实体</strong>(就是要存储的数据对象)</p>
<ol>
<li>电商系统:商品、用户、订单….</li>
<li>教务管理系统: 学生、课程、成绩….</li>
</ol>
</li>
<li><p><strong>提取实体的数据项</strong>(就是实体的属性)</p>
<ol>
<li>商品(商品名称、商品图片、商品描述….)</li>
<li>用户(姓名、登录名、登陆密码….)</li>
</ol>
</li>
<li><p><strong>根据数据库设计三范式规范视图的数据项</strong></p>
<ol>
<li>如果实体数据项不满足三范式,可能会导致数据冗余,从而引起数据维护困难,破坏数据一致性等问题</li>
</ol>
</li>
<li><p><strong>绘制E-R图</strong>(实体关系图,直观的展示实体与实体之间的关系)</p>
</li>
<li><p><strong>数据库建模</strong></p>
<ol>
<li>三线图进行数据表设计</li>
<li>PowerDesigner</li>
<li>PDMan</li>
</ol>
</li>
<li><p><strong>建库建表,编写sql语句</strong></p>
</li>
<li><p><strong>添加测试数据</strong></p>
</li>
</ol>
<h3 id="10-2-数据库设计案例"><a href="#10-2-数据库设计案例" class="headerlink" title="10.2 数据库设计案例"></a>10.2 数据库设计案例</h3><blockquote>
<p>学校图书馆管理系统(借书)</p>
</blockquote>
<h4 id="10-2-1-数据实体"><a href="#10-2-1-数据实体" class="headerlink" title="10.2.1 数据实体"></a>10.2.1 数据实体</h4><ul>
<li>学生</li>
<li>图书</li>
<li>类别</li>
<li>借书记录</li>
<li>管理员</li>
</ul>
<h4 id="10-2-2-提取数据项"><a href="#10-2-2-提取数据项" class="headerlink" title="10.2.2 提取数据项"></a>10.2.2 提取数据项</h4><ul>
<li>学生(学号、姓名、性别、年龄、院系编号、院系名称、院系说明…)</li>
<li>院系(id、名称…)</li>
<li>图书(图书id、图书名称、图书作者、图书封面、图书价格、图书库存…)</li>
<li>类别(类别id、类别名称、类别描述…)</li>
<li>借书记录(记录id、学号、图书编号、是否归还、还书日期…)</li>
<li>管理员(管理员id、登录名、登陆密码、员工编号、员工姓名、练习方式(手机、qq]邮箱)…)</li>
<li>员工(id、姓名、手机、qq、邮箱)</li>
</ul>
<h4 id="10-2-3-三范式"><a href="#10-2-3-三范式" class="headerlink" title="10.2.3 三范式"></a>10.2.3 三范式</h4><ul>
<li><p><strong>第一范式</strong> : 要求数据表中的字段不可再分</p>
</li>
<li><p><strong>第二范式</strong> : 不存在非关键字段对关键字段的部分依赖,</p>
<p>以下表不满足第二范式</p>
</li>
</ul>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-04 at 16.52.51.png" alt="Screen Shot 2022-04-04 at 16.52.51" style="zoom:50%;" />

<pre><code>  改造后:
</code></pre>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-04 at 16.54.33.png" alt="Screen Shot 2022-04-04 at 16.54.33" style="zoom:50%;" />

<ul>
<li><strong>第三范式</strong> : 不存在非关键字段之间的传递依赖</li>
</ul>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-04 at 16.57.46.png" alt="Screen Shot 2022-04-04 at 16.57.46" style="zoom:50%;" />

<p>改造后</p>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-04 at 17.01.48.png" alt="Screen Shot 2022-04-04 at 17.01.48" style="zoom:50%;" />





<h4 id="4-2-4绘制E-R图"><a href="#4-2-4绘制E-R图" class="headerlink" title="4.2.4绘制E-R图"></a>4.2.4绘制E-R图</h4><blockquote>
<p>Entity-Relationship: 实体关系图,用于直观体现实体与实体之间关联关系</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-04 at 17.11.18.png" alt="Screen Shot 2022-04-04 at 17.11.18" style="zoom:50%;" />





<h4 id="4-2-5-数据库建模-PD"><a href="#4-2-5-数据库建模-PD" class="headerlink" title="4.2.5 数据库建模(PD)"></a>4.2.5 数据库建模(PD)</h4><blockquote>
<p>E-R图实际就是数据库建模的一部分:</p>
<ul>
<li>E-R图 数据表设计 建表</li>
<li>PowerDesigner建模工具,到处数据表</li>
<li>PDMan 建模工具</li>
</ul>
</blockquote>
<ol>
<li>下载并安装PowerDesigner建模工具</li>
<li>PowerDesigner使用<ol>
<li>概念数据模型,(选择workspace右键new–conceptual data model),相当于E-R图</li>
<li>逻辑数据模型(tools – generate data model),体现了实体的主外键关联</li>
<li>物理数据模型(tools– generate physical data model) <ol>
<li>可以对物理数据模型进行微调</li>
<li>生成建库建表的sql语句(tatabase– generate database–生成sql文件–在sql ui中执行sql文件)</li>
</ol>
</li>
<li>面向对象模型<ol>
<li>生成实体类</li>
<li>如果想要借助建模工具生成java代码,在创建实体名属性名都要符合java规范</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>在企业项目开发基本不使用建模工具生成数据表和实体类因为有代码规范问题</p>
</blockquote>
<h4 id="4-2-6-PDMan"><a href="#4-2-6-PDMan" class="headerlink" title="4.2.6 PDMan"></a>4.2.6 PDMan</h4><ul>
<li>新建项目创建数据表</li>
<li>生成关系图</li>
</ul>
<h1 id="Java与数据库连接"><a href="#Java与数据库连接" class="headerlink" title="Java与数据库连接"></a>Java与数据库连接</h1><h2 id="一、JDBC"><a href="#一、JDBC" class="headerlink" title="一、JDBC"></a>一、JDBC</h2><hr>
<h3 id="1-1-JDBC简介"><a href="#1-1-JDBC简介" class="headerlink" title="1.1 JDBC简介"></a>1.1 JDBC简介</h3><blockquote>
<p>JDBC : java database connectivity .—-java与数据库的连接,数据库编程</p>
<p>JDBC时java语言(JDK) 为完成数据库访问操作提供的一套标准</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-04 at 22.07.20.png" alt="Screen Shot 2022-04-04 at 22.07.20" style="zoom:50%;" />





<h3 id="1-2-JDBC步骤"><a href="#1-2-JDBC步骤" class="headerlink" title="1.2 JDBC步骤"></a>1.2 JDBC步骤</h3><hr>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-04 at 22.15.40.png" alt="Screen Shot 2022-04-04 at 22.15.40" style="zoom:50%;" />





<h2 id="二、JDBC案例"><a href="#二、JDBC案例" class="headerlink" title="二、JDBC案例"></a>二、JDBC案例</h2><hr>
<blockquote>
<p>是使用java代码完成数据访问的规范</p>
</blockquote>
<h3 id="2-1-加载驱动"><a href="#2-1-加载驱动" class="headerlink" title="2.1 加载驱动"></a>2.1 加载驱动</h3><h4 id="2-1-1-下载驱动jar包"><a href="#2-1-1-下载驱动jar包" class="headerlink" title="2.1.1 下载驱动jar包"></a>2.1.1 下载驱动jar包</h4><ul>
<li>maven repository</li>
<li>版本选择<br>mysql版本为5.x 建议使用5.1.47<br>mysql版本为8.x 建议使用8.0.x</li>
<li>点击jar文件下载</li>
</ul>
<h4 id="2-1-2-将驱动文件添加到Java应用"><a href="#2-1-2-将驱动文件添加到Java应用" class="headerlink" title="2.1.2 将驱动文件添加到Java应用"></a>2.1.2 将驱动文件添加到Java应用</h4><ul>
<li>在java应用中创建lib文件夹(根目录下)</li>
<li>将下载好的jar文件拷本-粘贴到lib目录</li>
<li>将驱动jar文件设置为java库:右键jar,选择最后add as library</li>
</ul>
<h4 id="2-1-3-注册驱动"><a href="#2-1-3-注册驱动" class="headerlink" title="2.1.3 注册驱动"></a>2.1.3 注册驱动</h4><blockquote>
<p>通过反射机制,将驱动jar文件中提供的驱动类载入到JVM中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1 注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="comment">//这个包在导入的jar中找到</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-创建连接"><a href="#2-2-创建连接" class="headerlink" title="2.2 创建连接"></a>2.2 创建连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.创建链接 :通过数据库连结管理器 DriverManager</span></span><br><span class="line">       <span class="comment">// JDBC 是java提供的数据库连结规范 都在java.sql包中</span></span><br><span class="line">       <span class="comment">//java.sql.Connection接口，一个对象就表示一个数据库连接</span></span><br><span class="line">       <span class="comment">//通常用三个参数的connection</span></span><br><span class="line">       <span class="comment">//url：数据库的同一资源定位器（定位数据库连结资源）可用问号加参数</span></span><br><span class="line">       <span class="comment">// characterEncoding 设置编码</span></span><br><span class="line">       <span class="comment">// useSSL = true 使用ssl通信</span></span><br><span class="line">       <span class="comment">// useTimeZone = true 设置客户端和服务端时区转换</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">       <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;YES&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="2-3-编写sql指令"><a href="#2-3-编写sql指令" class="headerlink" title="2.3 编写sql指令"></a>2.3 编写sql指令</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.编写要执行的sql指令 sql指令中需要的参数可以用字符串拼接形式传进来（但会导致sql注入问题）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(book_id,book_name,book_author,book_price,book_stock,book_desc) &quot;</span> +</span><br><span class="line">                <span class="string">&quot;values(&#x27;&quot;</span>+id+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+name+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+author+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+price+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+stock+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+desc+<span class="string">&quot;&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-加载sql指令"><a href="#2-4-加载sql指令" class="headerlink" title="2.4 加载sql指令"></a>2.4 加载sql指令</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 加载sql指令:获取sql指令的加载器</span></span><br><span class="line">        <span class="comment">// java.sql.statement对象 可以理解为sql指令的加载器</span></span><br><span class="line">        <span class="comment">//java.sql.preparedStatement对象，sql指令的预编译加载器</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br></pre></td></tr></table></figure>



<h3 id="2-5-执行sql、获取结果"><a href="#2-5-执行sql、获取结果" class="headerlink" title="2.5 执行sql、获取结果"></a>2.5 执行sql、获取结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.执行sql，获取执行结果</span></span><br><span class="line">        <span class="comment">//a 如果sql指令为DQL语句，则 Result rs = statement.executeQuery(sql); rs表示查询结果</span></span><br><span class="line">        <span class="comment">//b 如果sql指令为DML指令， 则 Int i = statement.executeUpdate(sql); i表示操作影响的数据行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);<span class="comment">//其中i&gt;0表示执行成功，如果i=0表示dml操作对数据表无影响</span></span><br></pre></td></tr></table></figure>

<h3 id="2-6-处理结果"><a href="#2-6-处理结果" class="headerlink" title="2.6 处理结果"></a>2.6 处理结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6 处理结果</span></span><br><span class="line">        <span class="comment">//添加：i&gt;0 添加成功，否则失败</span></span><br><span class="line">        <span class="comment">//修改操作 i&gt;0 修改有影响 ， i&lt;=0 表示对数据库无影响，但不一定是失败的，取决于操作条件</span></span><br><span class="line">        <span class="comment">//删除操作 i&gt;0 删除有影响 ， i&lt;=0 表示对数据库无影响</span></span><br><span class="line">        <span class="comment">//查询操作: 从rs中取出查询结果，封装到定义的java对象中</span></span><br><span class="line">        System.out.println(i&gt;<span class="number">0</span>?<span class="string">&quot;添加成功&quot;</span>:<span class="string">&quot;添加失败&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="2-7-关闭连接"><a href="#2-7-关闭连接" class="headerlink" title="2.7 关闭连接"></a>2.7 关闭连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 7 关闭连接</span></span><br><span class="line">        <span class="comment">//如果执行dml操作要关闭statement和connection</span></span><br><span class="line">        <span class="comment">//如果执行查询操作，需要关闭ResultSet，statement和connection</span></span><br><span class="line">        <span class="comment">//关闭之前先判空,由小到大关闭</span></span><br><span class="line">        <span class="keyword">if</span>(!statement.isClosed() &amp;&amp; statement != <span class="literal">null</span>)&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<h2 id="三、JDBC操作实例"><a href="#三、JDBC操作实例" class="headerlink" title="三、JDBC操作实例"></a>三、JDBC操作实例</h2><hr>
<h3 id="3-1-insert操作"><a href="#3-1-insert操作" class="headerlink" title="3.1 insert操作"></a>3.1 insert操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsertBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;1011&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Java进阶之路&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">20.01</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> <span class="string">&quot;good&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过jdbc将上述信息存储到数据库中</span></span><br><span class="line">        <span class="comment">// 1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建链接 :通过数据库连结管理器 DriverManager</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.编写要执行的sql指令 sql指令中需要的参数可以用字符串拼接形式传进来（但会导致sql注入问题）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(book_id,book_name,book_author,book_price,book_stock,book_desc) &quot;</span> +</span><br><span class="line">                <span class="string">&quot;values(&#x27;&quot;</span>+id+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+name+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+author+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+price+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+stock+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+desc+<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 加载sql指令:获取sql指令的加载器</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">// 5.执行sql，获取执行结果</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">// 6 处理结果</span></span><br><span class="line">        System.out.println(i&gt;<span class="number">0</span>?<span class="string">&quot;添加成功&quot;</span>:<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 7 关闭连接       </span></span><br><span class="line">        <span class="keyword">if</span>(!statement.isClosed() &amp;&amp; statement != <span class="literal">null</span>)&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-delete操作"><a href="#3-2-delete操作" class="headerlink" title="3.2 delete操作"></a>3.2 delete操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDeleteBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bid</span> <span class="operator">=</span> <span class="number">1011</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用JDBC规范，根据图书id删除图书信息</span></span><br><span class="line">        <span class="comment">// 1 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2 创建连结</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="comment">// 3 编写sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from books where book_id=&quot;</span>+bid;</span><br><span class="line">        <span class="comment">// 4 获取sql加载器</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">// 5 执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">// 6 处理结果</span></span><br><span class="line">        System.out.println(i&gt;<span class="number">0</span>?<span class="string">&quot;删除成功&quot;</span>:<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 7 关闭连接</span></span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="literal">null</span> &amp;&amp; !statement.isClosed())&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-3-update操作"><a href="#3-3-update操作" class="headerlink" title="3.3 update操作"></a>3.3 update操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUpdateBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//根据主键修改其他字段</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1011</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Java进阶之路&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">20.01</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> <span class="string">&quot;good&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update books set book_name=&#x27;&quot;</span>+name+<span class="string">&quot;&#x27;,book_author=&#x27;&quot;</span>+author+<span class="string">&quot;&#x27;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;book_price=&#x27;&quot;</span>+price+<span class="string">&quot;&#x27;,book_stock=&#x27;&quot;</span>+stock+<span class="string">&quot;&#x27;,book_desc=&#x27;&quot;</span>+desc+<span class="string">&quot;&#x27;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;where book_id=&quot;</span>+id;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(i&gt;<span class="number">0</span>?<span class="string">&quot;修改成功&quot;</span>:<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="literal">null</span> &amp;&amp; !statement.isClosed())&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-4-select操作"><a href="#3-4-select操作" class="headerlink" title="3.4 select操作"></a>3.4 select操作</h3><blockquote>
<p>查询的信息以set结构返回</p>
</blockquote>
<ul>
<li>查询单个信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据图书id查询一本图书信息</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bid</span> <span class="operator">=</span> <span class="number">1011</span>;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select *from books where book_id=&quot;</span>+bid;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//通过executeQuery执行sql查询语句</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//处理结果，从rs中获取结果，rs是一个指向结果集合的指针</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_id&quot;</span>);<span class="comment">//这里的名字是查询语句范围的列名，即如果取了别名就用别名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_author&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;book_price&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_stock&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_desc&quot;</span>);</span><br><span class="line">            System.out.println(id+<span class="string">&quot;\t&quot;</span>+name+<span class="string">&quot;\t&quot;</span>+author+<span class="string">&quot;\t&quot;</span>+price+<span class="string">&quot;\t&quot;</span>+stock+<span class="string">&quot;\t&quot;</span>+desc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连结,结果集也需要关闭</span></span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="literal">null</span> &amp;&amp; !rs.isClosed())&#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="literal">null</span> &amp;&amp; !statement.isClosed())&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询多个信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">bid</span> <span class="operator">=</span> <span class="number">1011</span>;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select *from books&quot;</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_author&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;book_price&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_stock&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_desc&quot;</span>);</span><br><span class="line">            System.out.println(id+<span class="string">&quot;\t&quot;</span>+name+<span class="string">&quot;\t&quot;</span>+author+<span class="string">&quot;\t&quot;</span>+price+<span class="string">&quot;\t&quot;</span>+stock+<span class="string">&quot;\t&quot;</span>+desc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="literal">null</span> &amp;&amp; !rs.isClosed())&#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(statement != <span class="literal">null</span> &amp;&amp; !statement.isClosed())&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<h2 id="四、JDBC核心类与接口"><a href="#四、JDBC核心类与接口" class="headerlink" title="四、JDBC核心类与接口"></a>四、JDBC核心类与接口</h2><hr>
<blockquote>
<p>java.sql.DriverManager 类 驱动管理器<br>java.sql.Connection 接口 数据库连接<br>java.sql.Statement 接口 sql指令的加载&#x2F;执行器<br>java.sqlResultSet 接口 结果集</p>
</blockquote>
<h3 id="4-1-DriverManager类"><a href="#4-1-DriverManager类" class="headerlink" title="4.1 DriverManager类"></a>4.1 DriverManager类</h3><blockquote>
<ul>
<li>注册驱动</li>
<li>创建数据库连接</li>
</ul>
</blockquote>
<ul>
<li>注册驱动</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jc.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//在Driver类中静态初始化块中,注册驱动:DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">//应用程序中手动注册驱动的代码也可以省略</span></span><br><span class="line"><span class="comment">//如果没有手动注册,驱动管理器在获取连接的时候发现没有注册驱动,则读取驱动jar!/META-INF/services/java.sql.Driver文件中配置的</span></span><br><span class="line"><span class="comment">//驱动类路径进行注册</span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取连接</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;YES&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="4-2-Connection接口"><a href="#4-2-Connection接口" class="headerlink" title="4.2 Connection接口"></a>4.2 Connection接口</h3><blockquote>
<p>Connection对象表示java应用程序与数据库之间的连接</p>
<ul>
<li>通过Connection接口对象,获取执行sql语句的statement对象</li>
<li>完成数据库的事务管理</li>
</ul>
</blockquote>
<h4 id="4-2-1-获取Statement对象"><a href="#4-2-1-获取Statement对象" class="headerlink" title="4.2.1 获取Statement对象"></a>4.2.1 获取Statement对象</h4><ul>
<li>Statement接口:编译执行静态sql指令</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> Connection.createStatement();</span><br></pre></td></tr></table></figure>

<ul>
<li>PrepareStatement接口:预编译动态sql指令(解决sql注入问题)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrepaareStatement</span> <span class="variable">prepareStatement</span> <span class="operator">=</span> Connection.prepareStatement(sql);</span><br></pre></td></tr></table></figure>

<ul>
<li>CallableStatement接口(),继承了PreparedStatement接口,且可以调用存储过程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CallableStatement</span> <span class="variable">callableStatement</span> <span class="operator">=</span> connection.prepareCall(sql);</span><br></pre></td></tr></table></figure>



<h4 id="4-2-2-事务管理"><a href="#4-2-2-事务管理" class="headerlink" title="4.2.2 事务管理"></a>4.2.2 事务管理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启事务--取消自动提交</span></span><br><span class="line">        connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update books set book_name=&#x27;&quot;</span>+name+<span class="string">&quot;&#x27;,book_author=&#x27;&quot;</span>+author+<span class="string">&quot;&#x27;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;book_price=&#x27;&quot;</span>+price+<span class="string">&quot;&#x27;,book_stock=&#x27;&quot;</span>+stock+<span class="string">&quot;&#x27;,book_desc=&#x27;&quot;</span>+desc+<span class="string">&quot;&#x27;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;where book_id=&quot;</span>+id;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//事务回滚</span></span><br><span class="line">        connection.rollback();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        connection.commit();</span><br></pre></td></tr></table></figure>







<h3 id="4-3-Statement接口"><a href="#4-3-Statement接口" class="headerlink" title="4.3 Statement接口"></a>4.3 Statement接口</h3><blockquote>
<p>用于编译执行sql指令</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-05 at 22.53.03.png" alt="Screen Shot 2022-04-05 at 22.53.03" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行DML操作sql指令</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"><span class="comment">//执行DQL操作sql指令</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br></pre></td></tr></table></figure>



<h3 id="4-4-ResultSet接口"><a href="#4-4-ResultSet接口" class="headerlink" title="4.4 ResultSet接口"></a>4.4 ResultSet接口</h3><blockquote>
<p>ResultSet接口对象,表示查询操作返回的结果集</p>
</blockquote>
<ul>
<li>判断结果集中是否还有数据未取出</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rs.next();</span><br></pre></td></tr></table></figure>

<ul>
<li>获取结果集中某行数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rs.getInt(colName);</span><br><span class="line">rs.getDouble(colName);</span><br><span class="line">rs.getDate(colName);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>







<h2 id="五、SQL注入问题"><a href="#五、SQL注入问题" class="headerlink" title="五、SQL注入问题"></a>五、SQL注入问题</h2><hr>
<h3 id="5-1-什么是SQL注入"><a href="#5-1-什么是SQL注入" class="headerlink" title="5.1 什么是SQL注入"></a>5.1 什么是SQL注入</h3><blockquote>
<p>在JDBC操作sql指令编写过程中,如果sql指令需要数据,可以通过字符串拼接形式拼接到指令中<br>如 : String sql &#x3D; “delete from books where book_id &#x3D;”+s;<br>这种形式可能导致&#x3D;&#x3D;因变量值的改变导致SQL指令原意发生改变&#x3D;&#x3D;,被称为sql注入</p>
<p>例如:</p>
<ol>
<li>如果s为1 ; sql为: delete from books where book_id where book_id &#x3D;1;</li>
<li>如果s为 1 or 1&#x3D;1 ; sql 为: delete from books where book_id where book_id &#x3D;1 or 1&#x3D;1;</li>
</ol>
</blockquote>
<h3 id="5-2-解决sql注入问题"><a href="#5-2-解决sql注入问题" class="headerlink" title="5.2 解决sql注入问题"></a>5.2 解决sql注入问题</h3><blockquote>
<p>使用PreparedStatement进行SQL预编译解决sql注入问题</p>
<ol>
<li><p>如果sql指令需要参数,一律使用&#x3D;&#x3D;?&#x3D;&#x3D;参数占位符</p>
</li>
<li><p>如果sql指令有&#x3D;&#x3D;?&#x3D;&#x3D;,在jdbc操作步骤中,从connection对象获取preparedStatement对sql进行预编译</p>
<p>String sql &#x3D; “delete from books where book_id&#x3D;?”;<br>PreparedStatement statement &#x3D; connection.prepareStatement(sql);</p>
</li>
<li><p>预编译完成后,通过PreparedStatement对象给预编译后sql指令的&#x3D;&#x3D;?&#x3D;&#x3D;赋值</p>
</li>
<li><p>sql指令中的&#x3D;&#x3D;?&#x3D;&#x3D;完成赋值之后,通过preparedStatement对象执行sql,但不再加载,因为加载过了<br>int i &#x3D; statement.executeUpdate();</p>
</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(book_name,book_author,book_price,book_stock,book_desc) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        statement.setString(<span class="number">1</span>,name);</span><br><span class="line">        statement.setString(<span class="number">2</span>,author);</span><br><span class="line">        statement.setDouble(<span class="number">3</span>,price);</span><br><span class="line">        statement.setInt(<span class="number">4</span>,stock);</span><br><span class="line">        statement.setString(<span class="number">5</span>,desc);</span><br><span class="line"> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate();</span><br></pre></td></tr></table></figure>





<h3 id="5-3-PreparedStatement案例"><a href="#5-3-PreparedStatement案例" class="headerlink" title="5.3 PreparedStatement案例"></a>5.3 PreparedStatement案例</h3><ul>
<li>insert</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInsertBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;1011&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Java进阶之路&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">20.01</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> <span class="string">&quot;good&quot;</span>;</span><br><span class="line">      </span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(book_name,book_author,book_price,book_stock,book_desc) values(?,?,?,?,?)&quot;</span>;   </span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        statement.setString(<span class="number">1</span>,name);</span><br><span class="line">        statement.setString(<span class="number">2</span>,author);</span><br><span class="line">        statement.setDouble(<span class="number">3</span>,price);</span><br><span class="line">        statement.setInt(<span class="number">4</span>,stock);</span><br><span class="line">        statement.setString(<span class="number">5</span>,desc);       </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate();/</span><br><span class="line">        System.out.println(i&gt;<span class="number">0</span>?<span class="string">&quot;添加成功&quot;</span>:<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!statement.isClosed() &amp;&amp; statement != <span class="literal">null</span>)&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果sql需要参数,使用preparedStatement,不需要参数就用statemnt</strong><br><strong>因为statement效率要高一点</strong></p>
<h2 id="六、工具类封装"><a href="#六、工具类封装" class="headerlink" title="六、工具类封装"></a>六、工具类封装</h2><hr>
<h3 id="6-1-工具类封装"><a href="#6-1-工具类封装" class="headerlink" title="6.1 工具类封装"></a>6.1 工具类封装</h3><h4 id="6-1-1-数据库连接"><a href="#6-1-1-数据库连接" class="headerlink" title="6.1.1 数据库连接"></a>6.1.1 数据库连接</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">           connection = DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;注册驱动失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建连接失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-1-2-关闭连接"><a href="#6-1-2-关闭连接" class="headerlink" title="6.1.2 关闭连接"></a>6.1.2 关闭连接</h4><p><strong>需要四个参数不同的关闭</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(PreparedStatement statement, Connection connection)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!statement.isClosed() &amp;&amp; statement != <span class="literal">null</span>)&#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Statement statement, Connection connection)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!statement.isClosed() &amp;&amp; statement != <span class="literal">null</span>)&#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-1-3-优化"><a href="#6-1-3-优化" class="headerlink" title="6.1.3 优化"></a>6.1.3 优化</h4><ol>
<li>每次获取connection都要注册一次数据库,所以写在静态初始化块中</li>
<li>把创建连接时需要的URL,DRIVER,USERNAME,PASSWORD等参数提前声明好</li>
<li>父接口做参数子接口也可以往里面传</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册驱动只需一次，因此放在静态初始化块中完成</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           System.out.println(<span class="string">&quot;注册驱动失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建连接失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Statement statement, Connection connection)</span>&#123;</span><br><span class="line">        closeConnection(<span class="literal">null</span>,statement,connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(ResultSet resultSet,Statement statement, Connection connection)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!resultSet.isClosed() &amp;&amp; resultSet != <span class="literal">null</span>)&#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!statement.isClosed() &amp;&amp; statement != <span class="literal">null</span>)&#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









<h2 id="七、DAO与DTO的封装"><a href="#七、DAO与DTO的封装" class="headerlink" title="七、DAO与DTO的封装"></a>七、DAO与DTO的封装</h2><hr>
<blockquote>
<p>DAO : Data Access Object 数据访问对象</p>
<p>DTO : Data Transfer Object 数据传输对象</p>
</blockquote>
<h3 id="7-1-CRUD方法的封装"><a href="#7-1-CRUD方法的封装" class="headerlink" title="7.1 CRUD方法的封装"></a>7.1 CRUD方法的封装</h3><blockquote>
<p>将能完成某个CRUD操作的代码单独定义成一个方法</p>
</blockquote>
<h3 id="7-2-DTO实体类封装"><a href="#7-2-DTO实体类封装" class="headerlink" title="7.2 DTO实体类封装"></a>7.2 DTO实体类封装</h3><blockquote>
<p>在封装CRUD操作时,对于查询操作而言,需要将查询到的数据库数据返回给调用者,但一个查询方法只能返回一个值,<br>而一条数据库记录有多个值,如何将一条数据库记录的多个值返回呢?</p>
<p>处理;在java程序中,创建一个属性与数据库表匹配的类,通过此类的对象封装查询到的数据,我们把用于传递JDBC<br>CRUD操作的数据的类称之为数据传输对象</p>
</blockquote>
<p><strong>实体类创建规则及实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类中的属性的个数和类型与对应的数据表保持一致</span></span><br><span class="line"><span class="comment">//提供所有属性的get和set方法 command+n</span></span><br><span class="line"><span class="comment">//提供类的全参构造器</span></span><br><span class="line"><span class="comment">//提供无参构造器</span></span><br><span class="line"><span class="comment">//重写toString方法</span></span><br><span class="line"><span class="comment">//暂略：重写hashcode，和equals</span></span><br><span class="line"><span class="comment">//实现：序列化接口 Serializable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类中的属性的个数和类型与对应的数据表保持一致</span></span><br><span class="line">    <span class="comment">//提供所有属性的get和set方法 command+n</span></span><br><span class="line">    <span class="comment">//提供类的全参构造器</span></span><br><span class="line">    <span class="comment">//提供无参构造器</span></span><br><span class="line">    <span class="comment">//重写toString方法</span></span><br><span class="line">    <span class="comment">//暂略：重写hashcode，和equals</span></span><br><span class="line">    <span class="comment">//实现：序列化接口 Serializable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> String bookAuthor;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bookPrice;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookStock;</span><br><span class="line">    <span class="keyword">private</span> String bookDesc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;bookId=&quot;</span> + bookId +</span><br><span class="line">                <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, bookAuthor=&#x27;&quot;</span> + bookAuthor + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, bookPrice=&quot;</span> + bookPrice +</span><br><span class="line">                <span class="string">&quot;, bookStock=&quot;</span> + bookStock +</span><br><span class="line">                <span class="string">&quot;, bookDesc=&#x27;&quot;</span> + bookDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> bookId, String bookName, String bookAuthor, <span class="type">double</span> bookPrice, <span class="type">int</span> bookStock, String bookDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">        <span class="built_in">this</span>.bookAuthor = bookAuthor;</span><br><span class="line">        <span class="built_in">this</span>.bookPrice = bookPrice;</span><br><span class="line">        <span class="built_in">this</span>.bookStock = bookStock;</span><br><span class="line">        <span class="built_in">this</span>.bookDesc = bookDesc;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//get 和 set方法太多了,省略 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>使用实体类封装查询数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelectBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TestSelectBook</span> <span class="variable">testSelectBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSelectBook</span>();</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> testSelectBook.queryBook(<span class="number">2</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">queryBook</span><span class="params">(<span class="type">int</span> bid)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DBHelper.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select *from books where book_id=&quot;</span>+bid;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//通过executeQuery执行sql查询语句</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//处理结果，从rs中获取结果，rs是一个指向结果集合的指针</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_id&quot;</span>);<span class="comment">//这里的名字是查询语句范围的列名，即如果取了别名就用别名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_author&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;book_price&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_stock&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_desc&quot;</span>);</span><br><span class="line">            book = <span class="keyword">new</span> <span class="title class_">Book</span>(id,name,author,price,stock,desc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连结,结果集也需要关闭</span></span><br><span class="line">        DBHelper.closeConnection(rs,statement,connection);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="7-3-封装多条查询数据"><a href="#7-3-封装多条查询数据" class="headerlink" title="7.3 封装多条查询数据"></a>7.3 封装多条查询数据</h3><blockquote>
<p>把结果放在List里,如:List<Book></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">queryBook</span><span class="params">(<span class="type">int</span> bid)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Book&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DBHelper.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select *from books where book_id=&quot;</span>+bid;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//通过executeQuery执行sql查询语句</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//处理结果，从rs中获取结果，rs是一个指向结果集合的指针</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_id&quot;</span>);<span class="comment">//这里的名字是查询语句范围的列名，即如果取了别名就用别名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_author&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;book_price&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">stock</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;book_stock&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;book_desc&quot;</span>);</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(id,name,author,price,stock,desc);</span><br><span class="line">          list.add(book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭连结,结果集也需要关闭</span></span><br><span class="line">        DBHelper.closeConnection(rs,statement,connection);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-4-实体类参数传递"><a href="#7-4-实体类参数传递" class="headerlink" title="7.4 实体类参数传递"></a>7.4 实体类参数传递</h3><h4 id="7-4-1-添加操作"><a href="#7-4-1-添加操作" class="headerlink" title="7.4.1 添加操作"></a>7.4.1 添加操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DBHelper.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(book_name,book_author,book_price,book_stock,book_desc) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        statement.setString(<span class="number">1</span>,book.getBookName());</span><br><span class="line">        statement.setString(<span class="number">2</span>,book.getBookAuthor());</span><br><span class="line">        statement.setDouble(<span class="number">3</span>,book.getBookPrice());</span><br><span class="line">        statement.setInt(<span class="number">4</span>,book.getBookStock());</span><br><span class="line">        statement.setString(<span class="number">5</span>,book.getBookDesc());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line">        DBHelper.closeConnection(statement,connection);</span><br><span class="line">        flag =i&gt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="7-5-DAO封装"><a href="#7-5-DAO封装" class="headerlink" title="7.5 DAO封装"></a>7.5 DAO封装</h3><blockquote>
<p>我们将数据库同一张表JDBC操作方法封装到一个类中,这个类就是访问此数据表的入口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DBHelper.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(book_name,book_author,book_price,book_stock,book_desc) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        statement.setString(<span class="number">1</span>,book.getBookName());</span><br><span class="line">        statement.setString(<span class="number">2</span>,book.getBookAuthor());</span><br><span class="line">        statement.setDouble(<span class="number">3</span>,book.getBookPrice());</span><br><span class="line">        statement.setInt(<span class="number">4</span>,book.getBookStock());</span><br><span class="line">        statement.setString(<span class="number">5</span>,book.getBookDesc());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line">        DBHelper.closeConnection(statement,connection);</span><br><span class="line">        flag =i&gt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-6-DAO类中代码优化"><a href="#7-6-DAO类中代码优化" class="headerlink" title="7.6 DAO类中代码优化"></a>7.6 DAO类中代码优化</h3><blockquote>
<ol>
<li>应用程序开发中,如果代码抛出异常且自己可以处理,则通过try&#x2F;catch处理,别throw</li>
<li>JDBC操作方法的连接需要放在finally里关闭,否则出现异常时连接不会被关闭 </li>
<li>将数据库连接Connection、Statement、ResultMap等需要关闭的数据库对象放在try之前</li>
<li>因为所有JDBC操作都要Connection、Statement对象,查询方法都要ResultSet,因此在DAO中可以将这些<br>对象定义成类的成员变量</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> Statement statement;</span><br><span class="line">    <span class="keyword">private</span> ResultSet resultSet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into books(book_name,book_author,book_price,book_stock,book_desc) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            statement = connection.prepareStatement(sql);</span><br><span class="line">            statement.setString(<span class="number">1</span>,book.getBookName());</span><br><span class="line">            statement.setString(<span class="number">2</span>,book.getBookAuthor());</span><br><span class="line">            statement.setDouble(<span class="number">3</span>,book.getBookPrice());</span><br><span class="line">            statement.setInt(<span class="number">4</span>,book.getBookStock());</span><br><span class="line">            statement.setString(<span class="number">5</span>,book.getBookDesc());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line">            flag =i&gt;<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(statement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="八、JDBC综合案例"><a href="#八、JDBC综合案例" class="headerlink" title="八、JDBC综合案例"></a>八、<strong>JDBC综合案例</strong></h2><hr>
<h3 id="8-1-JDBC数据库编程步骤"><a href="#8-1-JDBC数据库编程步骤" class="headerlink" title="8.1 JDBC数据库编程步骤"></a>8.1 JDBC数据库编程步骤</h3><ul>
<li>创建数据表: i_students</li>
<li>创建Java项目</li>
<li>创建JDBC工具类:DBHelper</li>
<li>创建DTO类(用于封装参数及查询结果)</li>
<li>创建DAO类(用于完成CRUD操作)</li>
</ul>
<h3 id="8-2-创建JDBC工具类"><a href="#8-2-创建JDBC工具类" class="headerlink" title="8.2 创建JDBC工具类"></a>8.2 创建JDBC工具类</h3><ul>
<li>在src下创建package: com.WL.jdbc.utils</li>
<li>在包中创建工具类: DBHelper</li>
<li>编写工具类<ul>
<li>添加驱动jar文件<ol>
<li>项目根目录下新建目录directory名:lib</li>
<li>复制从maven下载好的connecterJ的驱动到lib下</li>
<li>右键jar文件,选择最后一个:add as library</li>
</ol>
</li>
<li>编写DBHelper代码<ol>
<li>定义数据库连接信息</li>
<li>静态初始化块注册驱动</li>
<li>创建数据库连接方法</li>
<li>关闭连接方法</li>
</ol>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBHelper</span> &#123;</span><br><span class="line">    <span class="comment">//1 声明常量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">    <span class="comment">//2 静态快初始化驱动</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3 创建数据库连结</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4 关闭连结</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(ResultSet resultSet, Statement statement,Connection connection)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="literal">null</span> &amp;&amp; !resultSet.isClosed()) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(statement != <span class="literal">null</span> &amp;&amp; !statement.isClosed()) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed()) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="8-3-创建DTO类"><a href="#8-3-创建DTO类" class="headerlink" title="8.3 创建DTO类"></a>8.3 创建DTO类</h3><ul>
<li>新建dto包</li>
<li>包中创建数据表对应的实体类: Student<ol>
<li>声明字段,和数据表对应</li>
<li>提供set &#x2F; get</li>
<li>提供有参数和无参数构造器</li>
<li>提供toString方法</li>
</ol>
</li>
</ul>
<h3 id="8-4-创建DAO类"><a href="#8-4-创建DAO类" class="headerlink" title="8.4 创建DAO类"></a>8.4 创建DAO类</h3><blockquote>
<p>创建DAO类完成JDBC操作</p>
</blockquote>
<ul>
<li>创建package :dao</li>
<li>在包中创建类: StudentDAO (想对students表做什么操作,就在student表写什么样的方法)</li>
<li>创建 插入,查询方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDAO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> Statement statement;</span><br><span class="line">    <span class="keyword">private</span> PreparedStatement preparedStatement;</span><br><span class="line">    <span class="keyword">private</span> ResultSet resultSet;</span><br><span class="line">    <span class="comment">//添加学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into students(stu_num,stu_name,stu_gender,stu_age) values(?,?,?,?)&quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,student.getStuNum());</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>,student.getStuName());</span><br><span class="line">            preparedStatement.setString(<span class="number">3</span>,student.getStuGender());</span><br><span class="line">            preparedStatement.setInt(<span class="number">4</span>,student.getStuAge());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">            flag = i&gt;<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(<span class="literal">null</span>,preparedStatement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据学号，查询一个学生记录</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryStudent</span><span class="params">(String num)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select stu_num,stu_name,stu_gender,stu_age from students where stu_num = ?&quot;</span>;</span><br><span class="line">            preparedStatement =  connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,num);</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">stuNum</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;stu_num&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">stuName</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;stu_Name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">stuGender</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;stu_gender&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">stuAge</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;stu_age&quot;</span>);</span><br><span class="line">                student = <span class="keyword">new</span> <span class="title class_">Student</span>(stuNum,stuName,stuGender,stuAge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(resultSet,preparedStatement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询多个学生信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">listStudents</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Student&gt; studentsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select stu_num,stu_name,stu_gender,stu_age from students&quot;</span>;</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">stuNum</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;stu_num&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">stuName</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;stu_Name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">stuGender</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;stu_gender&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">stuAge</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;stu_age&quot;</span>);</span><br><span class="line">                <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(stuNum,stuName,stuGender,stuAge);</span><br><span class="line">                studentsList.add(student);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(resultSet,statement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> studentsList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="8-5测试DAO方法"><a href="#8-5测试DAO方法" class="headerlink" title="8.5测试DAO方法"></a>8.5测试DAO方法</h3><blockquote>
<p>使用junit对DAO中创建的方法进行测试</p>
</blockquote>
<h4 id="8-5-1-下载导入junit依赖"><a href="#8-5-1-下载导入junit依赖" class="headerlink" title="8.5.1 下载导入junit依赖"></a>8.5.1 下载导入junit依赖</h4><ul>
<li>从maven repository下载jar包 <ul>
<li>junit 4.12</li>
<li>hamcrest-core-1.3(如果junit时4.0+版本)</li>
</ul>
</li>
<li>copy到lib文件夹下</li>
<li>右键 add as library</li>
</ul>
<h4 id="8-5-2-创建单元测试类"><a href="#8-5-2-创建单元测试类" class="headerlink" title="8.5.2 创建单元测试类"></a>8.5.2 创建单元测试类</h4><blockquote>
<p>如果我们需要对某个类中的方法进行单元测试,我们需要创建这个类的测试类</p>
<p>StudentDAO ——-&gt; StudentDAOTest </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDAOTest</span> &#123;</span><br><span class="line">    <span class="comment">//1.定义成员变量：被测试类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDAO</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建测试方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1008&quot;</span>,<span class="string">&quot;狗&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        flag = studentDAO.insertStudent(student);</span><br><span class="line">        <span class="comment">//断言</span></span><br><span class="line">        assertTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">snum</span> <span class="operator">=</span> <span class="string">&quot;1008&quot;</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentDAO.queryStudent(snum);</span><br><span class="line">        assertEquals(<span class="string">&quot;狗&quot;</span>,student.getStuName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStudents</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = studentDAO.listStudents();</span><br><span class="line">        assertEquals(<span class="number">7</span>,list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="九、JDBC事务管理"><a href="#九、JDBC事务管理" class="headerlink" title="九、JDBC事务管理"></a>九、JDBC事务管理</h2><hr>
<h3 id="9-1-JDBC实现借书操作"><a href="#9-1-JDBC实现借书操作" class="headerlink" title="9.1 JDBC实现借书操作"></a>9.1 JDBC实现借书操作</h3><blockquote>
<ol>
<li>向records添加借书记录</li>
<li>修改books表中的库存</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDAO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">borrowBook</span><span class="params">(String stuNum,<span class="type">int</span> bookId, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 1. 向records添加借书记录</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;insert into records(snum,bid,borrow_num,is_return,borrow_date)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;values(?,?,?,0,sysdate())&quot;</span>;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql1);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,stuNum);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>,bookId);</span><br><span class="line">            preparedStatement.setInt(<span class="number">3</span>,num);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();<span class="comment">//自动提交</span></span><br><span class="line">            <span class="comment">// 2. 修改books表中的库存</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection1</span> <span class="operator">=</span> DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update books set book_stock=book_stock-? where book_id=?&quot;</span>;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement1</span> <span class="operator">=</span> connection1.prepareStatement(sql2);</span><br><span class="line">            preparedStatement1.setInt(<span class="number">1</span>,num);</span><br><span class="line">            preparedStatement1.setInt(<span class="number">2</span>,bookId);</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            flag = i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>:</p>
<ul>
<li>借书业务由两个数据库操作完成,这两个数据库操作要么同时成功,要么同时失败,构成一个数据库事务</li>
<li>JDBC的DML操作默认自动提交,因此添加借书记录操作完成之后,无论修改库存是否成功,借书记录都会添加到数据库</li>
<li>JDBC改如何做事务管理呢</li>
</ul>
<h3 id="9-2-JDBC事务管理"><a href="#9-2-JDBC事务管理" class="headerlink" title="9.2 JDBC事务管理"></a>9.2 JDBC事务管理</h3><hr>
<blockquote>
<ol>
<li>一个是事务中的多个DML操作需要基于同一个数据库连接</li>
<li>创建连接后,设置事务为手动提交–关闭自动提交</li>
<li>当所有事务的所有DML操作完成后手动提交</li>
<li>当事务的任何DML步骤出现异常,在catch代码块中执行事务回滚</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDAO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">borrowBook</span><span class="params">(String stuNum,<span class="type">int</span> bookId, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 1. 向records添加借书记录</span></span><br><span class="line">            <span class="comment">//关闭自动提交</span></span><br><span class="line">            connection = DBHelper.getConnection();</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;insert into records(snum,bid,borrow_num,is_return,borrow_date)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;values(?,?,?,0,sysdate())&quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql1);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,stuNum);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>,bookId);</span><br><span class="line">            preparedStatement.setInt(<span class="number">3</span>,num);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">            <span class="comment">// 2. 修改books表中的库存</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update books set book_stock=book_stock-? where book_id=?&quot;</span>;</span><br><span class="line">            preparedStatement1 = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement1.setInt(<span class="number">1</span>,num);</span><br><span class="line">            preparedStatement1.setInt(<span class="number">2</span>,bookId);</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> preparedStatement1.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            flag = i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//一旦事务提交异常就执行回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(<span class="literal">null</span>,preparedStatement,<span class="literal">null</span>);</span><br><span class="line">            DBHelper.closeConnection(<span class="literal">null</span>,preparedStatement1,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="9-3-基于Service层的事务管理"><a href="#9-3-基于Service层的事务管理" class="headerlink" title="9.3 基于Service层的事务管理"></a>9.3 基于Service层的事务管理</h3><blockquote>
<p>DAO只负责数据库的操作,业务由service进行管理</p>
</blockquote>
<h4 id="9-3-1-Service分层介绍"><a href="#9-3-1-Service分层介绍" class="headerlink" title="9.3.1 Service分层介绍"></a>9.3.1 Service分层介绍</h4><blockquote>
<ul>
<li>DAO负责特定的数据库操作</li>
<li>service进行业务处理,Service业务处理过程中调用DAO数据库操作</li>
</ul>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-07 at 22.53.59.png" alt="Screen Shot 2022-04-07 at 22.53.59" style="zoom:50%;" /></h3><h4 id="9-3-2-service分层实现"><a href="#9-3-2-service分层实现" class="headerlink" title="9.3.2 service分层实现"></a>9.3.2 service分层实现</h4><ul>
<li>RecordDAO</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加借书记录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertRecord</span><span class="params">(String snum, <span class="type">int</span> bid, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into records(snum,bid,borrow_num,is_return,borrow_date)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;values(?,?,?,0,sysdate())&quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,snum);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>,bid);</span><br><span class="line">            preparedStatement.setInt(<span class="number">3</span>,num);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">            flag = i&gt;<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(<span class="literal">null</span>,preparedStatement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BookDAO</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改库存</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateStock</span><span class="params">(<span class="type">int</span> bid,<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DBHelper.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update books set book_stock=book_stock-? where book_id=?&quot;</span>;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, num);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, bid);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">            flag = i&gt;<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(<span class="literal">null</span>,preparedStatement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建service包,在包下创建bookService类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">RecordDAO</span> <span class="variable">recordDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordDAO</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDAO</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAO</span>();</span><br><span class="line">    <span class="comment">//图书管理业务类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">borrowBook</span><span class="params">(String stuNum, <span class="type">int</span> bookId, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="comment">//1 添加借书记录</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> recordDAO.insertRecord(stuNum,bookId,num);</span><br><span class="line">        <span class="comment">//2 修改图书库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> bookDAO.updateStock(bookId,num);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> b1 &amp;&amp; b2;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>: 测试时用的学号一定要在books所关联的学生表中存在,否则会报错.</p>
<h4 id="9-3-3-service层事务管理"><a href="#9-3-3-service层事务管理" class="headerlink" title="9.3.3 service层事务管理"></a>9.3.3 service层事务管理</h4><blockquote>
<p>service层中多个数据库DML操作是相互独立的,为保证所有操作同时成功或失败:<br>需要保证以下条件:</p>
<ul>
<li>多个DML操作必须使用同一个数据库连接</li>
<li>第一个DML操作之前关闭自动提交</li>
<li>所有操作完成后才能提交事务</li>
<li>执行出现异常就rollback</li>
</ul>
</blockquote>
<ul>
<li><p><strong>如何让service事务中多个DML操作使用同一个数据库连接</strong></p>
<ol>
<li>在service中获取连接对象,将连接对象传递到DAO中(企业开发中相对较少)</li>
</ol>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-08 at 17.29.33.png" alt="Screen Shot 2022-04-08 at 17.29.33" style="zoom:50%;" /></li>
</ul>
<p><strong>分析:</strong> DAO类对象需要通过service传递进来,这种传递本身无可厚非,但是当我们通过面向接口开发时(为了能灵活的定义实现类)<br>        容易造成接口的冗余—接口污染</p>
<ul>
<li>&#x3D;&#x3D;<strong>使用ThreadLocal容器,实现多个DML操作使用相同的连接</strong>&#x3D;&#x3D;</li>
</ul>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-08 at 22.26.14.png" alt="Screen Shot 2022-04-08 at 22.26.14" style="zoom:50%;" />



<ul>
<li>方式一:自己声明container</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DBHelper中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//从容器中获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> container.size()&gt;<span class="number">0</span>?container.get(<span class="number">0</span>):<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(connection == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果容器中没有连接就创建连接</span></span><br><span class="line">                connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">                <span class="comment">//将连接假如到容器中</span></span><br><span class="line">                container.add(connection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//borrowService中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">RecordDAO</span> <span class="variable">recordDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordDAO</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDAO</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAO</span>();</span><br><span class="line">    <span class="comment">//图书管理业务类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">borrowBook</span><span class="params">(String stuNum, <span class="type">int</span> bookId, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DBHelper.getConnection();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//1 添加借书记录</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> recordDAO.insertRecord(stuNum,bookId,num);</span><br><span class="line">            <span class="comment">//2 修改图书库存</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> bookDAO.updateStock(bookId,num);</span><br><span class="line">            flag = b1 &amp;&amp; b2;</span><br><span class="line">            <span class="comment">//3 提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DBHelper.closeConnection(<span class="literal">null</span>,<span class="literal">null</span>,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>存储connection的容器可以使用list集合,但在多线程并发编程中会出现资源竞争问题,多个并发线程使用同一个数据库连接对象<br>而我们的要求只是同一个事务使用同一个连接,而非多个线程共享连接. </p>
<p>为了解决并发编程连接共享问题,我们使用ThreadLocal对象作为数据库连接对象的容器(threadlocal内部维护了一个map集合)<br>不同线程获取的是不同连接,同一个线程多次获取的是同一个连接</p>
</blockquote>
<ul>
<li>方式二 ThreadLocal</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Connection&gt;() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 静态快初始化驱动</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 创建数据库连结</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//从容器中获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(connection == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果容器中没有连接就创建连接</span></span><br><span class="line">                connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">                <span class="comment">//将连接假如到容器中</span></span><br><span class="line">                local.set(connection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-4-ThreadLocal下的关闭连接"><a href="#9-4-ThreadLocal下的关闭连接" class="headerlink" title="9.4 ThreadLocal下的关闭连接"></a>9.4 ThreadLocal下的关闭连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前数据库使用连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> local.get();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(connection != <span class="literal">null</span> &amp;&amp; !connection.isClosed())&#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将关闭后的connection从容器中移除</span></span><br><span class="line">                local.remove();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>:</p>
<ol>
<li>DAO中的方法关闭时就不需要关闭connection了,可以重写方法,也可以把DAO关闭的connection赋null</li>
<li>colseConnection中别忘了最后把connection从local中移除</li>
</ol>
<h2 id="十、数据库连接池"><a href="#十、数据库连接池" class="headerlink" title="十、数据库连接池"></a>十、数据库连接池</h2><hr>
<h3 id="10-1-什么是数据库连接池"><a href="#10-1-什么是数据库连接池" class="headerlink" title="10.1 什么是数据库连接池"></a>10.1 什么是数据库连接池</h3><blockquote>
<p>如果每个JDBC操作都需要数据库连接且重新创建,用完后都销毁,JVM会因频繁的创建、销毁连接而占<br>用额外的系统资源.</p>
<p>数据库连接本质上是可被重用的资源(当一个JDBC操作完成后,其创建的连接可被其他JDBC操作使用)</p>
<ul>
<li><p>基于这个特性,可以创建一个存放数据库连接的容器(连接池),数据库连接池是有最大容量的,当进行<br>JDBC操作时,不用创建连接,直接从这个容器中获取连接</p>
<ul>
<li><p>如果容器中没有数据库连接,或没有空闲的数据库连接,则创建新的数据库连接存入连接池并给<br>这个操作使用,使用完成后无需关闭连接,直接归还到这个容器中即可</p>
</li>
<li><p>如果容器中有空闲连接,则无需创建新连接,直接从容器中获取连接并使用</p>
</li>
<li><p>如果容器中没有空闲的连接,且连接池数量已经达最大值,当前操作就会等待.等待连接池某个连<br>接被归还,归还后再使用</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>连接池:存放数据库连接对象的容器</strong></p>
<p><strong>连接池作用: 对数据库连接进行管理,减少因重复创建、销毁数据库连接导致的系统开销</strong></p>
<h3 id="10-2-常用的连接池"><a href="#10-2-常用的连接池" class="headerlink" title="10.2 常用的连接池"></a>10.2 常用的连接池</h3><blockquote>
<p>我们可以编程实现: 创建一个数组、集合来存放数据库连接</p>
<p>目前市面上已有多种数据库连接池,我们只需引用</p>
</blockquote>
<table>
<thead>
<tr>
<th>功能</th>
<th>dpcp</th>
<th>druid</th>
<th>c3p0</th>
<th>HikariCP</th>
</tr>
</thead>
<tbody><tr>
<td>是否支持PSCache</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>监控</td>
<td>jmx</td>
<td>jmx&#x2F;log&#x2F;http</td>
<td>jmx,log</td>
<td>jmx</td>
</tr>
<tr>
<td>扩展性</td>
<td>弱</td>
<td>好</td>
<td>弱</td>
<td>弱</td>
</tr>
<tr>
<td>SQL拦截及解析</td>
<td>无</td>
<td>支持</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>代码</td>
<td>简单</td>
<td>中等</td>
<td>复杂</td>
<td>简单</td>
</tr>
<tr>
<td>特点</td>
<td>依赖于common-pool</td>
<td>开源,全面</td>
<td>历史久远,逻辑复杂,不易维护</td>
<td>功能简单,起源于BoneCP</td>
</tr>
<tr>
<td>连接池管理</td>
<td>LinkedBlockingDeque</td>
<td>数组</td>
<td></td>
<td>ThreadLocal</td>
</tr>
</tbody></table>
<ul>
<li>Druid是目前使用最广泛的</li>
<li>Hikari在SpringBoot中默认集成,性能诸多竞品中最好的</li>
</ul>
<h3 id="10-3-使用数据库连接池"><a href="#10-3-使用数据库连接池" class="headerlink" title="10.3 使用数据库连接池"></a>10.3 使用数据库连接池</h3><h4 id="10-3-1-创建java应用"><a href="#10-3-1-创建java应用" class="headerlink" title="10.3.1 创建java应用"></a>10.3.1 创建java应用</h4><h4 id="10-3-2-创建连接池属性配置文件"><a href="#10-3-2-创建连接池属性配置文件" class="headerlink" title="10.3.2 创建连接池属性配置文件"></a>10.3.2 创建连接池属性配置文件</h4><ol>
<li>src下创建package : com.WL.jdbc.utils</li>
<li>在包中创建druid.properties文件</li>
<li>创建lib,导入mysql包</li>
<li>配置druid连接池属性</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库连接信息</span></span><br><span class="line"><span class="attr">driverClassName</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">YES</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#连接池属性</span></span><br><span class="line"><span class="attr">initialSize</span> = <span class="string">10</span></span><br><span class="line"><span class="attr">maxActive</span> = <span class="string">50</span></span><br><span class="line"><span class="attr">minIdle</span> = <span class="string">5</span></span><br><span class="line"><span class="attr">maxWait</span> = <span class="string">30000</span></span><br></pre></td></tr></table></figure>



<h4 id="10-3-3-创建连接池工具类"><a href="#10-3-3-创建连接池工具类" class="headerlink" title="10.3.3 创建连接池工具类"></a>10.3.3 创建连接池工具类</h4><ol>
<li>下载并导入druid的jar文件</li>
<li>创建DruidUtils工具类(工具类与属性文件druid.properties在同一目录下)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 定义DruidDataSource对象，就表示数据库连接池(数据源类）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource druidDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 静态代码块，初始化DruidDataSource对象</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取druid.properties文件中配置的属性</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DruidUtils.class.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">//使用属性文件初始化druidDataSource</span></span><br><span class="line">            druidDataSource =(DruidDataSource)DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建静态方法，从连接池获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = druidDataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="十一、通用JDBC操作封装"><a href="#十一、通用JDBC操作封装" class="headerlink" title="十一、通用JDBC操作封装"></a>十一、通用JDBC操作封装</h2><hr>
<blockquote>
<p>在DAO层JDBC操作中,对数据表的增删改查操作存在代码的冗余,我们可以对其公共部分进行封装<br>实现代码复用</p>
</blockquote>
<h3 id="11-1-DML操作封装"><a href="#11-1-DML操作封装" class="headerlink" title="11.1 DML操作封装"></a>11.1 DML操作封装</h3><blockquote>
<p>对于数据库DML操作:</p>
<ul>
<li>参数不同</li>
<li>SQL不同</li>
<li>SQL参数赋值不同</li>
</ul>
</blockquote>
<ul>
<li>通用的DML操作方法<ol>
<li>在utils包中创建CommonDAO类</li>
<li>在类中创建update方法</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(String sql,Object... args)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DruidUtils.getConnection();</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">            flag=i&gt;<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="11-2-DQL操作封装"><a href="#11-2-DQL操作封装" class="headerlink" title="11.2 DQL操作封装"></a>11.2 DQL操作封装</h3><ul>
<li>通用的DQL操作方法<br>注:<ol>
<li>Object… args表示范型参数,随意参数类型和个数</li>
<li>此查询公用方法可以用于查询不同的实体类,则不同实体类返回的参数不同,为了解决这一问题,使用类范型解决问题<br>在类CommonDAO后面加上<T>表示范型,即在声明此类的对象时必须指定一个类型,来限定查询操作返回的参数类型</li>
<li>由于方法返回的是一个范型集合,因此RowMapper中的getRow方法也必须返回一个与之对应的对象</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonDAO</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">//注意1</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">query</span><span class="params">(String sql,RowMapper&lt;T&gt; rowMapper,Object... args)</span>&#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DruidUtils.getConnection();</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="comment">//从查询结果中取出值，封装到实体类中</span></span><br><span class="line">                <span class="comment">//getRow就是方法调用者在调用方法时，传递进来的用于映射查询结果的方法</span></span><br><span class="line">              <span class="comment">//注意3</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> rowMapper.getRow(resultSet);</span><br><span class="line">                list.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//RowMapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RowMapper</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getRow</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="11-3-基于通用JDBC操作案例"><a href="#11-3-基于通用JDBC操作案例" class="headerlink" title="11.3 基于通用JDBC操作案例"></a>11.3 基于通用JDBC操作案例</h3><blockquote>
<p>对图书信息进行JDBC操作</p>
<ul>
<li>创建图书实体类Book(相当于BookDTO)</li>
<li>创建BookDAO</li>
<li></li>
</ul>
</blockquote>
<h4 id="11-3-1-创建实体类"><a href="#11-3-1-创建实体类" class="headerlink" title="11.3.1 创建实体类"></a>11.3.1 创建实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> String bookAuthor;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bookPrice;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookStock;</span><br><span class="line">    <span class="keyword">private</span> String bookDesc;</span><br><span class="line">  <span class="comment">//无参构造器</span></span><br><span class="line">  <span class="comment">//有参构造器</span></span><br><span class="line">  <span class="comment">//toString</span></span><br><span class="line">  <span class="comment">//get和set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="11-3-2-创建DAO"><a href="#11-3-2-创建DAO" class="headerlink" title="11.3.2 创建DAO"></a>11.3.2 创建DAO</h4><blockquote>
<p>DAO中的操作都是调用CommonDAO实现的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CommonDAO&lt;Book&gt; commonDAO = <span class="keyword">new</span> <span class="title class_">CommonDAO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert books(book_name,book_Author,book_price,book_stock,book_desc) &quot;</span> +</span><br><span class="line">                <span class="string">&quot;values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> commonDAO.update(sql,</span><br><span class="line">                   book.getBookName(),book.getBookAuthor(),book.getBookPrice(),book.getBookStock(),book.getBookDesc());</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteBook</span><span class="params">(<span class="type">int</span> bookId)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot; delete from books where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> commonDAO.update(sql, bookId);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update books set book_name=?,book_author=?,book_price=?,book_stock=?,book_desc=? where book_id=?&quot;</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> commonDAO.update(sql, book.getBookName(),</span><br><span class="line">                book.getBookAuthor(),book.getBookPrice(),book.getBookStock(),book.getBookDesc(),book.getBookId());</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">queryBook</span><span class="params">(<span class="type">int</span> bookId)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select *from books where book_id = ?&quot;</span>;</span><br><span class="line">        RowMapper&lt;Book&gt; rowMapper= <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Book <span class="title function_">getRow</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">book_id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;book_id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">book_name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">book_author</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_author&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">book_price</span> <span class="operator">=</span> resultSet.getDouble(<span class="string">&quot;book_price&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">book_stock</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;book_stock&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">book_desc</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_desc&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Book</span>(book_id,book_name,book_author,book_price,book_stock,book_desc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;Book&gt; list = commonDAO.query(sql,rowMapper,bookId);</span><br><span class="line">        <span class="keyword">return</span> list.size()&gt;<span class="number">0</span>?list.get(<span class="number">0</span>):<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">listBooks</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select *from books&quot;</span>;</span><br><span class="line">        <span class="comment">//这里用lambda表达式来插入RowMapper</span></span><br><span class="line">        List&lt;Book&gt; list = commonDAO.query(sql,resultSet -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">book_id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;book_id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">book_name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">book_author</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_author&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">book_price</span> <span class="operator">=</span> resultSet.getDouble(<span class="string">&quot;book_price&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">book_stock</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;book_stock&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">book_desc</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_desc&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Book</span>(book_id,book_name,book_author,book_price,book_stock,book_desc);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="十二、Apache-DBUtils"><a href="#十二、Apache-DBUtils" class="headerlink" title="十二、Apache DBUtils"></a>十二、Apache DBUtils</h2><hr>
<h3 id="12-1-DBUtils介绍"><a href="#12-1-DBUtils介绍" class="headerlink" title="12.1 DBUtils介绍"></a>12.1 DBUtils介绍</h3><blockquote>
<p>Commons Utils 是Apache 组织提供的一个针对JDBC进行简单封装的开源工具类库,使用DBUtils可以极大简化<br>JDBC应用程序开发,同时不会影响数据库的性能.</p>
</blockquote>
<blockquote>
<p>DBUtils是java编程中数据库访问的轻巧,实用的工具类库</p>
<ul>
<li>提供对数据表通用的DML操作</li>
<li>提供对数据表通用的DQL操作(可以把结果封装成对象,集合等类型)</li>
</ul>
</blockquote>
<blockquote>
<p>DBUtils中的核心类:</p>
<ul>
<li>QueryRunner, 用于执行SQL指令(相当于我们自己封装的CommonDAO类)<ul>
<li>update( )用于执行,DML指令</li>
<li>query( ) 用于执行DQL指令</li>
</ul>
</li>
<li>ResultSetHandler接口,结果集处理,相当于我们自己封装的RowMapper接口<ul>
<li>BeanHandler实现类,当查询语句返回一条结果时,它将结果转换成一个对象</li>
<li>BeanListHandler实现类,当查询语句返回多条结果时,它将结果转换成一个集合</li>
<li>ScalarHandler实现类,当查询语句返回一个值时,它将结果转换为java变量</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="12-2-DBUtils使用准备"><a href="#12-2-DBUtils使用准备" class="headerlink" title="12.2 DBUtils使用准备"></a>12.2 DBUtils使用准备</h3><ol>
<li><p>新建java工程</p>
</li>
<li><p>添加依赖</p>
<ul>
<li>mysql驱动jar</li>
<li>dbutils的jar </li>
<li>druid(Apache DNUtils简历数据库连接是依赖数据源(连接池)的)的jar</li>
</ul>
</li>
<li><p>配置Druid属性文件</p>
<ul>
<li><p>src下创建utils包</p>
</li>
<li><p>包内创建druid.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库连接信息</span></span><br><span class="line"><span class="attr">driverClassName</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">YES</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#连接池属性</span></span><br><span class="line"><span class="attr">initialSize</span> = <span class="string">10</span></span><br><span class="line"><span class="attr">maxActive</span> = <span class="string">50</span></span><br><span class="line"><span class="attr">minIdle</span> = <span class="string">5</span></span><br><span class="line"><span class="attr">maxWait</span> = <span class="string">30000创建Druid连接池工具类</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>创建Druid连接池工具类</p>
<ul>
<li><p>在utils包创建DruidUtils工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource druidDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DruidUtils.class.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(is);</span><br><span class="line"></span><br><span class="line">             druidDataSource  = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = druidDataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="12-3-DBUtils使用"><a href="#12-3-DBUtils使用" class="headerlink" title="12.3 DBUtils使用"></a>12.3 DBUtils使用</h3><blockquote>
<p>完成图书信息的数据库操作</p>
</blockquote>
<h4 id="12-3-1-添加操作"><a href="#12-3-1-添加操作" class="headerlink" title="12.3.1 添加操作"></a>12.3.1 添加操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDAO</span> &#123;</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1 编写sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot; insert into books(book_name,book_author,book_price,book_stock,book_desc) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//2 准备参数</span></span><br><span class="line">            Object[] params =</span><br><span class="line">                    &#123;book.getBookName(),book.getBookAuthor(),book.getBookPrice(),book.getBookStock(),book.getBookDesc()&#125;;</span><br><span class="line">            <span class="comment">//3 调用Commons-Utils中的QueryRunner执行sql</span></span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DruidUtils.getDataSource());</span><br><span class="line">            <span class="comment">//基本上只用querryrunner的update和query两个</span></span><br><span class="line">            i = queryRunner.update(sql,params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="12-3-2-删除操作"><a href="#12-3-2-删除操作" class="headerlink" title="12.3.2 删除操作"></a>12.3.2 删除操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBook</span><span class="params">(<span class="type">int</span> bookId)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from books where book_id = ?&quot;</span>;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DruidUtils.getDataSource());</span><br><span class="line">            i = queryRunner.update(sql, bookId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>



<h4 id="12-3-3-修改操作"><a href="#12-3-3-修改操作" class="headerlink" title="12.3.3 修改操作"></a>12.3.3 修改操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update books set book_name=?,book_author=?,book_price=?,book_stock=?,book_desc=?&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;where book_id=?&quot;</span>;</span><br><span class="line">            Object[] params = &#123; book.getBookName(),</span><br><span class="line">                    book.getBookAuthor(),book.getBookPrice(),book.getBookStock(),book.getBookDesc(),book.getBookId()&#125;;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DruidUtils.getDataSource());</span><br><span class="line">            i = queryRunner.update(sql,params);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="12-3-4-查询操作"><a href="#12-3-4-查询操作" class="headerlink" title="12.3.4 查询操作"></a>12.3.4 查询操作</h4><ul>
<li><p><strong>查询一条记录</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方案二</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">queryBook</span><span class="params">(<span class="type">int</span> bookId)</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select book_id bookId,book_name bookName,book_author bookAuthor,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;book_price bookPrice,book_stock bookStock,book_desc bookDesc from books where book_id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DruidUtils.getDataSource());</span><br><span class="line">            <span class="comment">//对于查询操作，我们需要通过queryRunner对象调用query方法执行</span></span><br><span class="line">            <span class="comment">//所有的query方法都需一个ResultSerHandler参数，通过此参数指定query方法返回类型</span></span><br><span class="line">            <span class="comment">//如果sql指令执行后返回一行结果，我们通过beanHandler指定查询结果 封装的实体类类型</span></span><br><span class="line">            <span class="comment">//要求查询结果集的字段名必须与指定的实体类属性名匹配！！</span></span><br><span class="line">            <span class="comment">//方案一：创建实体类时，实体类中属性名与数据表的列名相同（通常做不到）</span></span><br><span class="line">            <span class="comment">//方案二： 查询语句字段取别名，与实体类属性名一致</span></span><br><span class="line">          <span class="comment">//方案三:自定义结果处理</span></span><br><span class="line">          <span class="comment">//这里会调用无参构造器,注意</span></span><br><span class="line">            book = queryRunner.query(sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;Book&gt;(Book.class), bookId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//方案三</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">queryBook</span><span class="params">(<span class="type">int</span> bookId)</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from books where book_id = ?&quot;</span>;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DruidUtils.getDataSource());</span><br><span class="line">            ResultSetHandler&lt;Book&gt; resultSetHandler = <span class="keyword">new</span> <span class="title class_">ResultSetHandler</span>&lt;Book&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Book <span class="title function_">handle</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">                    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">book_id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;book_id&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">book_name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_name&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">book_author</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_author&quot;</span>);</span><br><span class="line">                        <span class="type">double</span> <span class="variable">book_price</span> <span class="operator">=</span> resultSet.getDouble(<span class="string">&quot;book_price&quot;</span>);</span><br><span class="line">                        <span class="type">int</span> <span class="variable">book_stock</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;book_stock&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">book_desc</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;book_desc&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Book</span>(book_id,book_name,book_author,book_price,book_stock,book_desc);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> book;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            book = queryRunner.query(sql, resultSetHandler, bookId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询多条记录</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">listBooks</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; booksList = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select book_id bookId,book_name bookName,book_author bookAuthor,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;book_price bookPrice,book_stock bookStock,book_desc bookDesc from books&quot;</span>;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DruidUtils.getDataSource());</span><br><span class="line">            <span class="comment">//如果sql返回多条记录，我们通过BeanListHandler&lt;&gt; 指定查询结果封装的实体类的集合类型</span></span><br><span class="line">            BeanListHandler&lt;Book&gt; beanListHandler = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;Book&gt;(Book.class);</span><br><span class="line">            booksList = queryRunner.query(sql, beanListHandler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> booksList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询返回一个值</strong></p>
<blockquote>
<p>例如在做分页时,需要查询数据的总记录数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(1) from books&quot;</span>;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DruidUtils.getDataSource());</span><br><span class="line">            <span class="comment">//如果返回一个值，用ScalarHandler指定返回类型</span></span><br><span class="line">            <span class="comment">//queryRunner在处理统计函数时，是以long类型操作的，所以不能直接转Integer</span></span><br><span class="line">            <span class="comment">//如果我们确定值在int范围内，可以把long强转到int</span></span><br><span class="line">            <span class="comment">//但是建议直接把count定义成long</span></span><br><span class="line">            ScalarHandler&lt;Long&gt; scalarHandler = <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;&gt;();</span><br><span class="line">            <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> queryRunner.query(sql, scalarHandler);</span><br><span class="line">            count = (<span class="type">int</span>)l;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="MySQL进阶"><a href="#MySQL进阶" class="headerlink" title="MySQL进阶"></a>MySQL进阶</h1><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><h2 id="索引-6-7"><a href="#索引-6-7" class="headerlink" title="索引 6 7"></a>索引 6 7</h2><h2 id="sql执行方式-10"><a href="#sql执行方式-10" class="headerlink" title="sql执行方式 10"></a>sql执行方式 10</h2><h2 id="表的连接"><a href="#表的连接" class="headerlink" title="表的连接"></a>表的连接</h2>]]></content>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/2022/05/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="基础排序"><a href="#基础排序" class="headerlink" title="基础排序"></a>基础排序</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><blockquote>
<p>思想：每次选择一个数组中最小的元素放在数组的前面。</p>
<p>实现：嵌套for循环，外层循环定义循环次数，内层循环找出最小的值，额外写一个swap方法实现数组的元素交换</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">                minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr,i,minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;e &gt; <span class="number">0</span>; e--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; e; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    swap(arr, i, i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//参见2.1.1 用异或交换两值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> j )</span>&#123;</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">        arr[j] = arr[i] ^ arr[j];</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote>
<p>虽然和冒泡排序和选择排序一样时间复杂度都是O（n^2），但是插入排序受数据质量影响，有时候会表现的更好</p>
<p>思想：从0–0有序到0–N有序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++)&#123; <span class="comment">// 0到i想要有序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j+<span class="number">1</span>]; j--)&#123; <span class="comment">//每次和i相邻的元素开始比较</span></span><br><span class="line">                swap(arr, j,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> j )</span>&#123;</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">        arr[j] = arr[i] ^ arr[j];</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h2 id="进阶排序"><a href="#进阶排序" class="headerlink" title="进阶排序"></a>进阶排序</h2><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><blockquote>
<p>思想：利用递归分治的思想，要想arr整体有序，那么中点左侧和中点右侧都要有序，以此类推，而在递归过程中会调用merge方法使得此数组的小部分有序，而merge方法则是利用双指针法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       process(arr, left, mid);</span><br><span class="line">       process(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">       merge(arr, left, mid, right);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">       <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> left;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span>(p1 &lt;= mid &amp;&amp; p2 &lt;= right)&#123;</span><br><span class="line">           help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(p1 &lt;= mid)&#123;</span><br><span class="line">           help[i++] = arr[p1++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (p2 &lt;= right)&#123;</span><br><span class="line">           help[i++] = arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//注意是help.length</span></span><br><span class="line">       <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; help.length; i++)&#123;</span><br><span class="line">           <span class="comment">//这一步很容易错</span></span><br><span class="line">           arr[left + i] = help[i];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="归并应用"><a href="#归并应用" class="headerlink" title="归并应用"></a>归并应用</h3><blockquote>
<p>归并排序的拓展：求小和问题、求逆序对个数</p>
<p>求小和：<br>一个数组中某一个元素的左边所有比它小的元素和就是这个元素的小和，求某一数组的小和？</p>
<p>思想：在归并排序的基础上实现：转换思路从左往右看，如果右边的数比左边的数小就会产生一个左边数的这样一个小和，在此基础上，如果左右若干数的小和已经求和完毕，那么就可可以排序，这样小和可以直接按索引个数计算。和归并的不同点是，如果左右指针相同那么必须先拷贝右边的元素。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arr既要排序又要求小和</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">( <span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>( left == right)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> process(arr, left, middle)</span><br><span class="line">               + process(arr, middle + <span class="number">1</span>, right)</span><br><span class="line">               + merge(arr, left, middle, right);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> middle, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">       <span class="type">int</span> help[] = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">       <span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> left;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> middle + <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (p1 &lt;= middle &amp;&amp; p2 &lt;= right)&#123;</span><br><span class="line">           res += arr[p1] &lt; arr[p2] ? (right - p2 + <span class="number">1</span>) * arr[p1] : <span class="number">0</span>;</span><br><span class="line">           help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (p1 &lt;= middle)&#123;</span><br><span class="line">           help[i++] = arr[p1++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span> (p2 &lt;= right)&#123;</span><br><span class="line">           help[i++] = arr[p2++];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; help.length; i++)&#123;</span><br><span class="line">           arr[left + i] = help[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><blockquote>
<p>思想：</p>
<p>快排1.0版本：<br>取数组的最后一个数作为枢纽，然后将小于等于枢纽的数放数组的左半边，大于枢纽的数放右半边，最后将枢纽和右半边区域的第一个数做一个交换，然后将左边和右边分割，继续重复上述过程。</p>
<p>快排2.0版本：<br>和快排1.0的区别是，将等于枢纽的数放中间，将数组分割成3个部分</p>
<p>时间复杂度：最差O（n^2）<br>最差的情况是{1,2,3,4,5}每次都几乎没动，因此诞生了快排3.0版本</p>
<p>快排3.0版本：<br>随机选一个数作为枢纽，时间复杂度：O（N*logN）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="comment">//随机选一个位置和最右边的位置做交换</span></span><br><span class="line">            swap(arr, left + (<span class="type">int</span>)(Math.random() * (right - left +<span class="number">1</span>)), right);</span><br><span class="line">            <span class="type">int</span> p[] = partition(arr, left, right);</span><br><span class="line">            quickSort(arr, left, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">            quickSort(arr, p[<span class="number">1</span>] + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的是一个等于区域的左边界和右边界组成的数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] partition(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">less</span> <span class="operator">=</span> left - <span class="number">1</span>;<span class="comment">//小于区边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">more</span> <span class="operator">=</span> right;<span class="comment">//大于区边界</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; more)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[left] &lt; arr[right])&#123;</span><br><span class="line">                swap(arr, ++less, left++);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[left] &gt; arr[right])&#123;</span><br><span class="line">                swap(arr, --more, left);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, more, right);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; less + <span class="number">1</span>, more &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> j )</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><blockquote>
<p>堆结构：</p>
<p>堆是一个完全二叉树；<br>完全二叉树：<br>i的左子树：（2<em>i+1），i的右子树：（2</em>i+2），i的父节点：（（i-1）&#x2F;2）</p>
<p>堆分为大根堆和小根堆：<br>大根堆：任何一个节点是以这个节点为根节点的子树的最大值这样的堆<br>小根堆：任何一个节点是以这个节点为根节点的子树的最小值这样的堆</p>
</blockquote>
<ul>
<li><p>关于堆的常用算法：</p>
</li>
<li><p>算法一：将一个数组从0开始调整成大根堆或小根堆的算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[index] &gt; arr[(index - <span class="number">1</span>) / <span class="number">2</span>])&#123;</span><br><span class="line">          <span class="comment">//这里包含了一个逻辑，index只要大于0，那么其判断的终点之一就是index为0，不大于自己</span></span><br><span class="line">            swap(arr, index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>算法二：将已经是大根堆的数组的最大值去调之后调整剩下的数组使其仍然是一个大根堆（log（N））</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//heapSize:用来指代堆的有效长度，不一定是数组的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index, <span class="type">int</span> heapSize)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> index * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">//左子树既可以来判断有无越界，又可以通过+1来获取右子树的值</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; heapSize)&#123;</span><br><span class="line">            <span class="comment">//找出两个孩子中较大的那个，并把索引赋给largest</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">largetst</span> <span class="operator">=</span> left + <span class="number">1</span> &lt; heapSize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left] ? left + <span class="number">1</span> : left;</span><br><span class="line">            <span class="comment">//比较左右孩子的最大值和index节点的值，并把大的那个的索引返回给largest</span></span><br><span class="line">            largetst = arr[largetst] &gt; arr[index] ? largetst : index;</span><br><span class="line">            <span class="comment">//此时largest代表的是待比较节点和左右孩子中最大的节点的索引，如果这个节点就是index，那就不同下沉</span></span><br><span class="line">            <span class="keyword">if</span>(largetst == index)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果largest不是index，那么需要将此时的子树根节点下沉</span></span><br><span class="line">            swap(arr, largetst, index);</span><br><span class="line">            <span class="comment">//索引下沉</span></span><br><span class="line">            index = largetst;</span><br><span class="line">            <span class="comment">//指针下沉，让while循环继续</span></span><br><span class="line">            left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>堆排序的整体思想：<br>调用算法一将一个数组从根的size&#x3D;&#x3D;0开始慢慢调整成大&#x2F;小根堆，调整好后将第一个元素与最后一个元素做交换，同时将堆的size–，然后执行算法二将堆调整成大&#x2F;小根堆，再继续执行交换操作即可得到一个排好序的数组。<br>当然，如果数据是一开始就准备好的，那么也可以在调整至大&#x2F;小根堆的时候从最后一个节点开始根堆调整操作</p>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for( int i = 0; i &lt; arr.length; i++)&#123; // 0(N)</span></span><br><span class="line"><span class="comment">//            heapInsert(arr, i); // O(logN)</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//如果数据是一开始就已经有了，不用一个一个加那么可以直接从最后一个子树的根结点开始进行子树调整操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            heapify(arr, i, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">heapSize</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        swap(arr, <span class="number">0</span>, --heapSize);</span><br><span class="line">        <span class="keyword">while</span> (heapSize &gt; <span class="number">0</span>)&#123; <span class="comment">// O(N)</span></span><br><span class="line">            heapify(arr, <span class="number">0</span>, heapSize); <span class="comment">// O(logN)</span></span><br><span class="line">            swap(arr, <span class="number">0</span>, --heapSize); <span class="comment">// o(1)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//heapSize:用来指代堆的有效长度，不一定是数组的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index, <span class="type">int</span> heapSize)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> index * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">//左子树既可以来判断有无越界，又可以通过+1来获取右子树的值</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; heapSize)&#123;</span><br><span class="line">            <span class="comment">//找出两个孩子中较大的那个，并把索引赋给largest</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">largetst</span> <span class="operator">=</span> left + <span class="number">1</span> &lt; heapSize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left] ? left + <span class="number">1</span> : left;</span><br><span class="line">            <span class="comment">//比较左右孩子的最大值和index节点的值，并把大的那个的索引返回给largest</span></span><br><span class="line">            largetst = arr[largetst] &gt; arr[index] ? largetst : index;</span><br><span class="line">            <span class="comment">//此时largest代表的是待比较节点和左右孩子中最大的节点的索引，如果这个节点就是index，那就不同下沉</span></span><br><span class="line">            <span class="keyword">if</span>(largetst == index)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果largest不是index，那么需要将此时的子树根节点下沉</span></span><br><span class="line">            swap(arr, largetst, index);</span><br><span class="line">            <span class="comment">//索引下沉</span></span><br><span class="line">            index = largetst;</span><br><span class="line">            <span class="comment">//指针下沉，让while循环继续</span></span><br><span class="line">            left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//这里有个小知识：-1/2在编程中仍为0</span></span><br><span class="line">        <span class="keyword">while</span>(arr[index] &gt; arr[(index - <span class="number">1</span>) / <span class="number">2</span>])&#123;<span class="comment">//这里包含了一个逻辑，index只要大于0，那么其判断的终点之一就是index为0，不大于自己</span></span><br><span class="line">            swap(arr, index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="堆排序扩展"><a href="#堆排序扩展" class="headerlink" title="堆排序扩展"></a>堆排序扩展</h3><blockquote>
<p>已知一个几乎有序的数组，几乎有序是指如果把数组排好序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说很小，请选择一个合适的算法对这个数组进行排序。</p>
<p>思想：假设k&#x3D;&#x3D;6，那么先将数组的前7个数拿出来调整成小根堆，由于几乎有序且k为6，所以0位置的那个数一定是数组的最小值，然后指针后移，将第八个数加入到堆并调整成小根堆，同理，又能找出剩下元素的最小值，以此类推。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heatSortDistanceLessK</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="comment">//默认小根堆</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//取出前k个数进小根堆，之所以与数组长度比较是因为害怕k的质量不行，比数组长度还大</span></span><br><span class="line">        <span class="keyword">for</span>(; index &lt; Math.min(arr.length, k); index++)&#123;</span><br><span class="line">            queue.add(arr[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//声明排序指针</span></span><br><span class="line">        <span class="keyword">for</span> (; index &lt; arr.length; i++, index++)&#123;</span><br><span class="line">            queue.add(arr[index]); <span class="comment">//继续将数组中的元素添加至小根堆</span></span><br><span class="line">            arr[i] = queue.poll(); <span class="comment">// 将小根堆的最小值弹出至数组的前端</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一定是index到了数组尾而小根堆里还有数字，所以将小根堆的元素弹出</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            arr[i++] = queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









<h2 id="特殊排序"><a href="#特殊排序" class="headerlink" title="特殊排序"></a>特殊排序</h2><h3 id="桶排序（基数排序）"><a href="#桶排序（基数排序）" class="headerlink" title="桶排序（基数排序）"></a>桶排序（基数排序）</h3><blockquote>
<p>思想：找出数组中最大数并得到他的位数，然后准备10个桶，第一轮从个位开始比，先将元素按个位数投入到桶中，排序好后倒出，再按十位数重复上述操作，整个过程重复的轮数是最大数的位数。</p>
<p>实际的基数排序代码会对桶这个操作进行优化来模拟出桶的操作，准备一个0到10的数组，初始这个数组的每一个元素的含义是当前基数下个数字的词频，然后会将词频累加，即数组的当前元素与此元素之前的所有元素累加，这是为了模拟出桶的操作，接下来会从右到左遍历待排序数组，根据遍历到的元素的基数去基数词频数组里找，对应找到的元素减一就是该元素应该放的额外数组的位置。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> digit)</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">radix</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> bucket[] = <span class="keyword">new</span> <span class="title class_">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1</span>; d &lt;= digit; d++)&#123; <span class="comment">//有多少位就进出几次</span></span><br><span class="line">            <span class="comment">//词频数组</span></span><br><span class="line">            <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[radix];</span><br><span class="line">            <span class="keyword">for</span>(i = L; i &lt;= R; i++)&#123;</span><br><span class="line">                j = getDIgit(arr[i], d);</span><br><span class="line">                count[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; radix; i++)&#123;</span><br><span class="line">                count[i] = count[i] + count[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = R; i&gt;=L; i--)&#123;</span><br><span class="line">                j = getDIgit(arr[i], d);</span><br><span class="line">                bucket[count[j] - <span class="number">1</span>] = arr[i];</span><br><span class="line">                count[j]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i = L, j = <span class="number">0</span>; i &lt;= R; i++, j++)&#123;</span><br><span class="line">                arr[i] = bucket[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得某个数字的某位的数</span></span><br><span class="line">    <span class="comment">//math.pow返回某个数的几次方</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getDIgit</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> d)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((x / ((<span class="type">int</span>) Math.pow(<span class="number">10</span>, d - <span class="number">1</span>))) % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找出数组中最大数字的位数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxbits</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            max = max &gt; arr[i] ? max : arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(max != <span class="number">0</span>)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            max /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









<h3 id="按频率将数组升序排列"><a href="#按频率将数组升序排列" class="headerlink" title="按频率将数组升序排列"></a>按频率将数组升序排列</h3><blockquote>
<p>给你一个整数数组 nums ，请你将数组按照每个值的频率 升序 排序。如果有多个值的频率相同，请你按照数值本身将它们 降序 排序。<br>请你返回排序后的数组。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/sort-array-by-increasing-frequency">https://leetcode.cn/problems/sort-array-by-increasing-frequency</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] frequencySort(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">       Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">           map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">           list.add(num);</span><br><span class="line">       &#125;</span><br><span class="line">       Collections.sort(list, (a, b) -&gt; &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">cnt1</span> <span class="operator">=</span> map.get(a), cnt2 = map.get(b);</span><br><span class="line">           <span class="keyword">return</span> cnt1 != cnt2 ? cnt1 - cnt2 : b - a;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">           nums[i] = list.get(i);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<ul>
<li>基于比较的排序暂时没找到时间复杂度在O（N*logN）以下的</li>
<li>空间复杂度在0（N）以下的稳定性都不行</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th>时间复杂度</th>
<th>空间复杂度</th>
<th>稳定性</th>
</tr>
</thead>
<tbody><tr>
<td>选择</td>
<td>N^2</td>
<td>1</td>
<td>no</td>
</tr>
<tr>
<td>冒泡</td>
<td>N^2</td>
<td>1</td>
<td>yes</td>
</tr>
<tr>
<td>插入</td>
<td>N^2</td>
<td>1</td>
<td>yes</td>
</tr>
<tr>
<td>归并</td>
<td>N*logN</td>
<td>N</td>
<td>yes</td>
</tr>
<tr>
<td>快排</td>
<td>N*logN</td>
<td>logN</td>
<td>no</td>
</tr>
<tr>
<td>堆</td>
<td>N*logN</td>
<td>1</td>
<td>no</td>
</tr>
</tbody></table>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><hr>
<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h3 id="局部最小值问题"><a href="#局部最小值问题" class="headerlink" title="局部最小值问题"></a>局部最小值问题</h3><blockquote>
<p>在一个长度为n的无序数组中，相邻的数一定不相等</p>
<p>局部最小的定义：0位置的数若小于1位置的数，就是局部最小，n-1位置的数若小于n-2位置的数，n-1就是局部最小，若某个数位置为i，且比i-1和i+1位置的数都小，那i也是一个局部最小的数</p>
<p>问题：最快找到一个局部最小数？</p>
<p>分析：拿到数组首先单独判断数组的开头和结尾，因为如果开头和结尾都不是局部最小，那么整个数据必定存在局部最小的数，因为如果开头和结尾都不是局部最小数，这意味着arr[0] &gt; arr[1], arr[n-2] &lt; arr[n-1],可参考高数中罗尔定理，这个数组的元素值大小变化必定存在拐点。</p>
</blockquote>
<h3 id="两有序数组排序"><a href="#两有序数组排序" class="headerlink" title="两有序数组排序"></a>两有序数组排序</h3><blockquote>
<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>
<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>
<p>LeetCode 4</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        二分法解题思路</span></span><br><span class="line"><span class="comment">        nums1 和nums2 的长度分别是m 和n</span></span><br><span class="line"><span class="comment">        当m + n 是奇数时，从下标来说，中位数是(m + n) / 2 </span></span><br><span class="line"><span class="comment">        当m + n 是偶数时，从下标来说，中位数是(m + n) / 2 和 (m + n) / 2 - 1</span></span><br><span class="line"><span class="comment">        所以问题就变成了寻找两个数组中第(m + n) / 2 小和(m + n) / 2 - 1小的数</span></span><br><span class="line"><span class="comment">        解题思想就变成了找到两个数组的第k小的数字</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       </span><br><span class="line">         <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> nums1.length, length2 = nums2.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLength</span> <span class="operator">=</span> length1 + length2;</span><br><span class="line">        <span class="keyword">if</span> (totalLength % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">midIndex</span> <span class="operator">=</span> totalLength / <span class="number">2</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">median</span> <span class="operator">=</span> getKthElement(nums1, nums2, midIndex + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> median;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">midIndex1</span> <span class="operator">=</span> totalLength / <span class="number">2</span> - <span class="number">1</span>, midIndex2 = totalLength / <span class="number">2</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">median</span> <span class="operator">=</span> (getKthElement(nums1, nums2, midIndex1 + <span class="number">1</span>) + getKthElement(nums1, nums2, midIndex2 + <span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">            <span class="keyword">return</span> median;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getKthElement</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">/* 主要思路：要找到第 k (k&gt;1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较</span></span><br><span class="line"><span class="comment">         * 这里的 &quot;/&quot; 表示整除</span></span><br><span class="line"><span class="comment">         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个</span></span><br><span class="line"><span class="comment">         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个</span></span><br><span class="line"><span class="comment">         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) &lt;= k-2 个</span></span><br><span class="line"><span class="comment">         * 这样 pivot 本身最大也只能是第 k-1 小的元素</span></span><br><span class="line"><span class="comment">         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 &quot;删除&quot;，剩下的作为新的 nums1 数组</span></span><br><span class="line"><span class="comment">         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 &quot;删除&quot;，剩下的作为新的 nums2 数组</span></span><br><span class="line"><span class="comment">         * 由于我们 &quot;删除&quot; 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> nums1.length, length2 = nums2.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">kthElement</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 边界情况</span></span><br><span class="line">            <span class="keyword">if</span> (index1 == length1) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums2[index2 + k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index2 == length2) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[index1 + k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Math.min(nums1[index1], nums2[index2]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 正常情况</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> k / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newIndex1</span> <span class="operator">=</span> Math.min(index1 + half, length1) - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newIndex2</span> <span class="operator">=</span> Math.min(index2 + half, length2) - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pivot1</span> <span class="operator">=</span> nums1[newIndex1], pivot2 = nums2[newIndex2];</span><br><span class="line">            <span class="keyword">if</span> (pivot1 &lt;= pivot2) &#123;</span><br><span class="line">                k -= (newIndex1 - index1 + <span class="number">1</span>);</span><br><span class="line">                index1 = newIndex1 + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k -= (newIndex2 - index2 + <span class="number">1</span>);</span><br><span class="line">                index2 = newIndex2 + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="旋转数组最小数字"><a href="#旋转数组最小数字" class="headerlink" title="旋转数组最小数字"></a>旋转数组最小数字</h3><blockquote>
<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p>
<p>给你一个可能存在 <strong>重复</strong> 元素值的数组 <code>numbers</code> ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的<strong>最小元素</strong>。例如，数组 <code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一次旋转，该数组的最小值为 1。 </p>
<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 旋转一次 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p>
<p>LeetCode 剑指offer 11</p>
</blockquote>
<p>mid的值有以下三种情况</p>
<ul>
<li>当索引mid的值小于high时，说明此时mid所处的位置是最小值及最小值右边的区域<br>此时mid后面的区域可以不要了（不包括mid）</li>
<li>当索引值mid的值大于high时，说明mid所处的位置在最小值的左边，那么mid左边的区域可以不要了（包括mid）</li>
<li>当索引值mid等于high时，由于重复值的存在，不可以鲁莽的舍弃某一区域，所以high–</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minArray</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> numbers.length - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span> (numbers[mid] &lt; numbers[high]) &#123;</span><br><span class="line">               high = mid;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numbers[mid] &gt; numbers[high]) &#123;</span><br><span class="line">               low = mid + <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               high--;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> numbers[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="找到K个最接近的元素"><a href="#找到K个最接近的元素" class="headerlink" title="找到K个最接近的元素"></a>找到K个最接近的元素</h3><blockquote>
<p>给定一个 <strong>排序好</strong> 的数组 <code>arr</code> ，两个整数 <code>k</code> 和 <code>x</code> ，从数组中找到最靠近 <code>x</code>（两数之差最小）的 <code>k</code> 个数。返回的结果必须要是按升序排好的。</p>
<p>LeetCode 658</p>
</blockquote>
<p><strong>比较器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findClosestElements</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; klist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> nums : arr) &#123;</span><br><span class="line">            klist.add(nums);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(klist, (a, b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(a - x) != Math.abs(b - x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Math.abs(a - x) - Math.abs(b - x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a - b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;Integer&gt; ans = klist.subList(<span class="number">0</span>, k);</span><br><span class="line">        Collections.sort(ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>双指针: 排除法</strong></p>
<p>因为arr已经是排序好的，所以每次排出的元素一定是在数组的两端，那么只要用双指针移动就好，其中有一个小小优化就是，没必要用Math.abs()函数，直接做差就好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findClosestElements</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pl</span> <span class="operator">=</span> <span class="number">0</span>, pr = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((pr - pl) &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((arr[pr] - x) &lt; (x - arr[pl])) &#123;</span><br><span class="line">                pl++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pr--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pl; i &lt;= pr; i++) &#123;</span><br><span class="line">            ans.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>二分法</strong></p>
<p>可以知道的是：满足条件的k个数一定是x周围的连续区间内的数，所以可以去维护一个长度为k的“最优区间”<br>需要做的是：通过找到这个最优区间的左端点来做到定位区间<br>初始声明：left &#x3D; 0, right &#x3D; arr.length - k<br> left和right的含义是：最优区间的左端点一定在这个区间范围内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findClosestElements</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> size - k;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 尝试从长度为 k + 1 的连续子区间删除一个元素</span></span><br><span class="line">            <span class="comment">// 从而定位左区间端点的边界值</span></span><br><span class="line">            <span class="keyword">if</span> (x - arr[mid] &gt; arr[mid + k] - x) &#123;</span><br><span class="line">                <span class="comment">// 下一轮搜索区间是 [mid + 1..right]</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 下一轮搜索区间是 [left..mid]</span></span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt; left + k; i++) &#123;</span><br><span class="line">            res.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="阶乘后K个0"><a href="#阶乘后K个0" class="headerlink" title="阶乘后K个0"></a>阶乘后K个0</h3><blockquote>
<p><code>f(x)</code> 是 <code>x!</code> 末尾是 0 的数量。回想一下 <code>x! = 1 * 2 * 3 * ... * x</code>，且 <code>0! = 1</code> 。</p>
<ul>
<li>例如， <code>f(3) = 0</code> ，因为 <code>3! = 6</code> 的末尾没有 0 ；而 <code>f(11) = 2</code> ，因为 <code>11!= 39916800</code> 末端有 2 个 0 。</li>
</ul>
<p>给定 <code>k</code>，找出返回能满足 <code>f(x) = k</code> 的非负整数 <code>x</code> 的数量。</p>
<p>LeetCode 793</p>
</blockquote>
<h3 id="袋子里最小数目的球"><a href="#袋子里最小数目的球" class="headerlink" title="袋子里最小数目的球"></a>袋子里最小数目的球</h3><blockquote>
<p>给你一个整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 表示第 <code>i</code> 个袋子里球的数目。同时给你一个整数 <code>maxOperations</code> 。</p>
<p>你可以进行如下操作至多 <code>maxOperations</code> 次：</p>
<ul>
<li>选择任意一个袋子，并将袋子里的球分到 2 个新的袋子中，每个袋子里都有正整数个球。</li>
<li>比方说，一个袋子里有 <code>5</code> 个球，你可以把它们分到两个新袋子里，分别有 <code>1</code> 个和 <code>4</code> 个球，或者分别有 <code>2</code> 个和 <code>3</code> 个球。</li>
</ul>
<p>你的开销是单个袋子里球数目的 <strong>最大值</strong> ，你想要 <strong>最小化</strong> 开销。</p>
<p>请你返回进行上述操作后的最小开销。</p>
<p>LeetCode 1760</p>
</blockquote>
<p><strong>二分法</strong></p>
<p>一般题目中给出了最大、最小等字样的题目都可以使用二分法来解决问题。<br>二分分的是最大最小之间可能的值，不断减小ans的区间来逼近最终答案<br>此题就是可以将题目改成：<br>存在一个ans使得，在操作数小于maxOpts时让分好后袋子里的球的最大值小于ans<br>此ans的范围在数组的最小值和最大值之间，不断二分，减小ans的存在区间，找到正确答案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumSize</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> maxOperations)</span> &#123;</span><br><span class="line">        <span class="comment">// 上下界是数组的最大最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = Arrays.stream(nums).max().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// 每次二分的mid也就是假设可以在maxO内将袋子里的球分到小于mid的情况</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">opts</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                <span class="comment">// 计算将每个袋子里的球分到比mid小需要的操作数，并累加</span></span><br><span class="line">                opts += (num - <span class="number">1</span>) / mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果需要的操作数小于max，说明符合情况，那就继续缩小上界</span></span><br><span class="line">            <span class="keyword">if</span> (opts &lt;= maxOperations) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果大于max，那就扩大下界</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="搜索排序旋转数组"><a href="#搜索排序旋转数组" class="headerlink" title="搜索排序旋转数组"></a>搜索排序旋转数组</h3><blockquote>
<p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p>
<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code>处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p>
<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p>
<p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p>
<p>LeetCode 33 (hot 100)</p>
</blockquote>
<p><strong>核心思想就是一句话，一个数组旋转后，任意分成两部分，一定是一个有序，另一个局部有序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>] == target ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span>  <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="comment">// 这个if可以判断出当前哪一个区域是有序的</span></span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="第一个和最后一个"><a href="#第一个和最后一个" class="headerlink" title="第一个和最后一个"></a>第一个和最后一个</h3><blockquote>
<p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p>
<p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p>
<p>LeetCode 34 (hot 100)</p>
</blockquote>
<p><strong>朴素二分法</strong></p>
<p>这是我拿到题写的方法，用的是最朴素的二分法，找到后两边扩散去寻找边界，简单好理解，但是二分法利用的不是特别好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        Arrays.fill(ans, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> mid, r= mid;</span><br><span class="line">                <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; nums[l] == target) &#123;</span><br><span class="line">                    l--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (r &lt; nums.length &amp;&amp; nums[r] == target) &#123;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[<span class="number">0</span>] = l + <span class="number">1</span>;</span><br><span class="line">                ans[<span class="number">1</span>] = r - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>二分法找边界</strong></p>
<p>考虑 target 开始和结束位置，其实我们要找的就是数组中「第一个等于 target 的位置」（记为 leftIdx）和「第一个大于 target 的位置减一」（记为 rightIdx）</p>
<p>二分查找中，寻找 leftIdx\textit{leftIdx}leftIdx 即为在数组中寻找第一个大于等于 target 的下标，寻找 rightIdx 即为在数组中寻找第一个大于 target 的下标，然后将下标减一。两者的判断条件不同，为了代码的复用，我们定义 binarySearch(nums, target, lower) 表示在 nums 数组中二分查找 target 的位置，如果 lower 为 true，则查找第一个大于等于 target 的下标，否则查找第一个大于 target 的下标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIdx</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightIdx</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">false</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftIdx &lt;= rightIdx &amp;&amp; leftIdx &gt;= <span class="number">0</span> &amp;&amp; rightIdx &lt; nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;leftIdx, rightIdx&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">boolean</span> lower)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, ans = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 我们需要找到大于target和大于等于target的，所以应该把并集之外的情况摘出</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target)) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























<h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="找规定时间的人"><a href="#找规定时间的人" class="headerlink" title="找规定时间的人"></a>找规定时间的人</h3><blockquote>
<p>给你两个整数数组 startTime（开始时间）和 endTime（结束时间），并指定一个整数 queryTime 作为查询时间。</p>
<p>已知，第 i 名学生在 startTime[i] 时开始写作业并于 endTime[i] 时完成作业。</p>
<p>请返回在查询时间 queryTime 时正在做作业的学生人数。形式上，返回能够使 queryTime 处于区间 [startTime[i], endTime[i]]（含）的学生人数。</p>
<p>LeetCode 1450 </p>
</blockquote>
<p><strong>差分数组</strong></p>
<p>这题当然很简答，正常的一次遍历就可以，而且效率最高，但是在这里介绍一个很妙的算法：差分数组，以endTime最大结束时间 + 2的长度声明一个差分数组，在 startTime[i] 处 +1 ，在 endTime[i + 1] 处 -1，然后从 1到 queryTime求和，即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">busyStudent</span><span class="params">(<span class="type">int</span>[] startTime, <span class="type">int</span>[] endTime, <span class="type">int</span> queryTime)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> startTime.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxEndTime</span> <span class="operator">=</span> Arrays.stream(endTime).max().getAsInt();</span><br><span class="line">        <span class="keyword">if</span> (queryTime &gt; maxEndTime) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[maxEndTime + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cnt[startTime[i]] ++;</span><br><span class="line">            cnt[endTime[i] + <span class="number">1</span>] --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= queryTime; i++) &#123;</span><br><span class="line">            ans += cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







































<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><hr>
<blockquote>
<p>用法小结：</p>
<ul>
<li><p>判断奇偶</p>
<p>(x &amp; 1) &#x3D;&#x3D; 0 为真则为奇</p>
</li>
<li></li>
</ul>
</blockquote>
<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><blockquote>
<p>异或运算：相同为0，不同为N，也可以理解为二进制下无进位相加</p>
<p>异或的性质：</p>
<ol>
<li>0 ^ N &#x3D; N , N ^ N &#x3D; 0</li>
<li>异或运算满足交换律或结合律(用无进位相加去理解)</li>
</ol>
</blockquote>
<h3 id="异或交换两值"><a href="#异或交换两值" class="headerlink" title="异或交换两值"></a>异或交换两值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//能用以下操作进行值交换的前提是两个数在内存中是独立的内存区域</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> j )</span>&#123;</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">        arr[j] = arr[i] ^ arr[j];</span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="出现奇数偶数次的数"><a href="#出现奇数偶数次的数" class="headerlink" title="出现奇数偶数次的数"></a>出现奇数偶数次的数</h3><blockquote>
<p>一个int型数组：</p>
<ol>
<li>有一个数出现了奇数次，其他都出现偶数次，怎么找到这个数？<br>解析：声明一个变量eor为0，来和数组所有的元素依次异或，得到的值即为唯一出现奇数次的那个数。</li>
<li>有两个数（a和b不等）出现了奇数次，其他出现了偶数次，怎么找到这两个数？<br>解析：先声明一个变量eor为0，和第一题一项先和数组的所有元素依次异或一遍，但是这个得到的值是a异或b，由于a和b不等，这也就意味着a和b这两个32为的数上至少有一位不同，即至少有一位（设第i位）的数a和b一个为1一个为0，那么按照这个条件可以把这个数组中的数分为两部分，一部分是第i位为1的数，还有一部分是第i位为0的数，再用一个eor与其中一部分的数分别异或即可得到a或b其中一个，</li>
</ol>
<p>要求空间复杂度 O（1）、时间复杂度O（n）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//1.找出出现奇数次的数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findNumOdd</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">            eor = eor ^ cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eor;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2.找到出现奇数次的两个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">finNumOdds</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">            eor = eor ^ cur;</span><br><span class="line">        &#125;<span class="comment">//此时得到的eor是 a^b</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightOne</span> <span class="operator">=</span> eor &amp; (~eor +<span class="number">1</span>);<span class="comment">//这里得到的是一个数最右边的1，参见2.2.1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">onlyOne</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> cur : arr)&#123;</span><br><span class="line">          <span class="comment">//rightOne这个数的二进制一定是一个只有1位是1的数即2的整数次方，所以和rightOne这个数相</span></span><br><span class="line">          <span class="comment">//与的数为0的数，那个位置一定为1，（==1也可以），这样就把数组中的数分成两部分了。</span></span><br><span class="line">            <span class="keyword">if</span>((cur &amp; rightOne) == <span class="number">0</span>)&#123;</span><br><span class="line">                onlyOne ^= cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(onlyOne + <span class="string">&quot; &quot;</span> + (onlyOne ^ eor));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="取反-与"><a href="#取反-与" class="headerlink" title="取反-与"></a>取反-与</h2><h3 id="出现最频繁的偶数"><a href="#出现最频繁的偶数" class="headerlink" title="出现最频繁的偶数"></a>出现最频繁的偶数</h3><blockquote>
<p>给你一个整数数组 <code>nums</code> ，返回出现最频繁的偶数元素。</p>
<p>如果存在多个满足条件的元素，只需要返回 <strong>最小</strong> 的一个。如果不存在这样的元素，返回 <code>-1</code> 。</p>
<p>LeetCode 2404</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mostFrequentEven</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100001</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCnt</span> <span class="operator">=</span> <span class="number">0</span>, maxNum = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i] &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++cnt[nums[i]];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; maxCnt || c == maxCnt &amp;&amp; nums[i] &lt; maxNum) &#123;</span><br><span class="line">                maxCnt = c;</span><br><span class="line">                maxNum = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="得到数最右的1"><a href="#得到数最右的1" class="headerlink" title="得到数最右的1"></a>得到数最右的1</h3><blockquote>
<p>如何利用位操作得到一个不等于0的数二进制的最右边的1？</p>
<p>解析：先取反，后加1，再与自己相与</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rightOne</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> a &amp; (~a + <span class="number">1</span>);</span><br><span class="line">       System.out.println(right);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>







<h3 id="一致字符串数目"><a href="#一致字符串数目" class="headerlink" title="一致字符串数目"></a>一致字符串数目</h3><blockquote>
<p>给你一个由不同字符组成的字符串 <code>allowed</code> 和一个字符串数组 <code>words</code> 。如果一个字符串的每一个字符都在 <code>allowed</code> 中，就称这个字符串是 <strong>一致字符串</strong> 。</p>
<p>请你返回 <code>words</code> 数组中 <strong>一致字符串</strong> 的数目。</p>
<p>LeetCode 1684</p>
</blockquote>
<p><strong>比较直观的方法：HashSet、Hash数组</strong></p>
<p>此题比较简单，用常规思维的方法很容易写出来，可以利用Set的不重合的特性，也可以利用一个26位大小的计数数组来做，总体比较简单就不写在这里了</p>
<p><strong>牛逼方法：掩码位运算</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countConsistentStrings</span><span class="params">(String allowed, String[] words)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allowed.length(); i++) &#123;</span><br><span class="line">            flag |= <span class="number">1</span> &lt;&lt;(allowed.charAt(i) - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                temp |= <span class="number">1</span> &lt;&lt; (word.charAt(i) - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((flag | temp) == flag) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





















<h2 id="位运算应用"><a href="#位运算应用" class="headerlink" title="位运算应用"></a>位运算应用</h2><h3 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h3><blockquote>
<p>N皇后问题的位运算解法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不超过32的N皇后问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">num2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">32</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> n == <span class="number">32</span> ? -<span class="number">1</span> : (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; <span class="comment">//将limit的后N位设置为全0模式</span></span><br><span class="line">        <span class="keyword">return</span> process2(limit, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int limit, 表示可以在哪些位置上去尝试放皇后</span></span><br><span class="line">    <span class="comment">//int colLim, 表示列限制</span></span><br><span class="line">    <span class="comment">//int leftDiaLim, 表示左斜线限制</span></span><br><span class="line">    <span class="comment">//int rightDiaLim，表示右斜线限制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">process2</span><span class="params">(<span class="type">int</span> limit,</span></span><br><span class="line"><span class="params">                                <span class="type">int</span> colLim,</span></span><br><span class="line"><span class="params">                                <span class="type">int</span> leftDiaLim,</span></span><br><span class="line"><span class="params">                                <span class="type">int</span> rightDiaLim)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (colLim == limit) &#123; <span class="comment">// 当列限制和limit一样时说明所有位置都被填满了，即完成了一种可能性</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mostRightOne</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//列限制、左斜线限制和右斜线限制求或得到了不可以摆皇后的位置都是1的一个数</span></span><br><span class="line">        <span class="comment">//再求反得到了一个没有限制的位为1的数</span></span><br><span class="line">        <span class="comment">//再和limit求与得到了一个后N为能放皇后的位为1的数</span></span><br><span class="line">        <span class="comment">//即pos就是所有候选皇后位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> limit &amp; (~(colLim | leftDiaLim | rightDiaLim));</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos != <span class="number">0</span>) &#123;</span><br><span class="line">            mostRightOne = pos &amp; (~pos + <span class="number">1</span>); <span class="comment">// 提取出候选皇后位置最右边的1出来</span></span><br><span class="line">            pos = pos - mostRightOne; <span class="comment">// 试完后将该位置的1减去，这样继续试下一个位置的1</span></span><br><span class="line">            res += process2(limit,</span><br><span class="line">                    colLim | mostRightOne, <span class="comment">//或运算得到列限制</span></span><br><span class="line">                    (leftDiaLim | mostRightOne) &lt;&lt; <span class="number">1</span>, <span class="comment">//左移左斜线限制</span></span><br><span class="line">                    (rightDiaLim | mostRightOne) &gt;&gt; <span class="number">1</span>); <span class="comment">//右移右斜线限制</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









<h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><blockquote>
<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 <a href="http://en.wikipedia.org/wiki/Hamming_weight">汉明重量</a>).）。</p>
<p>LeetCode 剑指offer 15</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="至少在两个数组出现"><a href="#至少在两个数组出现" class="headerlink" title="至少在两个数组出现"></a>至少在两个数组出现</h3><blockquote>
<p>给你三个整数数组 <code>nums1</code>、<code>nums2</code> 和 <code>nums3</code> ，请你构造并返回一个 <strong>元素各不相同的</strong> 数组，且由 <strong>至少</strong>在 <strong>两个</strong> 数组中出现的所有值组成<em>。</em>数组中的元素可以按 <strong>任意</strong> 顺序排列。</p>
<p>LeetCode 2032</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">twoOutOfThree</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            map.put(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">            map.put(i, map.getOrDefault(i, <span class="number">0</span>) | <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums3) &#123;</span><br><span class="line">            map.put(i, map.getOrDefault(i, <span class="number">0</span>) | <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> ((v &amp; (v - <span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">                ans.add(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="第一个出现2次的字母"><a href="#第一个出现2次的字母" class="headerlink" title="第一个出现2次的字母"></a>第一个出现2次的字母</h3><blockquote>
<p>给你一个由小写英文字母组成的字符串 <code>s</code> ，请你找出并返回第一个出现 <strong>两次</strong> 的字母。</p>
<p><strong>注意：</strong></p>
<ul>
<li>如果 <code>a</code> 的 <strong>第二次</strong> 出现比 <code>b</code> 的 <strong>第二次</strong> 出现在字符串中的位置更靠前，则认为字母 <code>a</code> 在字母 <code>b</code> 之前出现两次。</li>
<li><code>s</code> 包含至少一个出现两次的字母。</li>
</ul>
<p>LeetCode 2351</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">repeatedCharacter</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">seen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> ((seen &amp; (<span class="number">1</span> &lt;&lt; x)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ch;</span><br><span class="line">            &#125;</span><br><span class="line">            seen |= (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// impossible</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





















<h2 id="数学应用"><a href="#数学应用" class="headerlink" title="数学应用"></a>数学应用</h2><h3 id="打印32位数每一位"><a href="#打印32位数每一位" class="headerlink" title="打印32位数每一位"></a>打印32位数每一位</h3><blockquote>
<p>java的int类型数字是32位的，写一个方法打印所有位的数字</p>
</blockquote>
<p><strong>思路</strong></p>
<p>1 左移 31位的结果是，将 1 向左移动了31位，且低位补 0，这样和 num 相与的话其他位都是 0，所以就看移动的那一位的了<br>（一个数左移一位相当于乘2）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printEvery</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> num &amp; (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            System.out.print(x == <span class="number">0</span> ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>























<h1 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h1><hr>
<h2 id="Master公式"><a href="#Master公式" class="headerlink" title="Master公式"></a>Master公式</h2><p>$$<br>T(N) &#x3D; a \times T(\frac N b) +O(N^d)\<br>\</p>
<p>(1): \log_b^a &lt; d \Rightarrow O(N^d)\<br>(2): \log_b^a &gt; d \Rightarrow O(N^{d\times\log_b^a})\<br>(3): \log_b^a &#x3D; d \Rightarrow O(N^d)\<br>$$</p>
<ul>
<li>用来求递归的时间复杂度，但需要满足此结构</li>
<li>N ：母问题的数据量是N级别的</li>
<li>a ：子问题的调用次数</li>
<li>N&#x2F;b ：子问题的规模</li>
<li>O指的是除了子问题的调用之外，剩下的过程时间复杂度是多少</li>
</ul>
<h2 id="简单递归"><a href="#简单递归" class="headerlink" title="简单递归"></a>简单递归</h2><h3 id="递归获取最大值"><a href="#递归获取最大值" class="headerlink" title="递归获取最大值"></a>递归获取最大值</h3><blockquote>
<p>用递归方法获取一个数组的最大值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">Process</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> Process(arr, left, middle);</span><br><span class="line">        <span class="comment">//middle+1很重要，有点像while循环里的循环指针的变化，否则递归就会死掉</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> Process(arr, middle+<span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftMax,rightMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMaxNum</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Process(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="逆序栈"><a href="#逆序栈" class="headerlink" title="逆序栈"></a>逆序栈</h3><blockquote>
<p>给定一个栈，逆序这个栈，不能申请额外的数据结构，使用递归完成需求</p>
<p>此题是为了练习递归，所以用递归实现了以下几个方法</p>
<ul>
<li>f(  ) : 递归实现从栈底拿数据 </li>
<li>Reverse( ): 实现反转栈</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(Stack&lt;Integer&gt; stack)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bottom</span> <span class="operator">=</span> f(stack); <span class="comment">//每次递归拿到最底层的数</span></span><br><span class="line">        reverse(stack);</span><br><span class="line">        stack.push(bottom);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归实现实现拿到栈底元素</span></span><br><span class="line">    <span class="comment">//return返回的东西是每次递归之间沟通的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(Stack&lt;Integer&gt; stack)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123; <span class="comment">//如果是栈底就返回</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> f(stack); <span class="comment">//last用来存放最后弹出的那个数的</span></span><br><span class="line">            stack.push(result); <span class="comment">//把每次递归弹出的栈顶元素再弹回去</span></span><br><span class="line">            <span class="keyword">return</span> last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="装袋最大重量"><a href="#装袋最大重量" class="headerlink" title="装袋最大重量"></a>装袋最大重量</h3><blockquote>
<p>给定两个长度为N的数组weights[i] 和 values[i] 分别代表i号物品的重量和价值，给定一个正数bag，表示一个载重bag的袋子，你装的物品不能超过这个重量，返回你能装下最多的价值是多少？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带value方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span> values[], <span class="type">int</span> i, <span class="type">int</span> alreadyWeight, <span class="type">int</span> bag)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (alreadyWeight &gt; bag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == weights.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(</span><br><span class="line">                process1(weights, values, i + <span class="number">1</span>, alreadyWeight, bag),</span><br><span class="line">                values[i] + process1(weights, values, i + <span class="number">1</span>, alreadyWeight + weights[i], bag)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//带value方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process2</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span> values[], <span class="type">int</span> i, <span class="type">int</span> alreadyWeight, <span class="type">int</span> alreadyValue, <span class="type">int</span> bag)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (alreadyWeight &gt; bag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == weights.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> alreadyValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(</span><br><span class="line">        process2(weights, values, i + <span class="number">1</span>, alreadyWeight, alreadyValue, bag), <span class="comment">//不要i号货</span></span><br><span class="line">        process2(weights, values, i + <span class="number">1</span>, alreadyWeight + weights[i],</span><br><span class="line">                alreadyValue + values[i], bag) <span class="comment">//要i号货</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">       <span class="comment">//递归</span></span><br><span class="line">       <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> list2;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> list1;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">           list1.next = mergeTwoLists(list1.next, list2);</span><br><span class="line">           <span class="keyword">return</span> list1;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           list2.next = mergeTwoLists(list1, list2.next);</span><br><span class="line">           <span class="keyword">return</span> list2;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="删除链表特定节点"><a href="#删除链表特定节点" class="headerlink" title="删除链表特定节点"></a>删除链表特定节点</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-30%2022.20.33.png" style="zoom:50%;" />



<p><strong>递归做法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125; </span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span> head.val == val ? head.next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="判断回文单链表"><a href="#判断回文单链表" class="headerlink" title="判断回文单链表"></a>判断回文单链表</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-30%2023.18.37.png" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">frontNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        frontNode = head;</span><br><span class="line">        <span class="keyword">return</span> checkProcess(head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkProcess</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!checkProcess(head.next)) &#123; <span class="comment">// // 只要后面返回一个false就会一直返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (head.val != frontNode.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            frontNode = frontNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h2><blockquote>
<p>暴力递归就是尝试。它还有很多其他的叫法：分治、回溯、迭代。。。。</p>
<ol>
<li>把问题转化为规模缩小了的同类问题的子问题</li>
<li>有明确的不需要继续进行递归的条件（base case）</li>
<li>要有当得到了子问题的结果之后的决策或成</li>
<li>不记录每一个子问题的最优解</li>
</ol>
<p>一定要学会怎么去尝试，这是动态规划的基础</p>
</blockquote>
<h3 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h3><blockquote>
<p>给定i层汉诺塔，以及若干棍子（通常为3根），要求打印出最优轨迹</p>
<p>将这个问题分解成子问题时，先别太着急，想一下子找到最优解，先慢慢来，把棍子看成from，to，和other，把0 到 i-1层的汉诺塔看成整体，最后一层汉诺塔单独看成整体，因为最后一层汉诺塔是最大的，它不可以压其他层，然后这个问题就可以分解为以下几个步骤：</p>
<ol>
<li>第一步：1 ～ i-1：看成 form 到 other 的行为，因为都要给最大的那一个让步，最大的那一层必须第一个到目标也就是to棍子</li>
<li>第二步：i ： 看成 from 到 to 的行为</li>
<li>第三步：1～i-1:看成剩下的棍子到to棍子的行为</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//假设游戏规则是将所有圆盘从左移动到右，中间则是other棍子</span></span><br><span class="line">            func(n, <span class="string">&quot;左&quot;</span>, <span class="string">&quot;右&quot;</span>, <span class="string">&quot;中&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> i, String start, String end, String other)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123; <span class="comment">// base case</span></span><br><span class="line">            System.out.println(<span class="string">&quot; Move 1 from &quot;</span> + start + <span class="string">&quot; to &quot;</span> + end);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            func(i - <span class="number">1</span>, start, other, end);</span><br><span class="line">            System.out.println(<span class="string">&quot; Move &quot;</span> + i + <span class="string">&quot; from &quot;</span> + start + <span class="string">&quot; to &quot;</span> + end);</span><br><span class="line">            func(i - <span class="number">1</span>, other, end, start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="打印字符串"><a href="#打印字符串" class="headerlink" title="打印字符串"></a>打印字符串</h3><blockquote>
<p>打印一个字符串的全部子序列，包括空字符串</p>
<p>思路：从第一个字符开始，打印的时候有两种选择：打印或者不打印，这样就形成了一条从根节点到叶子节点的打印二叉树</p>
</blockquote>
<p><strong>最经典的做法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(String str)</span> &#123;</span><br><span class="line">       <span class="type">char</span>[] chs = str.toCharArray();</span><br><span class="line">       process(chs, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//当前来到i位置，要和不要，两条路</span></span><br><span class="line">   <span class="comment">//res:之前的选择形成的表</span></span><br><span class="line">   <span class="comment">//其实就是去遍历这个选择字符所形成的二叉树，不同的是，只有遍历待到叶子节点的时候才打印整个选择表</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> i, List&lt;Character&gt; res)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (i == str.length) &#123;</span><br><span class="line">           printList(res);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;Character&gt; resKeep = copyList(res);</span><br><span class="line">       resKeep.add(str[i]);</span><br><span class="line">       process(str, i + <span class="number">1</span>, resKeep); <span class="comment">//走要当前字符的路</span></span><br><span class="line">       List&lt;Character&gt; resNoKeep = copyList(res);</span><br><span class="line">       process(str, i + <span class="number">1</span>, resNoKeep);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(List&lt;Character&gt; list)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (Character cha : list) &#123;</span><br><span class="line">           System.out.println(cha.charValue());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Character&gt; <span class="title function_">copyList</span><span class="params">(List&lt;Character&gt; list)</span> &#123;</span><br><span class="line">       List&lt;Character&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (Character cha : list) &#123;</span><br><span class="line">           list1.add(cha);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list1;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>省空间的做法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAllSubsequence</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chs = str.toCharArray();</span><br><span class="line">        process1(chs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//来到当前i位置，要和不要，走两条路</span></span><br><span class="line">    <span class="comment">//之前的选择，所形成的结果，是str</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process1</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == str.length) &#123;</span><br><span class="line">            System.out.println(String.valueOf(str));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        process1(str, i + <span class="number">1</span>); <span class="comment">//要当前字符的路</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> str[i];</span><br><span class="line">        str[i] = <span class="number">0</span>;</span><br><span class="line">        process1(str, i + <span class="number">1</span>); <span class="comment">//不要当前字符的路</span></span><br><span class="line">        str[i] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="字符串全排列"><a href="#字符串全排列" class="headerlink" title="字符串全排列"></a>字符串全排列</h3><blockquote>
<p>打印一个字符串的全部排列，要求不出现重复</p>
<p>思路：假设字符串有N个字符，则第一个字符有N中可能，第二个字符有N-1种可能，慢慢往下试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">Permutation</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] chs = str.toCharArray();</span><br><span class="line">        process(chs, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//str[i...]范围上，所有的字符，都可以在i位置上，后续都去尝试</span></span><br><span class="line">    <span class="comment">//str[0~i-1]范围上，是之前做的选择，</span></span><br><span class="line">    <span class="comment">//请把所有的字符串形成的全排列，加到res里去</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> i, ArrayList&lt;String&gt; res)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == str.length) &#123;</span><br><span class="line">            res.add(String.valueOf(str));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span>[] visit = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>]; <span class="comment">//假设是26个小写字母</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; str.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[str[j] - <span class="string">&#x27;a&#x27;</span>]) &#123;  <span class="comment">//分支限界,试过的字符就不试了</span></span><br><span class="line">                visit[str[j] - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">                swap(str, i, j);</span><br><span class="line">                process(str, i + <span class="number">1</span>, res);</span><br><span class="line">                swap(str, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] chs, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chs[i];</span><br><span class="line">        chs[i] = chs[j];</span><br><span class="line">        chs[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="左右纸牌游戏"><a href="#左右纸牌游戏" class="headerlink" title="左右纸牌游戏"></a>左右纸牌游戏</h3><blockquote>
<p>给定一个整型数组arr，代表数值不同的纸牌排成一条线。玩家A和玩家B依次拿走每张纸牌，规定玩家A先拿，玩家B后拿，玩家A和玩家B都绝顶聪明。返回最后获胜者的分数。</p>
<p>【举例】<br>arr&#x3D;[1，2，100，4] 。<br>开始时，玩家A只能拿走1或4。如果开始时玩家A拿走1，则排列变为[2，100，4]，接下来玩家B可以拿走2或4，然然后继续轮到玩家A.<br>如果开始时玩家A拿走4，则排列变为[1，2，100]，接下来玩家B可以拿走1或100，然后继续轮到玩家A<br>玩家A作为绝顶聪明的人不会先拿4，因为拿4之后，玩家B将拿走100。所以玩家A会先拿1，让排列变为[2，100，4]，接下来玩家B不管怎么选，100都会被玩家A拿走。玩家A会获胜，分数为101。所以返回101</p>
<p>arr&#x3D;[1，100，2] 。<br>开始时，玩家A不管拿1还是2，玩家B作为绝顶聪明的人，都会把100拿走。玩家B会获胜，分数为100。所以返回100。</p>
<p>思路：定义两个函数：先手函数 f( ) 和后手函数 s( )<br>先手函数在arr[l] + s(arr, l + 1, r) 和 arr[r] + s(arr, L, r - 1) 中挑选最大值，后手函数在 f(arr, l + 1, r) 和 f(arr, l, r- 1)中取最小值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">win1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//0 到lenth - 1先手是玩家A</span></span><br><span class="line">       <span class="comment">//0 到length - 1后手是玩家B</span></span><br><span class="line">       <span class="comment">//谁大谁是赢家</span></span><br><span class="line">       <span class="keyword">return</span> Math.max(f(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>), s(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (i == j) &#123; <span class="comment">//当只剩一张牌了且先手，那就拿这张牌</span></span><br><span class="line">           <span class="keyword">return</span> arr[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Math.max(arr[i] + s(arr, i + <span class="number">1</span>, j), arr[j] + s(arr, i, j - <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">s</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (i == j) &#123; <span class="comment">// 当只剩一张牌且后手，那就没得拿了，就返回0</span></span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Math.min(f(arr, i + <span class="number">1</span>, j), f(arr, i, j - <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>







<h3 id="N皇后问题-1"><a href="#N皇后问题-1" class="headerlink" title="N皇后问题"></a>N皇后问题</h3><blockquote>
<p>N皇后问题是指在N*N的棋盘上要摆N个皇后，要求任何两个皇后不同行不同列也不在同一斜线上</p>
<p>给定一个整数n，返回n皇后的的摆法有多少种<br>给定1，返回1<br>n为2或3，2皇后和3皇后无论怎么摆都不可以，返回0<br>n&#x3D;8，返回92</p>
<p>思路：</p>
<ol>
<li>暴力法，保留每次存放的皇后位置，递归去其他位置</li>
<li>位运算法，不超过32位可以申请一个32位的二进制数，几皇后问题就将后几位设置为0，每一列不能摆皇后的位置设为1<br>设置三个变量分别表示列限制，左斜线限制和右斜线限制，这三个变量求或就是对下一行的整体限制</li>
</ol>
</blockquote>
<p><strong>经典解法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">num1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// record[i]表示第i行的皇后放在哪一列</span></span><br><span class="line">       <span class="keyword">return</span> process1(<span class="number">0</span>, record, n);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//目前来到了第i行</span></span><br><span class="line">   <span class="comment">//record[0...i-1]表示之前放过的皇后位置信息,且这些皇后一定不共行不共列不共斜线</span></span><br><span class="line">   <span class="comment">//record的作用是为了在判断的皇后位置是否合法的时候起作用，并不真正详细记录每一种皇后摆放的方法</span></span><br><span class="line">   <span class="comment">//一共n行</span></span><br><span class="line">   <span class="comment">//返回值是摆完所有的皇后，合理的摆法有多少种</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span>[] record, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123; <span class="comment">//当前行在第i行，尝试i行所有列</span></span><br><span class="line">           <span class="keyword">if</span> (isValid(record, i, j)) &#123;</span><br><span class="line">               record[i] = j;</span><br><span class="line">               res += process1(i + <span class="number">1</span>, record, n);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//只需要检查0到i-1的皇后</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span>[] record, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">           <span class="comment">//先判断是否共列，再判断鞋履是否相等，即纵坐标的差是否等于横坐标的差</span></span><br><span class="line">           <span class="keyword">if</span> (j == record[k] || Math.abs(record[k] - j) == Math.abs(i - k))&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>还有一种列运算法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不超过32的N皇后问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">num2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">32</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> n == <span class="number">32</span> ? -<span class="number">1</span> : (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; <span class="comment">//将limit的后N位设置为全0模式</span></span><br><span class="line">        <span class="keyword">return</span> process2(limit, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int limit, 表示可以在哪些位置上去尝试放皇后</span></span><br><span class="line">    <span class="comment">//int colLim, 表示列限制</span></span><br><span class="line">    <span class="comment">//int leftDiaLim, 表示左斜线限制</span></span><br><span class="line">    <span class="comment">//int rightDiaLim，表示右斜线限制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">process2</span><span class="params">(<span class="type">int</span> limit,</span></span><br><span class="line"><span class="params">                                <span class="type">int</span> colLim,</span></span><br><span class="line"><span class="params">                                <span class="type">int</span> leftDiaLim,</span></span><br><span class="line"><span class="params">                                <span class="type">int</span> rightDiaLim)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (colLim == limit) &#123; <span class="comment">// 当列限制和limit一样时说明所有位置都被填满了，即完成了一种可能性</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mostRightOne</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//列限制、左斜线限制和右斜线限制求或得到了不可以摆皇后的位置都是1的一个数</span></span><br><span class="line">        <span class="comment">//再求反得到了一个没有限制的位为1的数</span></span><br><span class="line">        <span class="comment">//再和limit求与得到了一个后N为能放皇后的位为1的数</span></span><br><span class="line">        <span class="comment">//即pos就是所有候选皇后位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> limit &amp; (~(colLim | leftDiaLim | rightDiaLim));</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos != <span class="number">0</span>) &#123;</span><br><span class="line">            mostRightOne = pos &amp; (~pos + <span class="number">1</span>); <span class="comment">// 提取出候选皇后位置最右边的1出来</span></span><br><span class="line">            pos = pos - mostRightOne; <span class="comment">// 试完后将该位置的1减去，这样继续试下一个位置的1</span></span><br><span class="line">            res += process2(limit,</span><br><span class="line">                    colLim | mostRightOne, <span class="comment">//或运算得到列限制</span></span><br><span class="line">                    (leftDiaLim | mostRightOne) &lt;&lt; <span class="number">1</span>, <span class="comment">//左移左斜线限制</span></span><br><span class="line">                    (rightDiaLim | mostRightOne) &gt;&gt; <span class="number">1</span>); <span class="comment">//右移右斜线限制</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>













<h2 id="二维矩阵问题"><a href="#二维矩阵问题" class="headerlink" title="二维矩阵问题"></a>二维矩阵问题</h2><h3 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h3><blockquote>
<p>力扣：<a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/">https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/</a></p>
<p>题目描述<br>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p>
<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>
</blockquote>
<p><strong>暴力递归</strong></p>
<p>本题的尝试套路比较简单，就是四个方向去试，但是有两个问题需要注意，一个是base case，在判断了不满足条件的情况后，跟上一个判对的条件，否则递归只会返回fasle，还有一个是，由于一个格子不允许使用两次，所以有一个小技巧防止四个方向的尝试会使用之前节点的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] str = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (process(board, str, i, j, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">char</span>[] str, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= board.length </span><br><span class="line">            || col &lt; <span class="number">0</span> || col &gt;= board[<span class="number">0</span>].length </span><br><span class="line">            || board[row][col] != str[index]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == str.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//将当前值改为一个不可能的字符，防止二次使用</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> board[row][col];</span><br><span class="line">        board[row][col] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> process(board, str, row + <span class="number">1</span>, col, index + <span class="number">1</span>) </span><br><span class="line">        || process(board, str, row - <span class="number">1</span>, col, index + <span class="number">1</span>)</span><br><span class="line">        || process(board, str, row, col + <span class="number">1</span>, index + <span class="number">1</span>)</span><br><span class="line">        || process(board, str, row, col - <span class="number">1</span>, index + <span class="number">1</span>);</span><br><span class="line">        board[row][col] = temp; <span class="comment">// 递归结束后将值改回来</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="二维数组特殊位置"><a href="#二维数组特殊位置" class="headerlink" title="二维数组特殊位置"></a>二维数组特殊位置</h3><blockquote>
<p>给你一个大小为 rows x cols 的矩阵 mat，其中 mat[i][j] 是 0 或 1，请返回 矩阵 mat 中特殊位置的数目 。</p>
<p>特殊位置 定义：如果 mat[i][j] &#x3D;&#x3D; 1 并且第 i 行和第 j 列中的所有其他元素均为 0（行和列的下标均 从 0 开始 ），则位置 (i, j) 被称为特殊位置。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/special-positions-in-a-binary-matrix">https://leetcode.cn/problems/special-positions-in-a-binary-matrix</a></p>
</blockquote>
<p><strong>数组缓存和</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSpecial</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        <span class="comment">// 采用求和的方式快速判断是否是特殊位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length, n = mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[] rowSum = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span>[] colSum = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                rowSum[i] += mat[i][j];</span><br><span class="line">                colSum[j] += mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mat[i][j] == <span class="number">1</span> &amp;&amp; rowSum[i] == <span class="number">1</span> &amp;&amp; colSum[j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>标记列</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSpecial</span><span class="params">(<span class="type">int</span>[][] mat)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length, n = mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                count += mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 防止第一行重复累加</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mat[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                        mat[<span class="number">0</span>][j] += count;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : mat[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





























<h2 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h2><h3 id="特殊的二进制序列"><a href="#特殊的二进制序列" class="headerlink" title="特殊的二进制序列"></a>特殊的二进制序列</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-17%2011.01.23.png"  style="zoom:50%;" />













<h2 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h2><h3 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-17%2016.25.36.png" alt="截屏2022-08-17 16.25.36" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Map&lt;State, Map&lt;CharType, State&gt;&gt; transfer = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;State, Map&lt;CharType, State&gt;&gt;();</span><br><span class="line">        Map&lt;CharType, State&gt; initialMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_SPACE, State.STATE_INITIAL);</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);</span><br><span class="line">            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);</span><br><span class="line">            put(CharType.CHAR_SIGN, State.STATE_INT_SIGN);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_INITIAL, initialMap);</span><br><span class="line">        Map&lt;CharType, State&gt; intSignMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);</span><br><span class="line">            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_INT_SIGN, intSignMap);</span><br><span class="line">        Map&lt;CharType, State&gt; integerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);</span><br><span class="line">            put(CharType.CHAR_EXP, State.STATE_EXP);</span><br><span class="line">            put(CharType.CHAR_POINT, State.STATE_POINT);</span><br><span class="line">            put(CharType.CHAR_SPACE, State.STATE_END);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_INTEGER, integerMap);</span><br><span class="line">        Map&lt;CharType, State&gt; pointMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);</span><br><span class="line">            put(CharType.CHAR_EXP, State.STATE_EXP);</span><br><span class="line">            put(CharType.CHAR_SPACE, State.STATE_END);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_POINT, pointMap);</span><br><span class="line">        Map&lt;CharType, State&gt; pointWithoutIntMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_POINT_WITHOUT_INT, pointWithoutIntMap);</span><br><span class="line">        Map&lt;CharType, State&gt; fractionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);</span><br><span class="line">            put(CharType.CHAR_EXP, State.STATE_EXP);</span><br><span class="line">            put(CharType.CHAR_SPACE, State.STATE_END);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_FRACTION, fractionMap);</span><br><span class="line">        Map&lt;CharType, State&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);</span><br><span class="line">            put(CharType.CHAR_SIGN, State.STATE_EXP_SIGN);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_EXP, expMap);</span><br><span class="line">        Map&lt;CharType, State&gt; expSignMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_EXP_SIGN, expSignMap);</span><br><span class="line">        Map&lt;CharType, State&gt; expNumberMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);</span><br><span class="line">            put(CharType.CHAR_SPACE, State.STATE_END);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_EXP_NUMBER, expNumberMap);</span><br><span class="line">        Map&lt;CharType, State&gt; endMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;CharType, State&gt;() &#123;&#123;</span><br><span class="line">            put(CharType.CHAR_SPACE, State.STATE_END);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        transfer.put(State.STATE_END, endMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> State.STATE_INITIAL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">CharType</span> <span class="variable">type</span> <span class="operator">=</span> toCharType(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (!transfer.get(state).containsKey(type)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                state = transfer.get(state).get(type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> state == State.STATE_INTEGER || state == State.STATE_POINT || state == State.STATE_FRACTION || state == State.STATE_EXP_NUMBER || state == State.STATE_END;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CharType <span class="title function_">toCharType</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CharType.CHAR_NUMBER;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;e&#x27;</span> || ch == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CharType.CHAR_EXP;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CharType.CHAR_POINT;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CharType.CHAR_SIGN;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CharType.CHAR_SPACE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> CharType.CHAR_ILLEGAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        STATE_INITIAL,</span><br><span class="line">        STATE_INT_SIGN,</span><br><span class="line">        STATE_INTEGER,</span><br><span class="line">        STATE_POINT,</span><br><span class="line">        STATE_POINT_WITHOUT_INT,</span><br><span class="line">        STATE_FRACTION,</span><br><span class="line">        STATE_EXP,</span><br><span class="line">        STATE_EXP_SIGN,</span><br><span class="line">        STATE_EXP_NUMBER,</span><br><span class="line">        STATE_END</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">CharType</span> &#123;</span><br><span class="line">        CHAR_NUMBER,</span><br><span class="line">        CHAR_EXP,</span><br><span class="line">        CHAR_POINT,</span><br><span class="line">        CHAR_SIGN,</span><br><span class="line">        CHAR_SPACE,</span><br><span class="line">        CHAR_ILLEGAL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><h3 id="顺指针打印矩阵"><a href="#顺指针打印矩阵" class="headerlink" title="顺指针打印矩阵"></a>顺指针打印矩阵</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-23%2014.38.50.png" alt="截屏2022-08-23 14.38.50" style="zoom:50%;" />



<p><strong>按层模拟</strong></p>
<h3 id="判断出入栈序列"><a href="#判断出入栈序列" class="headerlink" title="判断出入栈序列"></a>判断出入栈序列</h3><blockquote>
<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateStackSequences</span><span class="params">(<span class="type">int</span>[] pushed, <span class="type">int</span>[] popped)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : pushed) &#123;</span><br><span class="line">            stack.push(num);</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popped[i]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="括号的分数"><a href="#括号的分数" class="headerlink" title="括号的分数"></a>括号的分数</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-09%2016.08.01.png" alt="截屏2022-10-09 16.08.01" style="zoom:50%;" />





<p><strong>方法一：栈</strong></p>
<p>利用栈来解决这个问题，但不是用栈来模拟括号的匹配，而是蕴含了一种分治的思想，栈的每一位推入的都是当前括号所能得到的分数<br>如果当前遍历到的字符串字符是 ) ,那么久弹出栈顶元素，如果是0意味着上一个元素是 （，那么就推1，如果不是0，那么就根据规则来，是弹出分数的2倍，总结就是 Math.max(2*goal, 1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scoreOfParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">       deque.push(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">               deque.push(<span class="number">0</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">preGoal</span> <span class="operator">=</span> deque.pop();</span><br><span class="line">               <span class="type">int</span> <span class="variable">curGoal</span> <span class="operator">=</span> deque.pop() + Math.max(preGoal * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">               deque.push(curGoal);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> deque.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>方法二：分治</strong></p>
<p>记 （分数为1，）为-1，当递归的s长度只剩2了，那就返回1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scoreOfParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果传入的字符串只有两个字符，说明必是（），分数为1</span></span><br><span class="line">        <span class="comment">// 因为按照题意，所有的括号都是完美配对的</span></span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">goal</span> <span class="operator">=</span> <span class="number">0</span>, n = s.length(), len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 找到第一个分数和为0的字符，也就是说，找到第一对配对的括号</span></span><br><span class="line">            <span class="comment">// 之所以找到这个是因为配对的括号可以继续分解，其他括号可以按照这个逻辑继续分解</span></span><br><span class="line">            goal += s.charAt(i) == <span class="string">&#x27;)&#x27;</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (goal == <span class="number">0</span>) &#123;</span><br><span class="line">                len = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果当前len其实是s的最后一个字符，那么按照规则，将这一对括号内的分数乘2即可</span></span><br><span class="line">        <span class="keyword">if</span> (len == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> scoreOfParentheses(s.substring(<span class="number">1</span>, len - <span class="number">1</span>)) * <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前len不是s的最后一个字符，那就属于 A + B类型，继续分治即可</span></span><br><span class="line">            <span class="keyword">return</span> scoreOfParentheses(s.substring(<span class="number">0</span>, len)) + </span><br><span class="line">            scoreOfParentheses(s.substring(len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>方法三：直接计算</strong></p>
<p>这个方法太妙了，对数学敏感度有一定要求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scoreOfParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            此方法带有一点数学分析的味道，由题意可知，一个平衡字符串的分数最终取决于()</span></span><br><span class="line"><span class="comment">            由（）的深度决定，假设现有一对（），深度 h，其分数为 2^h</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">0</span>, n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            height += s.charAt(i) == <span class="string">&#x27;)&#x27;</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;)&#x27;</span> &amp;&amp; s.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                ans += <span class="number">1</span> &lt;&lt; height;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="单词搜索"><a href="#单词搜索" class="headerlink" title="单词搜索"></a>单词搜索</h3><blockquote>
<p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>
<p>LeetCode（79）hot 100</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String s;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = word;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> board.length, w = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[h][w];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> check(board, visited, i, j, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">boolean</span>[][] visited, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != s.charAt(k)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先把当前元素标志为访问过，这样待会就不会重复访问此元素</span></span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span>[][] directions = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : directions) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newi</span> <span class="operator">=</span> i + dir[<span class="number">0</span>], newj = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (newi &gt;= <span class="number">0</span> &amp;&amp; newi &lt; board.length &amp;&amp; newj &gt;= <span class="number">0</span> &amp;&amp; newj &lt; board[<span class="number">0</span>].length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[newi][newj]) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> check(board, visited, newi, newj, k + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                        result = flag;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归回去的时候把当前元素设置为未访问</span></span><br><span class="line">        visited[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="电话号码字母组合"><a href="#电话号码字母组合" class="headerlink" title="电话号码字母组合"></a>电话号码字母组合</h3><blockquote>
<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p>LeetCode 17 (hot 100)</p>
</blockquote>
<p><strong>回溯</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        List&lt;String&gt; combinations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> combinations;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Character, String&gt; phoneMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, String&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        backtrack(combinations, phoneMap, digits, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">StringBuffer</span>());</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;String&gt; combinations,</span></span><br><span class="line"><span class="params">         Map&lt;Character, String&gt; phoneMap, String digits, <span class="type">int</span> index, StringBuffer combination)</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (index == digits.length()) &#123;</span><br><span class="line">                 combinations.add(combination.toString());</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="type">char</span> <span class="variable">digit</span> <span class="operator">=</span> digits.charAt(index);</span><br><span class="line">                 <span class="type">String</span> <span class="variable">letters</span> <span class="operator">=</span> phoneMap.get(digit);</span><br><span class="line">                 <span class="comment">// 遍历每次拿出来的字母，不断加到字符串后</span></span><br><span class="line">                 <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; letters.length(); i++) &#123;</span><br><span class="line">                     combination.append(letters.charAt(i));</span><br><span class="line">                     backtrack(combinations, phoneMap, digits, index + <span class="number">1</span>, combination);</span><br><span class="line">                     combination.deleteCharAt(index);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>队列</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        List&lt;String&gt; combinations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (digits.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> combinations;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Character, String&gt; phoneMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, String&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="comment">// 声明一个队列存储结果</span></span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digits.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 将队列和每次需要加入的 letters 传到 queueDeal 方法</span></span><br><span class="line">            queueDeal(queue, phoneMap.get(digits.charAt(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String s : queue) &#123;</span><br><span class="line">            combinations.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queueDeal</span><span class="params">(Queue&lt;String&gt; queue, String letters)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果队列为空，直接把 letters 的每一个字符转成字符串加到队列中</span></span><br><span class="line">        <span class="keyword">if</span> (queue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; letters.length(); i++) &#123;</span><br><span class="line">                queue.add(<span class="string">&quot;&quot;</span> + letters.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="comment">// 把当前队列的每一个元素挨个儿弹出，拼接 letters 的所有字符再加进去</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">queueStr</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; letters.length(); j++) &#123;</span><br><span class="line">                    queue.add(queueStr + letters.charAt(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成</h3><blockquote>
<p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p>
<p>LeetCode : 22 (hot 10)</p>
</blockquote>
<p><strong>利用此题独特的规律</strong></p>
<p>每次该加哪一个括号是有规律的,当左括号等于右括号，必须先加左括号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; combinations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        generate(<span class="string">&quot;&quot;</span>, n, n);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">(String str, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            combinations.add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 剩余的左括号数等于右括号数必须先加左括号</span></span><br><span class="line">            <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                generate(str + <span class="string">&quot;(&quot;</span>, left - <span class="number">1</span>, right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// left 小于 right 随便加，这里优先加左括号</span></span><br><span class="line">            <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    generate(str + <span class="string">&quot;(&quot;</span>, left - <span class="number">1</span>, right);</span><br><span class="line">                &#125;</span><br><span class="line">                generate(str + <span class="string">&quot;)&quot;</span>, left, right - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h3><blockquote>
<p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code>的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p>
<p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p>
<p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p>
<p>LeetCode: 39 (hot 100)</p>
</blockquote>
<p><strong>暴力回溯，无剪枝</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtrack(candidates, target, <span class="number">0</span>, res, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> idx, </span></span><br><span class="line"><span class="params">                          List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx == candidates.length) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 这个判断官解没有，个人理解这也是一个小小的剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (target &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            backtrack(candidates, target, idx + <span class="number">1</span>, res, path);</span><br><span class="line">            <span class="keyword">if</span> (target - candidates[idx] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                path.add(candidates[idx]);</span><br><span class="line">                backtrack(candidates, target - candidates[idx], idx, res, path);</span><br><span class="line">                path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>带剪枝</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> candidates.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序是剪枝的前提</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        dfs(candidates, <span class="number">0</span>, len, target, path, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> begin, <span class="type">int</span> len, <span class="type">int</span> target, Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">        <span class="comment">// 由于进入更深层的时候，小于 0 的部分被剪枝，因此递归终止条件值只判断等于 0 的情况</span></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 重点理解这里剪枝，前提是候选数组已经有序，</span></span><br><span class="line">            <span class="keyword">if</span> (target - candidates[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            path.addLast(candidates[i]);</span><br><span class="line">            dfs(candidates, i, len, target - candidates[i], path, res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><blockquote>
<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em>。你可以 <strong>按任意顺序</strong> 返回答案。</p>
</blockquote>
<p><strong>回溯</strong></p>
<p>这里需要注意一个点， 就是回溯的终止条件是 ans.add(new ArrayList&lt;&gt;(path))，不是 ans.add(path);，因为 java 是按值传递，直接加 path实际只是把 path 的引用地址复制了一份加到了 ans 中，这样在递归回退到起点时就都是空链表了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="comment">// 标识每个 nums 元素是否被用过</span></span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[len];</span><br><span class="line">        backTrack(nums, len, <span class="number">0</span>, used, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(), ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> len, <span class="type">int</span> depth, <span class="type">boolean</span>[] used,</span></span><br><span class="line"><span class="params">        List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; ans)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == len) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                path.add(nums[i]);</span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                backTrack(nums, len, depth + <span class="number">1</span>, used, path, ans);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">                path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="字集"><a href="#字集" class="headerlink" title="字集"></a>字集</h3><blockquote>
<p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p>
<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p>
<p>LeetCode(hot 100) 78</p>
</blockquote>
<p><strong>二进制 + 迭代</strong></p>
<p>以 {1, 2, 3} 集合来举例</p>
<table>
<thead>
<tr>
<th>二进制序列</th>
<th>字集</th>
<th>对应的二进制数</th>
</tr>
</thead>
<tbody><tr>
<td>000</td>
<td>{}</td>
<td>0</td>
</tr>
<tr>
<td>001</td>
<td>{3}</td>
<td>1</td>
</tr>
<tr>
<td>010</td>
<td>{2}</td>
<td>2</td>
</tr>
<tr>
<td>011</td>
<td>{2, 3}</td>
<td>3</td>
</tr>
<tr>
<td>100</td>
<td>{1}</td>
<td>4</td>
</tr>
<tr>
<td>101</td>
<td>{1, 3}</td>
<td>5</td>
</tr>
<tr>
<td>110</td>
<td>{1, 2}</td>
<td>6</td>
</tr>
<tr>
<td>111</td>
<td>{1, 2, 3}</td>
<td>7</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 2^n 种情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt; n); mask++) &#123;</span><br><span class="line">            list.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="comment">// 看当前mask的二进制数位是否为1，是的话就加到list中</span></span><br><span class="line">                <span class="keyword">if</span> ((mask &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    list.add(nums[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里别忘了给list声明新的空间</span></span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(list));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>回溯</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        backTrack(<span class="number">0</span>, nums);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == nums.length) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(nums[cur]);</span><br><span class="line">        backTrack(cur + <span class="number">1</span>, nums);</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        backTrack(cur + <span class="number">1</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>































<h1 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h1><hr>
<h2 id="哈希表与哈希函数"><a href="#哈希表与哈希函数" class="headerlink" title="哈希表与哈希函数"></a>哈希表与哈希函数</h2><blockquote>
<p>哈希表</p>
<ul>
<li>哈希表在使用层面上可以理解为一种集合结构</li>
<li>如果只有key，没有伴随数据value，可以使用HashSet结构（C++中称为UnorderedSet）</li>
<li>如果有key，又有伴随数据value，可以使用HashMap结构（C++中称为UnorderedMap）</li>
<li>有无伴随数据是HashMap和HashSet的唯一区别，底层结构实际是一回事</li>
<li>使用哈希表增删改查可以认为时间复杂度是O（1），但是常数时间较大</li>
<li>放入哈希表的东西：<ul>
<li>如果是基础类型，内部按值传递，内存占用的就是这个东西的大小</li>
<li>如果不是基础类型，内部按引用传递，内存占用是这个东西内存地址的大小</li>
</ul>
</li>
</ul>
<p>哈希函数：</p>
<ul>
<li>哈希函数的输入域是无穷的</li>
<li>哈希函数的输出域相对有限</li>
<li>哈希函数相同的输入值一定会返回相同的输出值</li>
<li>哈希碰撞：不同的输入可能会对应相同的输出</li>
<li>离散性和均匀性</li>
</ul>
</blockquote>
<ul>
<li><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HashSet的key是基础类型</span></span><br><span class="line">       HashSet&lt;Integer&gt; hashSet1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       hashSet1.add(<span class="number">3</span>);</span><br><span class="line">       System.out.println(hashSet1.contains(<span class="number">3</span>));</span><br><span class="line">       hashSet1.remove(<span class="number">3</span>);</span><br><span class="line">       System.out.println(hashSet1.contains(<span class="number">3</span>));</span><br><span class="line">  </span><br><span class="line">       HashMap&lt;Integer, String&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       hashMap1.put(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">       hashMap1.put(<span class="number">1</span>, <span class="string">&quot;b&quot;</span>);<span class="comment">//这里会修改之前key == 1 的value值</span></span><br><span class="line">       hashMap1.put(<span class="number">2</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">       System.out.println(hashMap1.containsKey(<span class="number">1</span>));</span><br><span class="line">       System.out.println(hashMap1.get(<span class="number">1</span>));</span><br><span class="line">       System.out.println(hashMap1.get(<span class="number">100</span>));</span><br><span class="line">       System.out.println(hashMap1.remove(<span class="number">1</span>));</span><br><span class="line">       System.out.println(hashMap1.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="哈希函数案例"><a href="#哈希函数案例" class="headerlink" title="哈希函数案例"></a>哈希函数案例</h3><blockquote>
<p>假设现在有40亿个数，每个数的范围是在0 – 2^32-1， 如何利用1G内存来统计相同的数出现了多少次？</p>
<p>分析：传统做法是利用一个哈希表，key是数字，value是这个数字出现的次数，但是这样写内存不够，所以思路是将40亿个数均分成个小部分，然后来统计，但是怎么分去统计最好呢，可以先利用一个哈希函数将每一个数得到一个对应的哈希值，然后再将哈希值取模100，这样就能将所有的数按类分成100份，且相同的数一定在同一份里，再继续在每一份中去统计</p>
</blockquote>
<h3 id="RandomPool结构"><a href="#RandomPool结构" class="headerlink" title="RandomPool结构"></a>RandomPool结构</h3><blockquote>
<p>题目：<br>设计一种结构，在该结构中有如下三个功能：<br>insert(Key) : 将某个key加入到该结构，做到不重复加入<br>Delete(Key) : 将原本在结构中的某个key移除<br>getRandom( ) : 等概率随机返回结构中的任何一个key</p>
<p>要求：<br>时间复杂度都是O（1）</p>
<p>思路：<br>定义一个结构，需要三个属性，一个size和两张map，map1是str到index，map2是index到str2</p>
</blockquote>
<h3 id="用户分组"><a href="#用户分组" class="headerlink" title="用户分组"></a>用户分组</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-12%2010.15.31.png" alt="截屏2022-08-12 10.15.31" style="zoom:50%;" />



<p><strong>解析</strong></p>
<p>对于这一题我觉得是极具代表性的关于哈希表以及线性表的综合应用，思维不算太难，但是需要十分细致。<br>大体思路是：先用哈希表记录每个元素出现的次数，再遍历这个哈希表，单独拿出每个entry的size 和value，然后再利用一个双层for循环，外层用来确定组数，内层用来给每个组赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">groupThePeople</span><span class="params">(<span class="type">int</span>[] groupSizes)</span> &#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> groupSizes.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> groupSizes[i];</span><br><span class="line">            map.putIfAbsent(size, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">            map.get(size).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, List&lt;Integer&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            List&lt;Integer&gt; peopleAll = entry.getValue();</span><br><span class="line">            <span class="type">int</span> <span class="variable">groupNum</span> <span class="operator">=</span> peopleAll.size() / size;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; groupNum; i++) &#123;</span><br><span class="line">                List&lt;Integer&gt; groupEach = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * size;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                    groupEach.add(peopleAll.get(start + j));</span><br><span class="line">                &#125;</span><br><span class="line">                ans.add(groupEach);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="翻转数组相等"><a href="#翻转数组相等" class="headerlink" title="翻转数组相等"></a>翻转数组相等</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-24%2010.05.14.png" alt="截屏2022-08-24 10.05.14" style="zoom:50%;" />



<p><strong>哈希数组法</strong></p>
<p>判断数组元素是否相等即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canBeEqual</span><span class="params">(<span class="type">int</span>[] target, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">       Map&lt;Integer, Integer&gt; counts1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; counts2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : target) &#123;</span><br><span class="line">            counts1.put(num, counts1.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            counts2.put(num, counts2.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (counts1.size() != counts2.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : counts1.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey(), value = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!counts2.containsKey(key) || counts2.get(key) != value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>基数数组法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canBeEqual</span><span class="params">(<span class="type">int</span>[] target, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1010</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; target.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++cnt[target[i]] == <span class="number">1</span>) ans++;</span><br><span class="line">            <span class="keyword">if</span> (--cnt[arr[i]] == <span class="number">0</span>) ans--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="水果成篮"><a href="#水果成篮" class="headerlink" title="水果成篮"></a>水果成篮</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-17%2022.41.24.png" alt="截屏2022-10-17 22.41.24" style="zoom:50%;" />





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> fruits.length;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 用一个 left 指针来指代最左的那个树</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            map.put(fruits[right], map.getOrDefault(fruits[right], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 这个while是我一开始写没有想到的，得到新的起点</span></span><br><span class="line">            <span class="keyword">while</span> (map.size() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                map.put(fruits[left], map.get(fruits[left]) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (map.get(fruits[left]) == <span class="number">0</span>) &#123;</span><br><span class="line">                    map.remove(fruits[left]);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="查找用户活跃分钟数"><a href="#查找用户活跃分钟数" class="headerlink" title="查找用户活跃分钟数"></a>查找用户活跃分钟数</h3><blockquote>
<p>给你用户在 LeetCode 的操作日志，和一个整数 <code>k</code> 。日志用一个二维整数数组 <code>logs</code> 表示，其中每个 <code>logs[i] = [IDi, timei]</code> 表示 ID 为 <code>IDi</code> 的用户在 <code>timei</code> 分钟时执行了某个操作。</p>
<p><strong>多个用户</strong> 可以同时执行操作，单个用户可以在同一分钟内执行 <strong>多个操作</strong> 。</p>
<p>指定用户的 <strong>用户活跃分钟数（user active minutes，UAM）</strong> 定义为用户对 LeetCode 执行操作的 <strong>唯一分钟数</strong> 。 即使一分钟内执行多个操作，也只能按一分钟计数。</p>
<p>请你统计用户活跃分钟数的分布情况，统计结果是一个长度为 <code>k</code> 且 <strong>下标从 1 开始计数</strong> 的数组 <code>answer</code> ，对于每个 <code>j</code>（<code>1 &lt;= j &lt;= k</code>），<code>answer[j]</code> 表示 <strong>用户活跃分钟数</strong> 等于 <code>j</code> 的用户数。</p>
<p>返回上面描述的答案数组 <code>answer</code> 。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findingUsersActiveMinutes(<span class="type">int</span>[][] logs, <span class="type">int</span> k) &#123;</span><br><span class="line">       Map&lt;Integer, Set&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; logs.length; i++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> logs[i][<span class="number">0</span>];</span><br><span class="line">           map.putIfAbsent(id, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;());</span><br><span class="line">           map.get(id).add(logs[i][<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">       <span class="keyword">for</span> (Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">           ans[entry.getValue().size() - <span class="number">1</span>]++;                      </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="保证文件名唯一"><a href="#保证文件名唯一" class="headerlink" title="保证文件名唯一"></a>保证文件名唯一</h3><blockquote>
<p>给你一个长度为 <code>n</code> 的字符串数组 <code>names</code> 。你将会在文件系统中创建 <code>n</code> 个文件夹：在第 <code>i</code> 分钟，新建名为 <code>names[i]</code> 的文件夹。</p>
<p>由于两个文件 <strong>不能</strong> 共享相同的文件名，因此如果新建文件夹使用的文件名已经被占用，系统会以 <code>(k)</code> 的形式为新文件夹的文件名添加后缀，其中 <code>k</code> 是能保证文件名唯一的 <strong>最小正整数</strong> 。</p>
<p>返回长度为 <em><code>n</code></em> 的字符串数组，其中 <code>ans[i]</code> 是创建第 <code>i</code> 个文件夹时系统分配给该文件夹的实际名称。</p>
<p>LeetCode 1487</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] getFolderNames(String[] names) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> names.length;</span><br><span class="line">        String[] res = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> names[i];</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(name)) &#123;</span><br><span class="line">                res[i] = name;</span><br><span class="line">                map.put(name, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> map.get(name);</span><br><span class="line">                <span class="keyword">while</span> (map.containsKey(getComplexName(name, k))) &#123;</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">                res[i] = getComplexName(name, k);</span><br><span class="line">                map.put(name, k + <span class="number">1</span>);</span><br><span class="line">                map.put(getComplexName(name, k), <span class="number">1</span>);  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> res;          </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getComplexName</span><span class="params">(String name, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;(&quot;</span> + index + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h2 id="有序表"><a href="#有序表" class="headerlink" title="有序表"></a>有序表</h2><blockquote>
<ul>
<li>哈希表在使用层面上可以理解为一种集合结构</li>
<li>如果只有key，没有伴随数据value，可以使用TreeSet结构（C++中称为OrderedSet）</li>
<li>如果有key，又有伴随数据value，可以使用TreeMap结构（C++中称为OrderedMap）</li>
<li>有无伴随数据是TreeSet和TreeMap的唯一区别，底层结构实际是一回事</li>
<li>有序表和哈希表的区别是，有序表把key按顺序组织起来，哈希表完全不组织</li>
<li>红黑树、AVL数、Size-Balance-Tree和跳表都属于有序表结构，只是底层实现完群不同</li>
<li>放入有序表的东西：<ul>
<li>如果是基础类型，内部按值传递，内存占用的就是这个东西的大小</li>
<li>如果不是基础类型，则必须提供比较器，内部按引用传递，内存占用就是这个东西内存地址大小</li>
</ul>
</li>
<li>不论是什么底层具体实现，只要是有序表，都有以下固定的基本功能和固定的时间复杂度</li>
</ul>
</blockquote>
<ul>
<li><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeMap&lt;Integer, String&gt; treeMap1 = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">       treeMap1.put(<span class="number">1</span>, <span class="string">&quot;我是1&quot;</span>);</span><br><span class="line">       treeMap1.put(<span class="number">2</span>, <span class="string">&quot;我是2&quot;</span>);</span><br><span class="line">       treeMap1.put(<span class="number">3</span>, <span class="string">&quot;我是3&quot;</span>);</span><br><span class="line">       treeMap1.put(<span class="number">4</span>, <span class="string">&quot;我是4&quot;</span>);</span><br><span class="line">       treeMap1.put(<span class="number">5</span>, <span class="string">&quot;我是5&quot;</span>);</span><br><span class="line">       treeMap1.put(<span class="number">6</span>, <span class="string">&quot;我是6&quot;</span>);</span><br><span class="line">       treeMap1.put(<span class="number">7</span>, <span class="string">&quot;我是7&quot;</span>);</span><br><span class="line">       System.out.println(treeMap1.containsKey(<span class="number">1</span>));</span><br><span class="line">       System.out.println(treeMap1.get(<span class="number">5</span>));</span><br><span class="line">       System.out.println(treeMap1.firstKey());</span><br><span class="line">       System.out.println(treeMap1.lastKey());</span><br><span class="line">       System.out.println(treeMap1.floorKey(<span class="number">8</span>));<span class="comment">//在表中所有&lt;=8的数中离8最近的数</span></span><br><span class="line">       System.out.println(treeMap1.ceilingKey(<span class="number">6</span>));<span class="comment">//在表中所有&gt;=8的数中离8最近的数</span></span><br><span class="line">       treeMap1.remove(<span class="number">1</span>);</span><br><span class="line">       System.out.println(treeMap1.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote>
<p>链表的定义就和递归很像，所以要</p>
</blockquote>
<ul>
<li><p>单链表结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Node&lt;V&gt; &#123;</span><br><span class="line">  V value;</span><br><span class="line">  Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>双链表结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CLass Node&lt;V&gt;&#123;</span><br><span class="line">  V value;</span><br><span class="line">  Node next;</span><br><span class="line">  Node last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h3><blockquote>
<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>
<p>LeetCode(hot 100) 160</p>
</blockquote>
<p><strong>循环遍历法</strong></p>
<p>假设 A 链表和 B 链表相交，A 的非相交部分长 a，B 的非相交部分长为 b，A 和 B 的相交部分长 c，则让 A 和 B 同时开始遍历，当 A 遍历结束时让指针指向 B， B 遍历结束时让指针指向 A，这样，a + c + b &#x3D; b + c + a，会在相交点相遇。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (headA == <span class="literal">null</span> || headB == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pa</span> <span class="operator">=</span> headA, pb = headB;</span><br><span class="line">        <span class="keyword">while</span> (pa != pb) &#123;</span><br><span class="line">            pa = pa == <span class="literal">null</span> ? headB : pa.next;</span><br><span class="line">            pb = pb == <span class="literal">null</span> ? headA : pb.next;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> pa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="链表简单算法"><a href="#链表简单算法" class="headerlink" title="链表简单算法"></a>链表简单算法</h3><ul>
<li><p>反转单链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="literal">null</span>; <span class="comment">// 这一步其实只是为了第一个节点不成环</span></span><br><span class="line">        <span class="keyword">return</span> newHead; <span class="comment">// 这个是递归尾到头传递的信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>反转双链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  ```</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- 打印两个有序链表的公共部分</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
</li>
<li><p>快慢指针：获取链表的中间节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快指针一次走两步，慢指针一次走一步，快指针走完时慢指针走到了终点</span></span><br><span class="line"><span class="comment">//注意要分奇偶等边界条件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除特定节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125; </span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span> head.val == val ? head.next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="判断链表是否回文"><a href="#判断链表是否回文" class="headerlink" title="判断链表是否回文"></a>判断链表是否回文</h3><blockquote>
<p>给定一个单链表的头节点，请判断该链表是否为回文结构<br>回文结构：正序和逆序相同<br>时间复杂度O（N），空间复杂度O（1）</p>
<p>判断回文常用栈来辅助，但为了追求空间复杂度最小，可以使用一定技巧<br>首先使用快慢指针让慢指针走到中点，然后快指针往回走同时再来一个指针从头走，走一步判断一步是否相等即可</p>
</blockquote>
<ul>
<li><p>方法一：借用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindorme1</span><span class="params">(Node head)</span>&#123;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">//声明一个辅助栈空间</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (head.value != stack.pop().value)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>方法二：快慢指针法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome2</span><span class="params">(Node head)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//声明2个快慢指针</span></span><br><span class="line">       <span class="type">Node</span> <span class="variable">n1</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="type">Node</span> <span class="variable">n2</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="comment">//让慢指针指向中间</span></span><br><span class="line">       <span class="keyword">while</span> (n2.next != <span class="literal">null</span> &amp;&amp; n2.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">           n1 = n1.next;</span><br><span class="line">           n2 = n2.next.next;</span><br><span class="line">       &#125;</span><br><span class="line">       n2 = n1.next;</span><br><span class="line">       n1.next = <span class="literal">null</span>;</span><br><span class="line">       <span class="type">Node</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="comment">//反转后半段</span></span><br><span class="line">       <span class="keyword">while</span> (n2 != <span class="literal">null</span>) &#123;</span><br><span class="line">           n3 = n2.next;</span><br><span class="line">           n2.next = n1;</span><br><span class="line">           n1 = n2;</span><br><span class="line">           n2 = n3;</span><br><span class="line">       &#125;</span><br><span class="line">       n3 = n1;</span><br><span class="line">       n2 = head;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="comment">//判断是否回文</span></span><br><span class="line">       <span class="keyword">while</span> (n1 != <span class="literal">null</span> &amp;&amp; n2 != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (n1.value != n2.value) &#123;</span><br><span class="line">               res = <span class="literal">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           n1 = n1.next;</span><br><span class="line">           n2 = n2.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//把右边再逆序回来</span></span><br><span class="line">       n1 = n3.next;</span><br><span class="line">       n3.next = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">while</span> (n1 != <span class="literal">null</span>)&#123;</span><br><span class="line">           n2 = n1.next;</span><br><span class="line">           n1.next = n3;</span><br><span class="line">           n3 = n1;</span><br><span class="line">           n1 = n2;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="划分单链表"><a href="#划分单链表" class="headerlink" title="划分单链表"></a>划分单链表</h3><blockquote>
<p>将单链表按某值划分为左边小、中间相等、右边大的形式。<br>给定一个单链表的头节点head，节点值类型是整形，再给定一个整数pivot，实现一个调整链表的函数，将链表调整为左部分都是值小于pivot的节点，中间部分都是值等于pivot的节点，右边大于的形式，并且要求相对次序不变。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">listPatition</span><span class="params">(Node head, <span class="type">int</span> pivot)</span> &#123;</span><br><span class="line">        <span class="comment">//分别声明小于区域、大于区域和等于区域的头尾指针</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">sH</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">sT</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">eH</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">eT</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">mH</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">mT</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//存放next指针</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//加下来遍历链表进行操作</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.value &lt; pivot) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sH == <span class="literal">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (head.value == pivot) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eH == <span class="literal">null</span>) &#123;</span><br><span class="line">                    eH = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    eT.next = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mH == <span class="literal">null</span>) &#123;</span><br><span class="line">                    mH = head;</span><br><span class="line">                    mT = head;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    mT.next = head;</span><br><span class="line">                    mT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断有没有小于、等于和大于区域</span></span><br><span class="line">        <span class="keyword">if</span> (sT != <span class="literal">null</span>) &#123;</span><br><span class="line">            sT.next = eH;</span><br><span class="line">            eT = eT == <span class="literal">null</span> ? sT : eT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (eT != <span class="literal">null</span>) &#123;</span><br><span class="line">            eT.next = mH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  sH != <span class="literal">null</span> ? sH : (eH != <span class="literal">null</span> ? eH : mH);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="随机指针节点"><a href="#随机指针节点" class="headerlink" title="随机指针节点"></a>随机指针节点</h3><blockquote>
<p>复制含有随机指针节点的链表</p>
<p>一种特殊的单链表节点如下：</p>
<p>class Node {<br>int value;<br>Node next;<br>Node rand;<br>Node(int val){<br>value &#x3D; val’<br>    }<br>}</p>
<p>rand指针是单链表结构中新增的指针，rand可能指向链表中的任意一个节点，也可能指向null，给丁一个由Node节点类型组成的无环单链表的头节点head，请实现一个函数实现这个链表的复制，并返回复制的新链表的头节点，这个复制的链表和原链表相同，包括rand指针。<br>时间复杂度 O（N），空间复杂度 O（1）</p>
<p>分析：如果借用额外空间，可以使用HashMap，首先遍历链表，每次遍历都copy节点到HashMap里，遍历结束后开始处理新链表的指向问题，第一个节点的next指向的节点可以通过map中get方法或，其rand指针同理获取。</p>
</blockquote>
<ul>
<li><p>使用map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NodeR <span class="title function_">copyRandomList</span><span class="params">(NodeR head)</span> &#123;</span><br><span class="line">        <span class="comment">//key是老节点，value是新节点</span></span><br><span class="line">        HashMap&lt;NodeR, NodeR&gt; mapR = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;NodeR, NodeR&gt;();</span><br><span class="line">        <span class="type">NodeR</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            mapR.put(cur, <span class="keyword">new</span> <span class="title class_">NodeR</span>(cur.value));</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            mapR.get(cur).next = mapR.get(cur.next);</span><br><span class="line">            mapR.get(cur).rand = mapR.get(cur.rand);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapR.get(head);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不用map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NodeR <span class="title function_">copyRandomList2</span><span class="params">(NodeR head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">NodeR</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">NodeR</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = cur.next;</span><br><span class="line">            cur.next = <span class="keyword">new</span> <span class="title class_">NodeR</span>(cur.value);</span><br><span class="line">            cur.next.next = next;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="type">NodeR</span> <span class="variable">curCopy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = cur.next.next;</span><br><span class="line">            curCopy = cur.next;</span><br><span class="line">            cur.next = next;</span><br><span class="line">            curCopy.next = next != <span class="literal">null</span> ? next.next : <span class="literal">null</span>;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">NodeR</span> <span class="variable">res</span> <span class="operator">=</span> head.next;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = cur.next.next;</span><br><span class="line">            curCopy = cur.next;</span><br><span class="line">            cur.next = next;</span><br><span class="line">            curCopy.next = next != <span class="literal">null</span> ? next.next : <span class="literal">null</span>;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h3><blockquote>
<p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p>
<p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>
<p>LeetCode 141 (hot100)</p>
</blockquote>
<blockquote>
<p>两种思路：</p>
<p>思路一：借用HashSet，遍历链表，同时将遍历到的节点加入到set中，set有天然判断重复的功能，所以如果一个链表有环那么第一个爆出false的添加的节点就是入环节点。</p>
<p>思路二：快慢指针法，快节点一次走两步，慢节点一次走一步，如果一个链表有环，那么快慢指针一定会相遇，当他们第一次相遇时，快指针回到头节点，然后快慢指针都以一步的速度同时移动，相遇的节点就是入环节点。</p>
</blockquote>
<ul>
<li><p>HashSet法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">getLoopNode1</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!set.add(cur))&#123;</span><br><span class="line">               <span class="keyword">return</span> cur;</span><br><span class="line">           &#125;</span><br><span class="line">           cur = cur.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>快慢指针法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next, slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="相交链表-1"><a href="#相交链表-1" class="headerlink" title="相交链表"></a>相交链表</h3><blockquote>
<p>两个单链表相交的一系列问题</p>
<p>给定两个有环也可能无环的单链表，头节点head1和head2。请实现一个函数，如果两个链表相交，请返回相交的第一个节点，如果不相交返回null。相交：即有公共节点，指向同一个节点</p>
<p>如果两个链表的长度之和为N，时间复杂度请达到O（N），空间复杂度O（1）</p>
<p>分析：如果是两个无环单链表相交，那么不会出现X状，只会出现Y状和V状<br>方法一：首先遍历两个链表，得到来个链表的长度，然后比较两个链表的end节点是不是指向同一片内存空间（因为从分析中可知，要么Y要么V状），如果没有指向同一片存储空间，那么第三步是让长的那个链表走差值步，然后再共同走</p>
</blockquote>
<ul>
<li><p>当两个无环链表相交时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无环情况下找公共节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">noLoop</span><span class="params">(Node head1, Node head2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="literal">null</span> || head2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur1</span> <span class="operator">=</span> head1;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur2</span> <span class="operator">=</span> head2;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//长度差值</span></span><br><span class="line">        <span class="keyword">while</span> (cur1.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            n--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一个节点不同一定不相交</span></span><br><span class="line">        <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur1 = n &gt; <span class="number">0</span> ? head1 : head2; <span class="comment">//将较长的那个链表的头节点赋值给cur1</span></span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1; <span class="comment">//将短的那个链表的头节点赋值给cur2</span></span><br><span class="line">        n = Math.abs(n); <span class="comment">//求出n绝对值</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123; <span class="comment">//长链表先走n</span></span><br><span class="line">            n--;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有环时</p>
<ul>
<li>不存在一个有环单链表和无环单链表相交</li>
<li>两个链表都有环：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">getLoopNode1</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(cur))&#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">getLoopNode2</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">slow</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">fast</span> <span class="operator">=</span> head.next.next;<span class="comment">//让快指针先迈出两步，否则while条件不好写</span></span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            <span class="comment">//此if来判断是否有环</span></span><br><span class="line">            <span class="keyword">if</span> (fast.next == <span class="literal">null</span> || slow.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无环情况下找公共节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">noLoop</span><span class="params">(Node head1, Node head2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="literal">null</span> || head2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur1</span> <span class="operator">=</span> head1;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur2</span> <span class="operator">=</span> head2;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//长度差值</span></span><br><span class="line">        <span class="keyword">while</span> (cur1.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            n--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一个节点不同一定不相交</span></span><br><span class="line">        <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur1 = n &gt; <span class="number">0</span> ? head1 : head2; <span class="comment">//将较长的那个链表的头节点赋值给cur1</span></span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1; <span class="comment">//将短的那个链表的头节点赋值给cur2</span></span><br><span class="line">        n = Math.abs(n); <span class="comment">//求出n绝对值</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123; <span class="comment">//长链表先走n</span></span><br><span class="line">            n--;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">bothLoop</span><span class="params">(Node head1, Node loop1, Node head2, Node loop2)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur1</span> <span class="operator">=</span> head1;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur2</span> <span class="operator">=</span> head2;</span><br><span class="line">        <span class="keyword">if</span> (loop1 == loop2) &#123; <span class="comment">//入环节点相等，就变成了无环算法</span></span><br><span class="line">            cur1 = head1;</span><br><span class="line">            cur2 = head2;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur1.next != loop1) &#123;</span><br><span class="line">                n++;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur2.next != loop2) &#123;</span><br><span class="line">                n--;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = n &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">            cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">            n = Math.abs(n);</span><br><span class="line">            <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                n--;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur1 = loop1.next;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur1 == loop2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> loop1;</span><br><span class="line">                &#125;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主调用函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">getIntersectNode</span><span class="params">(Node head1, Node head2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="literal">null</span> || head2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">loop1</span> <span class="operator">=</span> getLoopNode1(head1);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">loop2</span> <span class="operator">=</span> getLoopNode1(head1);</span><br><span class="line">        <span class="keyword">if</span> (loop1 == <span class="literal">null</span> &amp;&amp; loop2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noLoop(head1, head2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (loop1 != <span class="literal">null</span> &amp;&amp; loop2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bothLoop(head1, loop1, head2, loop2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="合并两个增序链表"><a href="#合并两个增序链表" class="headerlink" title="合并两个增序链表"></a>合并两个增序链表</h3><blockquote>
<p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p>
<p><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/</a></p>
</blockquote>
<p><strong>递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">       <span class="comment">//递归</span></span><br><span class="line">       <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> list2;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> list1;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">           list1.next = mergeTwoLists(list1.next, list2);</span><br><span class="line">           <span class="keyword">return</span> list1;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           list2.next = mergeTwoLists(list1, list2.next);</span><br><span class="line">           <span class="keyword">return</span> list2;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>迭代</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">     <span class="type">ListNode</span> <span class="variable">prehead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> prehead;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">                prev.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span></span><br><span class="line">        prev.next = l1 == <span class="literal">null</span> ? l2 : l1;</span><br><span class="line">        <span class="keyword">return</span> prehead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="复杂链表深拷贝"><a href="#复杂链表深拷贝" class="headerlink" title="复杂链表深拷贝"></a>复杂链表深拷贝</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-29%2015.40.12.png" alt="截屏2022-08-29 15.40.12" style="zoom:50%;" />







<p><strong>哈希表法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.put(cur, <span class="keyword">new</span> <span class="title class_">Node</span>(cur.val));</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.get(cur).next = map.get(cur.next);</span><br><span class="line">            map.get(cur).random = map.get(cur.random);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>回溯+哈希</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Node, Node&gt; ans = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ans.containsKey(head)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(head.val);</span><br><span class="line">            ans.put(head, temp);</span><br><span class="line">            temp.next = copyRandomList(head.next);</span><br><span class="line">            temp.random = copyRandomList(head.random);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> ans.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> <strong>拆分法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">// 1. 复制各节点，并构建拼接链表</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(cur.val);</span><br><span class="line">            tmp.next = cur.next;</span><br><span class="line">            cur.next = tmp;</span><br><span class="line">            cur = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 构建各新节点的 random 指向</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.random != <span class="literal">null</span>)</span><br><span class="line">                cur.next.random = cur.random.next;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 拆分两链表</span></span><br><span class="line">        cur = head.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head, res = head.next;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre.next = pre.next.next;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = <span class="literal">null</span>; <span class="comment">// 单独处理原链表尾节点</span></span><br><span class="line">        <span class="keyword">return</span> res;      <span class="comment">// 返回新链表头节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h2 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h2><h3 id="检查替换后的单词是否有效"><a href="#检查替换后的单词是否有效" class="headerlink" title="检查替换后的单词是否有效"></a>检查替换后的单词是否有效</h3><blockquote>
<p>给你一个字符串 <code>s</code> ，请你判断它是否 <strong>有效</strong> 。</p>
<p>字符串 <code>s</code> <strong>有效</strong> 需要满足：假设开始有一个空字符串 <code>t = &quot;&quot;</code> ，你可以执行 <strong>任意次</strong> 下述操作将 <code>t</code> <strong>转换为</strong> <code>s</code> ：</p>
<ul>
<li>将字符串 <code>&quot;abc&quot;</code> 插入到 <code>t</code> 中的任意位置。形式上，<code>t</code> 变为 <code>tleft + &quot;abc&quot; + tright</code>，其中 <code>t == tleft + tright</code> 。注意，<code>tleft</code> 和 <code>tright</code> 可能为 <strong>空</strong> 。</li>
</ul>
<p>如果字符串 <code>s</code> 有效，则返回 <code>true</code>；否则，返回 <code>false</code>。</p>
<p>LeetCode 1003 (medium)</p>
</blockquote>
<p><strong>栈</strong></p>
<p>这题经典之处在于，很好的诠释了栈是一个概念，并不是所有的先入后出的模型都必须使用stack 结构，这题用动态字符即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            stk.append(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (stk.length() &gt;= <span class="number">3</span> &amp;&amp; stk.substring(stk.length() - <span class="number">3</span>).equals(<span class="string">&quot;abc&quot;</span>)) &#123;</span><br><span class="line">                stk.delete(stk.length() - <span class="number">3</span>, stk.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="判断入栈出栈序列"><a href="#判断入栈出栈序列" class="headerlink" title="判断入栈出栈序列"></a>判断入栈出栈序列</h3><blockquote>
<p>给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/validate-stack-sequences%E3%80%82">https://leetcode.cn/problems/validate-stack-sequences。</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateStackSequences</span><span class="params">(<span class="type">int</span>[] pushed, <span class="type">int</span>[] popped)</span> &#123;</span><br><span class="line">      Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> pushed.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          stack.push(pushed[i]);</span><br><span class="line">          <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popped[j]) &#123;</span><br><span class="line">              stack.pop();</span><br><span class="line">              j++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="下一个更大的元素（1）"><a href="#下一个更大的元素（1）" class="headerlink" title="下一个更大的元素（1）"></a>下一个更大的元素（1）</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-01%2011.23.03.png" alt="截屏2022-09-01 11.23.03" style="zoom:50%;" />



<p><strong>单调栈+HashMap</strong></p>
<p>只要看到<strong>下一个更大</strong>这种关键字，基本上就要使用单调栈<br>主要思路是：将问题拆分成两个子问题：一个是如何快速找到某个数的右侧第一个更大的数，另一个问题是如何将这个数与nums1的关系保存下来。<br>所以借助单调栈来解决问题1，借助一个map解决问题2<br>从后往前遍历nums2，如果栈空，或者nums2的当前遍历到的元素比栈的栈顶元素大，就弹出栈顶元素，因为当前元素的右侧第一个比他大的元素一定不是栈顶元素了，一直持续这个逻辑直到栈空或者找到比他大的元素，然后继续遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums2.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums2[i];</span><br><span class="line">          <span class="comment">// 栈空或者比栈顶大就弹出</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; num &gt; stack.peek()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 说明找到了或者没找到比他大的元素</span></span><br><span class="line">            map.put(num, stack.isEmpty() ? -<span class="number">1</span> : stack.peek());</span><br><span class="line">            stack.push(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">            ans[i] = map.get(nums1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="商品折扣后价格"><a href="#商品折扣后价格" class="headerlink" title="商品折扣后价格"></a>商品折扣后价格</h3><blockquote>
<p>给你一个数组 prices ，其中 prices[i] 是商店里第 i 件商品的价格。</p>
<p>商店里正在进行促销活动，如果你要买第 i 件商品，那么你可以得到与 prices[j] 相等的折扣，其中 j 是满足 j &gt; i 且 prices[j] &lt;&#x3D; prices[i] 的 最小下标 ，如果没有满足条件的 j ，你将没有任何折扣。</p>
<p>请你返回一个数组，数组中第 i 个元素是折扣后你购买商品 i 最终需要支付的价格。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop">https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop</a></p>
</blockquote>
<p><strong>单调栈</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] finalPrices(<span class="type">int</span>[] prices) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; prices[i] &lt; stack.peek()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i] = stack.isEmpty() ? prices[i] : prices[i] - stack.peek();</span><br><span class="line">            stack.push(prices[i]);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a>每日温度</h3><blockquote>
<p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p>
<p>LeetCode 739 (hot 100)</p>
</blockquote>
<p><strong>单调栈–自己写的</strong></p>
<p>第一次自己一次行写出单调栈的方法，哪怕写的再丑，也要纪念一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                ans[i] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (temperatures[i] &gt;= temperatures[stack.peek()]) &#123;</span><br><span class="line">                        stack.pop();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">                        ans[i] = idx - i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) ans[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是明显可以优化一下，新手写的代码就是丑，而且多余，包括ans初始赋0，都是多余的<br>并且逻辑上可以采用从前往后遍历的方式，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temperatures.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果当前遍历的元素比栈中元素大，说明当前元素是栈中元素的下一个更大元素，即弹出栈</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">preIdx</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                ans[preIdx] = i - preIdx;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="下一个更大的节点"><a href="#下一个更大的节点" class="headerlink" title="下一个更大的节点"></a>下一个更大的节点</h3><blockquote>
<p>给定一个长度为 <code>n</code> 的链表 <code>head</code></p>
<p>对于列表中的每个节点，查找下一个 <strong>更大节点</strong> 的值。也就是说，对于每个节点，找到它旁边的第一个节点的值，这个节点的值 <strong>严格大于</strong> 它的值。</p>
<p>返回一个整数数组 <code>answer</code> ，其中 <code>answer[i]</code> 是第 <code>i</code> 个节点( <strong>从1开始</strong> )的下一个更大的节点的值。如果第 <code>i</code> 个节点没有下一个更大的节点，设置 <code>answer[i] = 0</code> 。</p>
<p>LeetCode(1019)</p>
</blockquote>
<p><strong>关于单调栈</strong></p>
<blockquote>
<p>关于单调栈，主要就是维护用移动最少元素的代价来维护一个单调的栈，比如给定一个数组 [4, 3, 1, 8], 我们需要求每一个元素的下一个比他大的元素，就可以从右往左遍历数组并维护一个底大顶小的单调栈，例如当遍历到 3 时发现栈顶是 1，小于3，那就把 1 弹出，不需要了，因为 3 之前的元素的下一个最大元素不可能是 1.</p>
</blockquote>
<p><strong>方法一： 经典单调栈写法</strong></p>
<p>为了做到能从后往前遍历单链表，可以采用递归算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] ans;</span><br><span class="line">    <span class="comment">// 单调栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextLargerNodes(ListNode head) &#123;</span><br><span class="line">        f(head, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(ListNode node, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            ans = <span class="keyword">new</span> <span class="title class_">int</span>[i];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不断的向后遍历，在递归返回的时候才开始操作</span></span><br><span class="line">        f(node.next, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 将栈中比当前元素小的都弹出，因为是无效的元素了</span></span><br><span class="line">        <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; st.peek() &lt;= node.val) &#123;</span><br><span class="line">            st.pop();</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">if</span> (!st.isEmpty()) &#123;</span><br><span class="line">            ans[i] = st.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        st.push(node.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想用递归，那就<strong>反转链表</strong>再从头遍历也行</p>
<p><strong>方法二：用每个数更新其他数的下一个更大元素</strong></p>
<p>方法一是从后往前遍历，也可以从前往后遍历，每次遍历都将该元素加到栈内，例如栈内元素是 3，2，下一个是 4，那么 3 和 2都可以弹出，因为下一个更大元素一定是4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextLargerNodes(ListNode head) &#123;</span><br><span class="line">        <span class="comment">// 首先求链表的长度来生命 ans 数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="comment">// 既保存数又保存该数的下标</span></span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; st = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">            <span class="comment">// 这个逻辑可以保证当栈内有不止一个元素时是递减的</span></span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; st.peek()[<span class="number">0</span>] &lt; p.val) &#123;</span><br><span class="line">                ans[st.pop()[<span class="number">1</span>]] = p.val;</span><br><span class="line">            &#125;</span><br><span class="line">            st.push(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;p.val, i++&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化</strong></p>
<p>栈内直接存下标，并且把每次遍历到的复合条件的元素直接存到 ans 中，方便修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextLargerNodes(ListNode head) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        Deque&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; ans[st.peek()] &lt; p.val) &#123;</span><br><span class="line">                ans[st.pop()] = p.val;</span><br><span class="line">            &#125;</span><br><span class="line">            st.push(i);</span><br><span class="line">            <span class="comment">// 将当前遍历到的元素存入 ans，方便下次比较</span></span><br><span class="line">            ans[i++] = p.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> idx : st) &#123;</span><br><span class="line">            ans[idx] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="和至少为-K-的最短子数组"><a href="#和至少为-K-的最短子数组" class="headerlink" title="和至少为 K 的最短子数组"></a>和至少为 K 的最短子数组</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-01%2016.04.03.png" alt="截屏2022-11-01 16.04.03" style="zoom:50%;" />

<p><strong>单调队列 + 前缀和</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestSubarray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length, ans = n + <span class="number">1</span>;</span><br><span class="line">      <span class="type">long</span>[] s = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">      <span class="comment">// 初始化前缀和数组</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          s[i + <span class="number">1</span>] = s[i] + nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">      Deque&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">          <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> s[i];</span><br><span class="line">          <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; cur - s[q.peekFirst()] &gt;= k) &#123;</span><br><span class="line">              ans = Math.min(ans, i - q.pollFirst());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; s[q.peekLast()] &gt;= cur) &#123;</span><br><span class="line">              q.pollLast();</span><br><span class="line">          &#125; </span><br><span class="line">          q.addLast(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans &gt; n ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





















<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><hr>
<h2 id="二叉树基础"><a href="#二叉树基础" class="headerlink" title="二叉树基础"></a>二叉树基础</h2><blockquote>
<p>二叉树节点结构：</p>
<p>Class Node<V> {<br>V value;<br>Node left;<br>Node right;<br>}</p>
</blockquote>
<h3 id="二叉树递归遍历"><a href="#二叉树递归遍历" class="headerlink" title="二叉树递归遍历"></a>二叉树递归遍历</h3><p>对于以下一颗二叉树</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/d928190de56e10b7e5f2e009ca334102.jpeg" alt="d928190de56e10b7e5f2e009ca334102" style="zoom:50%;" />

<p>在计算机中从头节点用以下代码开始遍历的完整递归步骤是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fun(head.left);</span><br><span class="line">  fun(head.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序底层中的递归步骤是：</p>
<p>1、2、4、4、4、2、5、5、5、2、1、3、6、6、6、3、7、7、7、3、1<br>因为在遍历到4时会继续遍历4的左子树，为null，然后return，回到4，继续遍历4的右子树，如上步骤，会三次遍历到4这个节点，但是只有一次会对他进行操作，而前序遍历、中序遍历、后序遍历就是对节点进行操作的时机不同。</p>
<ul>
<li>先序遍历：1、2、4、5、3、6、7<br>就是在上述步骤中对第一次访问到的节点进行操作，第二次、第三次不操作的结果</li>
<li>中序遍历：4、2、5、1、6、3、7<br>就是在上述步骤中对第二次访问到的节点进行操作，第一次、第三次不操作</li>
<li>后序遍历：4、5、2、6、7、3、1<br>就是在上述步骤中对第三次访问到的节点进行操作，第一次、第二次不操作</li>
</ul>
<p><strong>先序遍历代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrderRecur</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(head.value + <span class="string">&quot; &quot;</span>);<span class="comment">//在第一笔遍历到节点时打印值</span></span><br><span class="line">        preOrderRecur(head.left);</span><br><span class="line">        preOrderRecur(head.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>中序遍历代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrderRecur</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrderRecur(head.left);</span><br><span class="line">        System.out.print(head.value + <span class="string">&quot; &quot;</span>);<span class="comment">//在第二次遍历到节点时打印值</span></span><br><span class="line">        inOrderRecur(head.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>后序遍历代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">posOrderRecur</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        posOrderRecur(head.left);</span><br><span class="line">        posOrderRecur(head.right);</span><br><span class="line">        System.out.print(head.value + <span class="string">&quot; &quot;</span>);<span class="comment">//在最后一次遍历到节点时打印值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="二叉树非递归遍历"><a href="#二叉树非递归遍历" class="headerlink" title="二叉树非递归遍历"></a>二叉树非递归遍历</h3><blockquote>
<p>使用栈来辅助遍历二叉树</p>
</blockquote>
<p><strong>先序遍历</strong><br>按头右左顺序压入栈中，再弹出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrderUnRecur</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            Stack&lt;BinaryNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            stack.add(head);</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                head = stack.pop();</span><br><span class="line">                System.out.print(head.value);</span><br><span class="line">                <span class="keyword">if</span> (head.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stack.push(head.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (head.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stack.push(head.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p><strong>中序遍历</strong><br>一开始整棵树左边界进栈，依次弹出的过程中打印，并对弹出节点的右树进栈（且每次右子树进栈前左子树也要进）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrderUnRecur</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">           Stack&lt;BinaryNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">           <span class="keyword">while</span> (!stack.isEmpty() || head != <span class="literal">null</span>) &#123; <span class="comment">// 只有栈空且此时的节点指针也为空时才会停止循环</span></span><br><span class="line">               <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123; <span class="comment">// 首先判断当前节点指针是否为空</span></span><br><span class="line">                   stack.push(head); <span class="comment">//如果当前节点不空，那就先压入栈再说</span></span><br><span class="line">                   head = head.left; <span class="comment">// 压入栈的节点优先继续判断其左节点</span></span><br><span class="line">               &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">                   head = stack.pop(); <span class="comment">//如果当前节点指针为空那就开始弹出栈的元素</span></span><br><span class="line">                   System.out.print(head.value + <span class="string">&quot; &quot;</span>); <span class="comment">// 对元素技能型操作</span></span><br><span class="line">                   head = head.right; <span class="comment">// 走到这个else的节点一定是左节点为空的节点，所以开始判断其右节点</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>







<p><strong>后序遍历</strong><br>准备两个栈，第一个栈按根左右顺序压入，每次弹出后压入第二个栈，结束后第二个栈的弹出顺序即为后序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">posOrderUnRecur</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            Stack&lt;BinaryNode&gt; stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            Stack&lt;BinaryNode&gt; stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            stack1.push(head);</span><br><span class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                head = stack1.pop();</span><br><span class="line">                stack2.push(head);</span><br><span class="line">                <span class="keyword">if</span> (head.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stack1.push(head.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (head.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stack1.push(head.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!stack2.isEmpty()) &#123;</span><br><span class="line">                System.out.print(stack2.pop().value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="二叉树层序遍历"><a href="#二叉树层序遍历" class="headerlink" title="二叉树层序遍历"></a>二叉树层序遍历</h3><blockquote>
<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>
<p>LeetCode(102) hot 100</p>
</blockquote>
<p><strong>分析</strong></p>
<p>此题稍微有些不同的是，返回的结果需要按层打印，所以在到新的一层时需要先拿到当前队列的size，即当前层的宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) queue.offer(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                cur.add(node.val);</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) queue.offer(node.right);</span><br><span class="line">            &#125; </span><br><span class="line">            ans.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="二叉树宽度遍历"><a href="#二叉树宽度遍历" class="headerlink" title="二叉树宽度遍历"></a>二叉树宽度遍历</h3><p><strong>宽度优先遍历</strong></p>
<blockquote>
<p>二叉树的先序遍历就是二叉树的深度优先遍历，宽度优先遍历也就是二叉树层序遍历</p>
<p>思想：利用一个队列，头进尾出，每一次弹出就打印，先放左子树再放又子树，周而复始</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">widthTra</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        双向链表可以做队列</span></span><br><span class="line">        Queue&lt;BinaryNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(head);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">BinaryNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            System.out.println(cur.value);</span><br><span class="line">            <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(cur.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p><strong>求一颗二叉树的最大宽度</strong></p>
<blockquote>
<p>求一个二叉树的最大宽度即求一个二叉树所有层中节点数最多的那一层的节点数</p>
<p>即需要知道一个二叉树有几层，且每一层有几个节点，所以在层序遍历的基础上记录每一层的节点个数</p>
</blockquote>
<p><strong>借助哈希表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxWidth</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;BinaryNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(head);</span><br><span class="line">        HashMap&lt;BinaryNode, Integer&gt; levelMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        levelMap.put(head, <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">curLevel</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 当前所在层</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curLevelNodes</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//当前层数到的节点数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;<span class="comment">//最大层节点数</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">BinaryNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">curNodeLevel</span> <span class="operator">=</span> levelMap.get(cur);</span><br><span class="line">            <span class="keyword">if</span> (curNodeLevel == curLevel) &#123;</span><br><span class="line">                curLevelNodes++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                max = Math.max(max, curLevelNodes);</span><br><span class="line">                curLevel++;</span><br><span class="line">                curLevelNodes = <span class="number">1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                levelMap.put(cur.left, curNodeLevel+<span class="number">1</span>);</span><br><span class="line">                queue.add(cur.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                levelMap.put(cur.right, curNodeLevel+<span class="number">1</span>);</span><br><span class="line">                queue.add(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>不用哈希表：P7最后</strong></p>
<h3 id="判断搜索二叉树"><a href="#判断搜索二叉树" class="headerlink" title="判断搜索二叉树"></a>判断搜索二叉树</h3><blockquote>
<p>如何判断一课树是否是搜索二叉树</p>
<p>搜索二叉树：对于跟节点来说，其左树都比根节点小，右树都比根节点大（经典搜索二叉树是没有重复值的）</p>
<p>思路：中序遍历，（没有重复值）如果是升序的话就是一棵搜索二叉树</p>
</blockquote>
<p><strong>中序遍历法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">preValue</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkBST</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLeftBst</span> <span class="operator">=</span> checkBST(head.left);</span><br><span class="line">        <span class="keyword">if</span> (!isLeftBst) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head.value &lt;= preValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            preValue = head.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> checkBST(head.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>递归实现(树形DP）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否是搜索二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReturnData</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> isBst;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> min;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> max;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ReturnData</span><span class="params">(<span class="type">boolean</span> is, <span class="type">int</span> mi, <span class="type">int</span> ma)</span> &#123;</span><br><span class="line">            isBst = is;</span><br><span class="line">            min = mi;</span><br><span class="line">            max = ma;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReturnData <span class="title function_">process</span><span class="params">(BinaryNode x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ReturnData</span> <span class="variable">leftData</span> <span class="operator">=</span> process(x.left);</span><br><span class="line">        <span class="type">ReturnData</span> <span class="variable">rightData</span> <span class="operator">=</span> process(x.right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> x.value;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> x.value;</span><br><span class="line">        <span class="keyword">if</span> (leftData != <span class="literal">null</span>) &#123;</span><br><span class="line">            min = Math.min(min, leftData.min);</span><br><span class="line">            max = Math.max(max, rightData.max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightData != <span class="literal">null</span>) &#123;</span><br><span class="line">            min = Math.min(min, leftData.min);</span><br><span class="line">            max = Math.max(max, rightData.max);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isBst</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftData != <span class="literal">null</span> &amp;&amp; (!leftData.isBst || leftData.max &gt;= x.value)) &#123;</span><br><span class="line">            isBst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightData != <span class="literal">null</span> &amp;&amp; (!rightData.isBst || rightData.min &lt;= x.value)) &#123;</span><br><span class="line">            isBst = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReturnData</span>(isBst, min, max);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="判断完全二叉树"><a href="#判断完全二叉树" class="headerlink" title="判断完全二叉树"></a>判断完全二叉树</h3><blockquote>
<p>思路：<br>在宽度遍历二叉树的过程中，有如下情况：</p>
<ol>
<li>某一节点有右孩子没有左孩子，则返回false</li>
<li>在条件1不违规的情况下，遇到了第一个左右孩子不双全的情况，那么接下来的所有节点都必须是叶子节点，否则返回false</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isCBT</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        LinkedList&lt;BinaryNode&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list.add(head);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leaf</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//此为判断事件，是否遇到了左右孩子不双全的情况</span></span><br><span class="line">        <span class="type">BinaryNode</span> <span class="variable">l</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BinaryNode</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (!list.isEmpty()) &#123;</span><br><span class="line">            head = list.poll();</span><br><span class="line">            l = head.left;</span><br><span class="line">            r = head.right;</span><br><span class="line">            <span class="keyword">if</span> ((leaf &amp;&amp; (l != <span class="literal">null</span> || r != <span class="literal">null</span>)) <span class="comment">//遇到过左右孩子不双全的节点且其不为叶节点</span></span><br><span class="line">                    ||</span><br><span class="line">                    (l == <span class="literal">null</span> &amp;&amp; r != <span class="literal">null</span>))&#123; <span class="comment">//右节点不为空且左节点为空</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l != <span class="literal">null</span>) &#123;</span><br><span class="line">                list.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">                list.add(r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l == <span class="literal">null</span> || r == <span class="literal">null</span>) &#123;</span><br><span class="line">                leaf =<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h3><blockquote>
<p>思路：递归<br>左树是平衡的，右树也是平衡的，且左树右树的高度叉</p>
<p>此思路适用于一切树形dp问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsBalanceTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReturnType</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> isBalanced;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ReturnType</span><span class="params">(<span class="type">boolean</span> isB, <span class="type">int</span> hei)</span> &#123;</span><br><span class="line">            isBalanced = isB;</span><br><span class="line">            height = hei;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReturnType <span class="title function_">process</span><span class="params">(BinaryNode x)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReturnType</span>(<span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="type">ReturnType</span> <span class="variable">leftData</span> <span class="operator">=</span> process(x.left);</span><br><span class="line">         <span class="type">ReturnType</span> <span class="variable">rightData</span> <span class="operator">=</span> process(x.right);</span><br><span class="line">         <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> Math.max(leftData.height, rightData.height) + <span class="number">1</span>;</span><br><span class="line">         <span class="type">boolean</span> <span class="variable">isBalanced</span> <span class="operator">=</span> leftData.isBalanced &amp;&amp; rightData.isBalanced</span><br><span class="line">                              &amp;&amp; Math.abs(leftData.height - rightData.height) &lt; <span class="number">2</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReturnType</span>(isBalanced, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBanlanced</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> process(head).isBalanced;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>自顶向下的递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> Math.abs(process(root.left) - process(root.right)) &lt;= <span class="number">1</span> </span><br><span class="line">            &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(process(root.left), process(root.right)) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>自下而上的递归(效率更高）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height(root) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> height(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> height(root.right);</span><br><span class="line">        <span class="keyword">if</span> (leftHeight == -<span class="number">1</span> || rightHeight == -<span class="number">1</span> || Math.abs(leftHeight - rightHeight) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h3 id="判断满二叉树"><a href="#判断满二叉树" class="headerlink" title="判断满二叉树"></a>判断满二叉树</h3><blockquote>
<p>树形dp的问题一定要满足向左右子树询问信息是一样的情况</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">(BinaryNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Info</span> <span class="variable">data</span> <span class="operator">=</span> process(head);</span><br><span class="line">        <span class="comment">//如果是满二叉树满足nodes = 2的高度次方 -1</span></span><br><span class="line">        <span class="keyword">return</span> data.nodes == (<span class="number">1</span> &lt;&lt; data.height - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> nodes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Info</span><span class="params">(<span class="type">int</span> hei, <span class="type">int</span> no)</span> &#123;</span><br><span class="line">            height = hei;</span><br><span class="line">            nodes = no;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Info <span class="title function_">process</span><span class="params">(BinaryNode x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Info</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Info</span> <span class="variable">leftData</span> <span class="operator">=</span> process(x.left);</span><br><span class="line">        <span class="type">Info</span> <span class="variable">rightData</span> <span class="operator">=</span> process(x.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> Math.max(leftData.height, rightData.height) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nodes</span> <span class="operator">=</span> leftData.nodes + rightData.nodes + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Info</span>(height, nodes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="公共祖先节点"><a href="#公共祖先节点" class="headerlink" title="公共祖先节点"></a>公共祖先节点</h3><blockquote>
<p>题目：给定两个Node1和Node2，找到他们的最低公共祖先节点,这两个节点一定属于head为头节点的树</p>
<p>思路：</p>
<ol>
<li>麻烦一点的：先生成所有节点的父节点的map，然后用一个set获得两个节点其中一个的父节点表，另外一个节点往上走，看其父节点在set中存不存在，第一个存在的就是最低的祖先节点</li>
<li>代码简单，但是不好理解：<br>最低公共祖先有以下几种情况<ol>
<li>o1或o2一个是另外一个的祖先</li>
<li>o1和o2彼此不是对方的祖先</li>
</ol>
</li>
</ol>
</blockquote>
<p><strong>简单方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">lowerAncestor</span><span class="params">(Node head, Node o1, Node o2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head ==o1 || head == o2) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">left</span> <span class="operator">=</span> lowerAncestor(head.left, o1, o2);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> lowerAncestor(head.right, o1, o2);</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left != <span class="literal">null</span> ? left : right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>









<h3 id="二叉树某一和路径"><a href="#二叉树某一和路径" class="headerlink" title="二叉树某一和路径"></a>二叉树某一和路径</h3><blockquote>
<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p>
<p><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/</a></p>
</blockquote>
<p><strong>深度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    Deque&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        dfs(root, target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.offerLast(node.val);</span><br><span class="line">        target -= node.val;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span> &amp;&amp; target == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;(path));</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(node.left, target);</span><br><span class="line">        dfs(node.right, target);</span><br><span class="line">        path.pollLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>广度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    Map&lt;TreeNode, TreeNode&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;TreeNode, TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; queueNode = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; queueSum = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        queueNode.offer(root);</span><br><span class="line">        queueSum.offer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queueNode.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queueNode.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">rec</span> <span class="operator">=</span> queueSum.poll() + node.val;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rec == target) &#123;</span><br><span class="line">                    getPath(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    map.put(node.left, node);</span><br><span class="line">                    queueNode.offer(node.left);</span><br><span class="line">                    queueSum.offer(rec);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    map.put(node.right, node);</span><br><span class="line">                    queueNode.offer(node.right);</span><br><span class="line">                    queueSum.offer(rec);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPath</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.add(node.val);</span><br><span class="line">            node = map.get(node);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(temp);</span><br><span class="line">        ret.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;(temp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h3><blockquote>
<p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p>
<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p>
<p>返回合并后的二叉树。</p>
<p><strong>注意:</strong> 合并过程必须从两个树的根节点开始。</p>
<p>LeetCode 617 (hot 100)</p>
</blockquote>
<p><strong>深度优先</strong></p>
<p>我们可以做如下思考：我们按中序遍历的顺序同步遍历两棵树，然后创建新节点，并对新节点的值进行操作，然后将新节点的左右分支的情况寄托于下一次调用，在调用返回时将其节点返回，这种调用流程很明显适合使用递归调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">        <span class="comment">// base case, 只要有一个为空就不用计算了，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">if</span> (root2 == <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line">        <span class="comment">// 创建新节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">merged</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root1.val + root2.val);</span><br><span class="line">        merged.left = mergeTrees(root1.left, root2.left);</span><br><span class="line">        merged.right = mergeTrees(root1.right, root2.right);</span><br><span class="line">        <span class="keyword">return</span> merged;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>深度优先+在第一棵树上进行操作，不创建新节点</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">if</span> (root2 == <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line">        root1.val += root2.val;</span><br><span class="line">        <span class="keyword">if</span> (root1.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            root1.left = root2.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergeTrees(root1.left, root2.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root1.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            root1.right = root2.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergeTrees(root1.right, root2.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>广度优先搜索</strong></p>
<p>代码比较麻烦，性能也不够优秀，仅作练习</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">if</span> (root2 == <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">merged</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root1.val + root2.val);</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(merged);</span><br><span class="line">        queue1.offer(root1);</span><br><span class="line">        queue2.offer(root2);</span><br><span class="line">        <span class="keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll(), node1 = queue1.poll(), node2 = queue2.poll();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">left1</span> <span class="operator">=</span> node1.left, left2 = node2.left;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">right1</span> <span class="operator">=</span> node1.right, right2 = node2.right;</span><br><span class="line">            <span class="keyword">if</span> (left1 != <span class="literal">null</span> || left2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left1 != <span class="literal">null</span> &amp;&amp; left2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(left1.val + left2.val);</span><br><span class="line">                    node.left = left;</span><br><span class="line">                    queue.offer(left);</span><br><span class="line">                    queue1.offer(left1);</span><br><span class="line">                    queue2.offer(left2);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.left = left1;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.left = left2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right1 != <span class="literal">null</span> || right2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (right1 != <span class="literal">null</span> &amp;&amp; right2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(right1.val + right2.val);</span><br><span class="line">                    node.right = right;</span><br><span class="line">                    queue.offer(right);</span><br><span class="line">                    queue1.offer(right1);</span><br><span class="line">                    queue2.offer(right2);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.right = right1;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.right = right2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



































<h2 id="二叉树操作"><a href="#二叉树操作" class="headerlink" title="二叉树操作"></a>二叉树操作</h2><h3 id="二叉树展开为链表"><a href="#二叉树展开为链表" class="headerlink" title="二叉树展开为链表"></a>二叉树展开为链表</h3><blockquote>
<p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p>
<ul>
<li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中 <code>right</code> 子指针指向链表中下一个结点，而左子指针始终为 <code>null</code> 。</li>
<li>展开后的单链表应该与二叉树 <a href="https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin"><strong>先序遍历</strong></a> 顺序相同。</li>
</ul>
<p>LeetCode 114 (hot 100)</p>
</blockquote>
<p><strong>左子树插到右子树</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">5</span></span><br><span class="line"> / \   \</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将 1 的左子树插入到右子树的地方</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>         <span class="number">5</span></span><br><span class="line">     / \         \</span><br><span class="line">    <span class="number">3</span>   <span class="number">4</span>         <span class="number">6</span>        </span><br><span class="line"><span class="comment">//将原来的右子树接到左子树的最右边节点</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>          </span><br><span class="line">     / \          </span><br><span class="line">    <span class="number">3</span>   <span class="number">4</span>  </span><br><span class="line">         \</span><br><span class="line">          <span class="number">5</span></span><br><span class="line">           \</span><br><span class="line">            <span class="number">6</span></span><br><span class="line">            </span><br><span class="line"> <span class="comment">//将 2 的左子树插入到右子树的地方</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>          </span><br><span class="line">       \          </span><br><span class="line">        <span class="number">3</span>       <span class="number">4</span>  </span><br><span class="line">                 \</span><br><span class="line">                  <span class="number">5</span></span><br><span class="line">                   \</span><br><span class="line">                    <span class="number">6</span>   </span><br><span class="line">        </span><br><span class="line"> <span class="comment">//将原来的右子树接到左子树的最右边节点</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">2</span>          </span><br><span class="line">       \          </span><br><span class="line">        <span class="number">3</span>      </span><br><span class="line">         \</span><br><span class="line">          <span class="number">4</span>  </span><br><span class="line">           \</span><br><span class="line">            <span class="number">5</span></span><br><span class="line">             \</span><br><span class="line">              <span class="number">6</span>         </span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 找到左子树的最右节点</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">pre</span> <span class="operator">=</span> root.left;</span><br><span class="line">                <span class="keyword">while</span> (pre.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    pre = pre.right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将当前根节点的右子树接到左子树最右节点的右子树上</span></span><br><span class="line">                pre.right = root.right;</span><br><span class="line">                <span class="comment">//将新左子树接到根节点的右子树上，并按要求将根节点的左子树设置为空</span></span><br><span class="line">                root.right = root.left;</span><br><span class="line">                root.left = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 继续循环操作</span></span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>变形后序遍历</strong></p>
<p>题目展开的链表的顺序其实就是先序遍历，想着可以先序遍历的时候进行一些操作，把当前遍历到的节点接到前一个节点的右节点，但是这做不到，因为会导致 pre 节点的右节点丢失，所以可以反过来，将后续遍历变形，按照 右节点 - 左节点 - 根节点 的顺序去遍历，将当前节点的右指针更新为上一个节点，这样右节点就不会丢失了，因为已经访问过了</p>
<p><strong>非迭代版</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode pre;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        flatten(root.right);</span><br><span class="line">        flatten(root.left);</span><br><span class="line">        root.right = pre;</span><br><span class="line">        root.left = <span class="literal">null</span>;</span><br><span class="line">        pre = root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代版</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123; </span><br><span class="line">    Stack&lt;TreeNode&gt; toVisit = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span> || !toVisit.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            toVisit.push(cur); <span class="comment">// 添加根节点</span></span><br><span class="line">            cur = cur.right; <span class="comment">// 递归添加右节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur = toVisit.peek(); <span class="comment">// 已经访问到最右的节点了</span></span><br><span class="line">        <span class="comment">// 在不存在左节点或者右节点已经访问过的情况下，访问根节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur.left == <span class="literal">null</span> || cur.left == pre) &#123;</span><br><span class="line">            toVisit.pop(); </span><br><span class="line">            <span class="comment">/**************修改的地方***************/</span></span><br><span class="line">            cur.right = pre;</span><br><span class="line">            cur.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">/*************************************/</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = cur.left; <span class="comment">// 左节点还没有访问过就先访问左节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="找树最左节点"><a href="#找树最左节点" class="headerlink" title="找树最左节点"></a>找树最左节点</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-22%2016.05.34.png" alt="截屏2022-06-22 16.05.34" style="zoom:50%;" />

<p><strong>方法一 (推荐）</strong><br>深度优先遍历 + 记录最左节点值<br>深度优先遍历有一个特点：一定会最先遍历到每一层节点的最左节点，所以我们只需要声明两个值：curHeight 和 curValue 来记录遍历的高度和节点的value，在执行dfs的时候，在两次递归的后面加一个判断即可找到第一个左节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法1 深度优先遍历 + 记录最左节点值</span></span><br><span class="line">        <span class="comment">//注：深度优先遍历有个特点：一定会最先遍历到每一层的最左节点</span></span><br><span class="line">        dfs(root, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> curValue;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         height++;</span><br><span class="line">         dfs(root.left, height);</span><br><span class="line">         dfs(root.right, height);</span><br><span class="line">         <span class="keyword">if</span> (height &gt; curHeight) &#123;</span><br><span class="line">             curHeight = height;</span><br><span class="line">             curValue = root.val;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>方法二</strong><br>广度优先搜索,和传统广度优先不同，这次先加右节点，这样最后一个节点的值一定是最后一层最左节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法二：广度优先</span></span><br><span class="line">        <span class="comment">//改造一下，先加右节点</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            ans = cur.val;</span><br><span class="line">            <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.add(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.add(cur.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>





<h3 id="二叉树的直径"><a href="#二叉树的直径" class="headerlink" title="二叉树的直径"></a>二叉树的直径</h3><blockquote>
<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>
<p>LeetCode 543 (hot100)</p>
</blockquote>
<p><strong>深度优先</strong></p>
<p>统计遍历过的节点的节点个数，找到最大值 -1 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> dfs(node.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> dfs(node.right);</span><br><span class="line">        ans = Math.max(ans, L + R + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Math.max(L, R) + <span class="number">1</span>; <span class="comment">// + 1是返回经过的节点个数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="判断两树是否相同"><a href="#判断两树是否相同" class="headerlink" title="判断两树是否相同"></a>判断两树是否相同</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-28%2023.32.47.png" alt="截屏2022-06-28 23.32.47" style="zoom:50%;" />



<p><strong>方法一</strong><br>如果根节点都为空，那么就一定是相同的<br>如果根节点只有一个是空，那么就一定是不相同的，<br>如果值不相同，一定不相等<br>如果根节点都不为空，则开始递归到下一个节点，继续按这三个点来判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此方法中的判断分支写的很有意思 </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="comment">//方法一：递归</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="literal">null</span> || q == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.val != q.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p><strong>方法二</strong><br>方法二借用队列来实现，每次加入两个节点<br>如果两个节点的值不同，返回false<br>如果两个节点的左节点同时存在，那就将这两个节点加入到节点<br>如果两个节点的左节点不同时存在，返回false<br>如果两个节点的左节点同时不存在，就继续判断右节点，右节点同理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="literal">null</span> || q == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       queue.offer(p);</span><br><span class="line">       queue.offer(q);</span><br><span class="line">       <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">cur1</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">cur2</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">           <span class="keyword">if</span> (cur1.val != cur2.val) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (cur1.left != <span class="literal">null</span> &amp;&amp; cur2.left != <span class="literal">null</span>) &#123;</span><br><span class="line">               queue.offer(cur1.left);</span><br><span class="line">               queue.offer(cur2.left);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur1.left != <span class="literal">null</span> || cur2.left != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (cur1.right != <span class="literal">null</span> &amp;&amp; cur2.right != <span class="literal">null</span>) &#123;</span><br><span class="line">               queue.offer(cur1.right);</span><br><span class="line">               queue.offer(cur2.right);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur1.right != <span class="literal">null</span> || cur2.right != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<p><strong>利用此思想可以判断一颗二叉树是否对称</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isSame(root, root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSame</span><span class="params">(TreeNode l, TreeNode r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span> &amp;&amp; r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l == <span class="literal">null</span> || r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (l.val != r.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> isSame(l.left, r.right) &amp;&amp; isSame(l.right, r.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

























<h3 id="判断树是否轴对称"><a href="#判断树是否轴对称" class="headerlink" title="判断树是否轴对称"></a>判断树是否轴对称</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-29%2000.10.35.png" alt="截屏2022-06-29 00.10.35" style="zoom:50%;" />





<p><strong>方法一</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       这一题可以借助判断两二叉树是不是相同的那一题的思想</span></span><br><span class="line"><span class="comment">       不同的是，这次两个工作指针的走向不同</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">return</span> process(root, root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(TreeNode p1, TreeNode p2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 == <span class="literal">null</span> &amp;&amp; p2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p1 == <span class="literal">null</span> || p2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p1.val == p2.val </span><br><span class="line">            &amp;&amp; process(p1.left, p2.right) </span><br><span class="line">            &amp;&amp; process(p1.right, p2.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="二叉树最大高度"><a href="#二叉树最大高度" class="headerlink" title="二叉树最大高度"></a>二叉树最大高度</h3><p><strong>思路一</strong><br>经典思路，声明两个变量，maxHeight 和 curHeight，再利用深度优先遍历，每次遍历到的节点判断当前高度是不是比最大高度大，是的话就赋值给最大高度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxheight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> maxheight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> curHeight)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curHeight++;</span><br><span class="line">        maxheight = maxheight &gt; curHeight ? maxheight : curHeight;</span><br><span class="line">        dfs(root.left, curHeight);</span><br><span class="line">        dfs(root.right, curHeight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>思路二</strong><br>也还是利用深度优先以及递归，但是处理逻辑不同<br>将树的高度从下往上计算<br>某一个节点的高度取决于左右子树的高度中较大的那个再+1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> maxDepth(root.right);</span><br><span class="line">            <span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="二叉树最小深度"><a href="#二叉树最小深度" class="headerlink" title="二叉树最小深度"></a>二叉树最小深度</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-30%2016.57.28.png" alt="截屏2022-06-30 16.57.28" style="zoom:50%;" />



<p><strong>自己写的垃圾深度优先代码</strong><br>虽然代码略长，但是速度很快</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minCount</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        process(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> minCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(TreeNode root, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            minCount = minCount &lt; count ? minCount : count;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            process(root.left, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            process(root.right, count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>官方的简洁dfs代码</strong><br>虽然简洁，但是速度很慢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minDep</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            minDep = Math.min(minDepth(root.left), minDep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            minDep = Math.min(minDepth(root.right), minDep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDep + <span class="number">1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>广度优先思路</strong><br>二叉树广度优先即层序遍历，这种遍历的特点是遍历到的第一个叶子节点就是深度最低的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">      queue.offer(root);</span><br><span class="line">      <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">          height++;</span><br><span class="line">          <span class="type">int</span> <span class="variable">curSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; curSize; i++) &#123;</span><br><span class="line">              <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">              <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> height;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                  queue.offer(cur.left);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                  queue.offer(cur.right);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="二叉树目标路径和"><a href="#二叉树目标路径和" class="headerlink" title="二叉树目标路径和"></a>二叉树目标路径和</h3><p><strong>递归+中序遍历</strong><br>有关于树的操作几乎都涉及到遍历节点，那就躲不掉深度优先或广度优先遍历,每一题都需要根据题目的特殊性来量身定制再遍历时的一些操作<br>比如说这一题，在深度优先的时候，定制一下思路：分解问题规模：每到一个节点就判断从此节点到叶节点有没有满足target - sum的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> root.val == targetSum;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> hasPathSum(root.left, targetSum - root.val) </span><br><span class="line">                    || hasPathSum(root.right, targetSum - root.val);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>广度优先+路径全记录</strong><br>解决此类问题毫无疑问还有一种百搭的方法就是利用广度优先搜索，记录从根节点到当前节点的路径和<br>这就需要声明两个队列，一个队列记录访问过的节点，另一个队列对应记录着根节点到此节点的路径和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125; </span><br><span class="line">     Queue&lt;TreeNode&gt; nodes = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(); <span class="comment">// 访问过的节点</span></span><br><span class="line">     Queue&lt;Integer&gt; nodeVal = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(); <span class="comment">// 访问过的节点的路径和</span></span><br><span class="line">     nodes.offer(root);</span><br><span class="line">     nodeVal.offer(root.val);</span><br><span class="line">     <span class="keyword">while</span> (!nodes.isEmpty()) &#123;</span><br><span class="line">         <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> nodes.poll(); <span class="comment">// 取出当前队列队头元素</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">curVal</span> <span class="operator">=</span> nodeVal.poll(); <span class="comment">// 取出其对应的路径和</span></span><br><span class="line">         <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) &#123; <span class="comment">// 当节点为叶子节点</span></span><br><span class="line">             <span class="keyword">if</span> (curVal == targetSum) &#123;  <span class="comment">// 且节点的路径和与目标一致</span></span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//即刻返回true</span></span><br><span class="line">             &#125; </span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 否则继续循环</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) &#123;</span><br><span class="line">             nodes.offer(cur.left);</span><br><span class="line">             nodeVal.offer(cur.left.val + curVal); <span class="comment">// 路径和</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) &#123;</span><br><span class="line">             nodes.offer(cur.right);</span><br><span class="line">             nodeVal.offer(cur.right.val + curVal); <span class="comment">//路径和</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果循环结束都没有找到满足目标的节点，就返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="二叉树反转"><a href="#二叉树反转" class="headerlink" title="二叉树反转"></a>二叉树反转</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-04%2022.18.59.png" alt="截屏2022-07-04 22.18.59" style="zoom:50%;" />





<p><strong>递归思路</strong><br>递归的遍历每一个节点，从叶子节点开始，每次遍历到了就反转一次，这样的解决方式的逻辑基础是：<br>只要某个节点的两个子节点是反转好的，那么反转这两个子节点即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> invertTree(root.left);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> invertTree(root.right);</span><br><span class="line">        root.left = right;</span><br><span class="line">        root.right = left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="二叉树节点最近祖先"><a href="#二叉树节点最近祖先" class="headerlink" title="二叉树节点最近祖先"></a>二叉树节点最近祖先</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-05%2017.57.51.png" alt="截屏2022-07-05 17.57.51" style="zoom:50%;" />





<p><strong>非递归方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.val &lt; cur.val &amp;&amp; q.val &lt; cur.val) &#123;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (p.val &gt; cur.val &amp;&amp; q.val &gt; cur.val) &#123;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>递归方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.val &lt; root.val &amp;&amp; q.val &lt; root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.val &gt; root.val &amp;&amp; q.val &gt; root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="二叉树所有路径"><a href="#二叉树所有路径" class="headerlink" title="二叉树所有路径"></a>二叉树所有路径</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-13%2014.57.24.png" alt="截屏2022-07-13 14.57.24" style="zoom:50%;" />





<p><strong>深度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        dfs(root, path, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, String path, List&lt;String&gt; ans)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                path += root.val + <span class="string">&quot;&quot;</span>; <span class="comment">// 数字后面加一个空字符串即可完成数字与字符串的转换</span></span><br><span class="line">                ans.add(path);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                path += root.val + <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">                dfs(root.left, path, ans);</span><br><span class="line">                dfs(root.right, path, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="左叶子节点和"><a href="#左叶子节点和" class="headerlink" title="左叶子节点和"></a>左叶子节点和</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-13%2017.20.46.png" alt="截屏2022-07-13 17.20.46" style="zoom:50%;" />



<p><strong>深度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="literal">null</span> ? <span class="number">0</span> : process(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            ans += isLeafNode(root.left) ? root.left.val : process(root.left); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span> &amp;&amp; !isLeafNode(root.right)) &#123;</span><br><span class="line">            ans += process(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeafNode</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> root.left == <span class="literal">null</span> &amp;&amp; root .right == <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>深度优先还有一种一行解决的简便形式</strong><br>其实最后一段的处理值的代码放在左递归和右递归的什么位置都是可以的<br>也就是说处理代码其实并不影响递归进程，因为所有的处理代码只会执行一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumOfLeftLeaves(root.left) + </span><br><span class="line">        sumOfLeftLeaves(root.right) + </span><br><span class="line">        (root.left != <span class="literal">null</span> &amp;&amp; root.left.left == <span class="literal">null</span> &amp;&amp; root.left.right == <span class="literal">null</span> ?</span><br><span class="line">        root.left.val : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述代码的正常写法，用于体会递归</span></span><br><span class="line"><span class="comment">//class Solution &#123;</span></span><br><span class="line"><span class="comment">//     int sum = 0;</span></span><br><span class="line"><span class="comment">//     public int sumOfLeftLeaves(TreeNode root) &#123;</span></span><br><span class="line"><span class="comment">//         if (root == null) &#123;</span></span><br><span class="line"><span class="comment">//             return 0;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         dfs(root);</span></span><br><span class="line"><span class="comment">//         return sum;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     public void dfs(TreeNode root) &#123;</span></span><br><span class="line"><span class="comment">//         if (root == null) &#123;</span></span><br><span class="line"><span class="comment">//             return;</span></span><br><span class="line"><span class="comment">//         &#125; </span></span><br><span class="line"><span class="comment">//          if (root.left != null &amp;&amp; root.left.left == null &amp;&amp; root.left.right == null) &#123;</span></span><br><span class="line"><span class="comment">//             sum += root.left.val;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         sumOfLeftLeaves(root.left);</span></span><br><span class="line"><span class="comment">//         sumOfLeftLeaves(root.right);</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>









<h3 id="单值二叉树"><a href="#单值二叉树" class="headerlink" title="单值二叉树"></a>单值二叉树</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-26%2014.19.36.png" alt="截屏2022-07-26 14.19.36" style="zoom:50%;" />



<p><strong>简单易懂的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">preVal</span> <span class="operator">=</span> -<span class="number">999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnivalTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (preVal == -<span class="number">999</span>) &#123;</span><br><span class="line">            preVal = root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val != preVal) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isUnivalTree(root.left) &amp;&amp; isUnivalTree(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>传统深度优先遍历</strong><br>较为难懂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnivalTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val != root.left.val || !isUnivalTree(root.left)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val != root.right.val || !isUnivalTree(root.right)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="最大层内元素和"><a href="#最大层内元素和" class="headerlink" title="最大层内元素和"></a>最大层内元素和</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-31%2021.12.07.png" alt="截屏2022-07-31 21.12.07" style="zoom:50%;" />



<p><strong>广度优先</strong><br>广度优先一般使用队列Queue来实现，但是这里只是借用思想，并不一定需要使用队列，可以采用效率更高的链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxLevelSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>, maxSum = root.val;</span><br><span class="line">        List&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TreeNode&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">1</span>; !q.isEmpty(); ++level) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; nq = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TreeNode&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode node : q) &#123;</span><br><span class="line">                sum += node.val;</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    nq.add(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    nq.add(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; maxSum) &#123;</span><br><span class="line">                maxSum = sum;</span><br><span class="line">                ans = level;</span><br><span class="line">            &#125;</span><br><span class="line">            q = nq;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>深度优先</strong><br>在dfs的过程中，dfs(root.left, level + 1) 如果改成 level++ 或 ++level 会有问题，这个需要再仔细看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; visit = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxLevelSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; visit.size(); ++i) &#123;</span><br><span class="line">           <span class="keyword">if</span> (visit.get(i) &gt; visit.get(ans)) &#123;</span><br><span class="line">               ans = i;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (level == visit.size()) &#123; <span class="comment">// 注意list的索引从0开始</span></span><br><span class="line">            visit.add(root.val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            visit.set(level, visit.get(level) + root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            dfs(root.left, level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            dfs(root.right, level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="重建无重复值树"><a href="#重建无重复值树" class="headerlink" title="重建无重复值树"></a>重建无重复值树</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-04%2017.44.47.png" alt="截屏2022-08-04 17.44.47" style="zoom:50%;" />



<p><strong>递归法</strong><br>前序遍历的第一个节点是二叉树的根节点，而我们拿着这个值在中序遍历里面拿到根节点的index后可以知道，index左边的节点是左子树，index右边的节点是右子树，由此，递归思想就可以得到应用。而在确定下一层递归的左右子树在遍历数组中的下标时，我们需要在拿到左右子树的数目，这样即可完成边界的确定。<br>而为了快速确定根节点在中序遍历数组中的位置，我们可以借助Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; buidTreeMap;<span class="comment">//为了在inorder中定位根节点的位置所创建的map</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> preorder.length;</span><br><span class="line">        buidTreeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            buidTreeMap.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> </span><br><span class="line">            process(preorder, inorder, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder, </span></span><br><span class="line"><span class="params">        <span class="type">int</span> preorder_left, <span class="type">int</span> preorder_right, <span class="type">int</span> inorder_left, <span class="type">int</span> inorder_right)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (preorder_left &gt; preorder_right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得根节点的坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rootIndex</span> <span class="operator">=</span> preorder_left;</span><br><span class="line">         <span class="comment">//以先序遍历的第一个节点作为根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[rootIndex]);</span><br><span class="line">        <span class="comment">//在map中定位root节点在inorder中的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">inorderRootIndex</span> <span class="operator">=</span> buidTreeMap.get(preorder[rootIndex]);</span><br><span class="line">        <span class="comment">//得到左子树的数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSubTreeNums</span> <span class="operator">=</span> inorderRootIndex - inorder_left;</span><br><span class="line">        <span class="comment">//递归创建左子树</span></span><br><span class="line">        root.left = process(preorder, inorder, preorder_left + <span class="number">1</span>, </span><br><span class="line">            preorder_left + leftSubTreeNums, inorder_left, inorderRootIndex - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//递归创建右子树</span></span><br><span class="line">        root.right = process(preorder, inorder, leftSubTreeNums + preorder_left + <span class="number">1</span>, </span><br><span class="line">            preorder_right, inorderRootIndex + <span class="number">1</span>, inorder_right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>迭代法</strong><br>迭代法很巧妙，但是理解难度高，可暂时忽略（copy官方）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder == <span class="literal">null</span> || preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[<span class="number">0</span>]);</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">inorderIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; preorder.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">preorderVal</span> <span class="operator">=</span> preorder[i];</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (node.val != inorder[inorderIndex]) &#123;</span><br><span class="line">                node.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorderVal);</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek().val == inorder[inorderIndex]) &#123;</span><br><span class="line">                    node = stack.pop();</span><br><span class="line">                    inorderIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">                node.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorderVal);</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="在二叉树中加行"><a href="#在二叉树中加行" class="headerlink" title="在二叉树中加行"></a>在二叉树中加行</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-05%2015.09.24.png" alt="截屏2022-08-05 15.09.24" style="zoom:50%;" />



<p><strong>广度优先</strong><br>广度优先思路上比较简单，就是遍历到需要加行的上一层，将该层的所有节点的左右子节点全部换成以给定val为值的节点，这题在刚拿到手还有一个阻拦人的障碍点就是忽略了节点的构造方法，就是在构建新行的时候，可以直接将原行的左右节点加到构造方法里去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lass Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">addOneRow</span><span class="params">(TreeNode root, <span class="type">int</span> val, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val, root, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;TreeNode&gt; curLevel = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        curLevel.add(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; depth - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; temp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (TreeNode cur : curLevel) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    temp.add(cur.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    temp.add(cur.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curLevel = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (TreeNode cur : curLevel) &#123;</span><br><span class="line">            cur.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val, cur.left, <span class="literal">null</span>);</span><br><span class="line">            cur.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val, <span class="literal">null</span>, cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>深度优先遍历</strong><br>代码更加优雅，但是可能需要广度优先的铺垫才能看懂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">addOneRow</span><span class="params">(TreeNode root, <span class="type">int</span> val, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (depth == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val, root, <span class="literal">null</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (depth == <span class="number">2</span>) &#123;</span><br><span class="line">           root.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val, root.left, <span class="literal">null</span>);</span><br><span class="line">           root.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val, <span class="literal">null</span>, root.right);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           addOneRow(root.left, val, depth - <span class="number">1</span>);</span><br><span class="line">           addOneRow(root.right, val, depth -<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="层数最深叶子和"><a href="#层数最深叶子和" class="headerlink" title="层数最深叶子和"></a>层数最深叶子和</h3><blockquote>
<p>给你一棵二叉树的根节点 <code>root</code> ，请你返回 <strong>层数最深的叶子节点的和</strong> 。</p>
<p><a href="https://leetcode.cn/problems/deepest-leaves-sum/">https://leetcode.cn/problems/deepest-leaves-sum/</a></p>
</blockquote>
<p><strong>广度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deepestLeavesSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            size = queue.size();</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                ans += temp.val;</span><br><span class="line">                <span class="keyword">if</span> (temp.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(temp.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (temp.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(temp.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>深度优先</strong></p>
<p>深度优先效率更高，击败百分百，是广度优先执行效率的六倍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLevel</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deepestLeavesSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       dfs(root, <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (level &gt; maxLevel) &#123;</span><br><span class="line">            maxLevel = level;</span><br><span class="line">            ans = root.val;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level == maxLevel) &#123;</span><br><span class="line">            ans += root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left, level + <span class="number">1</span>);</span><br><span class="line">        dfs(root.right, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="输出二叉树"><a href="#输出二叉树" class="headerlink" title="输出二叉树"></a>输出二叉树</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-22%2011.09.24.png" alt="截屏2022-08-22 11.09.24" style="zoom:50%;" />



<p><strong>深度优先</strong></p>
<p>基本思路是先写一个方法拿到高度，然后再深度优先调用，传递的参数是行，以及每一行应该存放的位置，不断递归就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">printTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> getDepth(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowNums</span> <span class="operator">=</span> height + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">colNnums</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (height + <span class="number">1</span>)) - <span class="number">1</span>;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rowNums; i++) &#123;</span><br><span class="line">            List&lt;String&gt; row = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; colNnums; j++) &#123;</span><br><span class="line">                row.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(res, root, <span class="number">0</span>, (colNnums - <span class="number">1</span>) / <span class="number">2</span>, height);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDepth</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            h = Math.max(h, getDepth(node.left) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            h = Math.max(h, getDepth(node.right) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, TreeNode root,  </span></span><br><span class="line"><span class="params">                            <span class="type">int</span> row, <span class="type">int</span> location, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        res.get(row).set(location, Integer.toString(root.val));</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            dfs(res, root.left, row + <span class="number">1</span>, location - (<span class="number">1</span>&lt;&lt;(height - row - <span class="number">1</span>)), height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            dfs(res, root.right, row + <span class="number">1</span>, location +(<span class="number">1</span>&lt;&lt;(height - row - <span class="number">1</span>)), height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>广度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;   </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Tuple</span> &#123; </span><br><span class="line">        TreeNode node;</span><br><span class="line">        <span class="type">int</span> row;</span><br><span class="line">        <span class="type">int</span> loac;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Tuple</span><span class="params">(TreeNode node, <span class="type">int</span> row, <span class="type">int</span> loac)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.node = node;</span><br><span class="line">            <span class="built_in">this</span>.row = row;</span><br><span class="line">            <span class="built_in">this</span>.loac = loac;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">printTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> getDepth(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowNums</span> <span class="operator">=</span> height + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">colNnums</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (height + <span class="number">1</span>)) - <span class="number">1</span>;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rowNums; i++) &#123;</span><br><span class="line">            List&lt;String&gt; row = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; colNnums; j++) &#123;</span><br><span class="line">                row.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Tuple&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">Tuple</span>(root, <span class="number">0</span>, (colNnums - <span class="number">1</span>) / <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Tuple</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> temp.node;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> temp.row;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> temp.loac;</span><br><span class="line">            res.get(r).set(c, Integer.toString(node.val));</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">Tuple</span>(node.left,r+<span class="number">1</span>,c-(<span class="number">1</span>&lt;&lt;(height-r-<span class="number">1</span>))));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">Tuple</span>(node.right,r+<span class="number">1</span>,c+(<span class="number">1</span>&lt;&lt;(height-r-<span class="number">1</span>))));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDepth</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.offer(node);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            h++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (temp.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(temp.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (temp.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(temp.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="二叉树最大宽度"><a href="#二叉树最大宽度" class="headerlink" title="二叉树最大宽度"></a>二叉树最大宽度</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-22%2014.33.11.png" alt="截屏2022-08-22 14.33.11" style="zoom:50%;" />





<p><strong>宽度优先遍历</strong></p>
<p>主要思路是：先声明一个类，将节点、节点在二叉树中的深度以及其在每一层的位置封装起来，创建一个队列来遍历二叉树，每次遍历时判断，如果这个节点的深度和当前深度不同，且其node不为空，说明来到了下一层的第一个非空节点，将其设置为最左边的节点，之后不断判断剩下的节点和最左节点的位置差是否大于ans</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">PackNode</span> &#123;</span><br><span class="line">        TreeNode node;</span><br><span class="line">        <span class="type">int</span> depth;</span><br><span class="line">        <span class="type">int</span> loac;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">PackNode</span><span class="params">(TreeNode node, <span class="type">int</span> depth, <span class="type">int</span> loac)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.node = node;</span><br><span class="line">            <span class="built_in">this</span>.depth = depth;</span><br><span class="line">            <span class="built_in">this</span>.loac = loac;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;PackNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">PackNode</span>(root, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">curDepth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">PackNode</span> <span class="variable">p</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (p.node != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(<span class="keyword">new</span> <span class="title class_">PackNode</span>(p.node.left, p.depth + <span class="number">1</span>, p.loac * <span class="number">2</span>));</span><br><span class="line">                queue.add(<span class="keyword">new</span> <span class="title class_">PackNode</span>(p.node.right, p.depth + <span class="number">1</span>, p.loac * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (curDepth != p.depth) &#123;</span><br><span class="line">                    curDepth = p.depth;</span><br><span class="line">                    left = p.loac;</span><br><span class="line">                &#125;</span><br><span class="line">                ans = Math.max(ans, p.loac - left + <span class="number">1</span>);            </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>深度优先遍历</strong></p>
<p>效率不如宽度优先，但是很优雅</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    Map&lt;Integer, Integer&gt; left;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        left = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        dfs(root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, <span class="type">int</span> depth, <span class="type">int</span> loac)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left.computeIfAbsent(depth, x -&gt; loac);</span><br><span class="line">        ans = Math.max(ans, loac - left.get(depth) + <span class="number">1</span>);</span><br><span class="line">        dfs(node.left, depth + <span class="number">1</span>, loac * <span class="number">2</span>);</span><br><span class="line">        dfs(node.right, depth + <span class="number">1</span>, loac * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="构造二叉树"><a href="#构造二叉树" class="headerlink" title="构造二叉树"></a>构造二叉树</h2><h3 id="前序-中序构造二叉树"><a href="#前序-中序构造二叉树" class="headerlink" title="前序 + 中序构造二叉树"></a>前序 + 中序构造二叉树</h3><blockquote>
<p>给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中 <code>preorder</code>是二叉树的<strong>先序遍历</strong>， <code>inorder</code> 是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p>
<p>LeetCode(105) hot 100</p>
</blockquote>
<p><strong>递归 中序遍历</strong></p>
<p>这里还能有一个优化的点，但是思维难度比较高，省略了，有时间去收藏的题解里面看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; indexMap; </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造中序遍历的索引 map，这样通过前序遍历的根节点值去拿坐标更快</span></span><br><span class="line">        indexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> inorder.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            indexMap.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> buildingTree(preorder, inorder, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后面四个参数的含义是：左子树或右子树在前序和中序遍历的范围分布</span></span><br><span class="line">    <span class="comment">// 通过这个范围可以确定根节点的位置并递归确定二叉树结构</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildingTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder, </span></span><br><span class="line"><span class="params">        <span class="type">int</span> pre_left, <span class="type">int</span> pre_right, <span class="type">int</span> in_left, <span class="type">int</span> in_right)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (pre_left &gt; pre_right) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="comment">// 先序遍历的第一个节点是根节点</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">preorder_root</span> <span class="operator">=</span> pre_left;</span><br><span class="line">           <span class="comment">// 构造当前根节点</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">inorder_root</span> <span class="operator">=</span> indexMap.get(preorder[preorder_root]);</span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[preorder_root]);</span><br><span class="line">           <span class="comment">// 通过 inorder 可以拿到左子树的节点个数</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">countLeft</span> <span class="operator">=</span> inorder_root - in_left;</span><br><span class="line">           <span class="comment">// 再通过先序遍历以及左子树节点数可以确定左子树的节点范围</span></span><br><span class="line">           root.left = buildingTree(preorder, inorder, </span><br><span class="line">           pre_left + <span class="number">1</span>, pre_left + countLeft, in_left, inorder_root - <span class="number">1</span>);</span><br><span class="line">           root.right = buildingTree(preorder, inorder,</span><br><span class="line">           pre_left + countLeft + <span class="number">1</span>, pre_right, inorder_root + <span class="number">1</span>, in_right);</span><br><span class="line">           <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>迭代</strong></p>
<p>很巧妙，有空看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 二叉树应用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 节点与祖先之间的最大差值</span><br><span class="line"></span><br><span class="line">&gt; 给定二叉树的根节点 `root`，找出存在于 **不同** 节点 `A` 和 `B` 之间的最大值 `V`，其中 `V = |A.val - B.val|`，且 `A` 是 `B` 的祖先。</span><br><span class="line">&gt;</span><br><span class="line">&gt; （如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）</span><br><span class="line">&gt;</span><br><span class="line">&gt; LeetCode <span class="number">1026</span> </span><br><span class="line"></span><br><span class="line">**深度优先**</span><br><span class="line"></span><br><span class="line">这道题的思路是在遍历的时候维护祖先的最大值与最小值，然后每次计算当前节点与最大值与最小值的差，将最大的返回即可，思路比较简单，但是有一个点会困扰我很久，就是维护的最大值最小值一定是当前节点的祖先吗？</span><br><span class="line">仔细想想后发现这个问题的答案是肯定的，这个问题不能从纸面上的遍历顺序去考虑，应该从递归的顺序去考虑，当我们遍历到叶子节点时会回退的，min 和 max 会回到之前的值，唯一可以返回的只是函数的返回值</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxAncestorDiff</span><span class="params">(TreeNode root)</span> &#123;    </span><br><span class="line">        <span class="keyword">return</span> dfs(root, root.val, root.val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, <span class="type">int</span> min, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125; </span><br><span class="line">       <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> Math.max(Math.abs(node.val - min), Math.abs(node.val - max));</span><br><span class="line">       min = Math.min(min, node.val);</span><br><span class="line">       max = Math.max(max, node.val);</span><br><span class="line">       diff = Math.max(diff, dfs(node.left, min, max));</span><br><span class="line">       diff = Math.max(diff, dfs(node.right, min, max));</span><br><span class="line">       <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="序列化、反序列化"><a href="#序列化、反序列化" class="headerlink" title="序列化、反序列化"></a>序列化、反序列化</h3><blockquote>
<p>二叉树的序列化和反序列化就是内存里的一棵树如何变成字符串形式，又如何从字符串形式变成内存里的一棵树</p>
<p>序列化分为先序、中序和后序，以#表示空节点，以下划线作为一个节点的结束</p>
</blockquote>
<p><strong>先序序列化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serialByPre</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;#_&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> head.value + <span class="string">&quot;_&quot;</span>;</span><br><span class="line">       res += serialByPre(head.left);</span><br><span class="line">       res += serialByPre(head.right);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>反序列化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">reconByPreString</span><span class="params">(String preStr)</span> &#123;</span><br><span class="line">        String[] values = preStr.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            queue.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reconPreOrder(queue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">reconPreOrder</span><span class="params">(Queue&lt;String&gt; queue)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Integer.valueOf(value));</span><br><span class="line">        node.left = reconPreOrder(queue);</span><br><span class="line">        node.right = reconPreOrder(queue);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="凹折痕、凸折痕"><a href="#凹折痕、凸折痕" class="headerlink" title="凹折痕、凸折痕"></a>凹折痕、凸折痕</h3><blockquote>
<p>微软原题：一个长方形的纸条，从中间对折一次，会出现一个折痕，这个折痕是凹下去的，继续对半折，会出现新的折痕，有凹凸之分，现给定N为对半折的次数，要求输出纸条从上到下的凹凸折痕情况。</p>
<p>解析：自己拿一个纸条做实验，每次对折之后在折痕上划线写上编号以及凹凸，最后会发现这是一个二叉树形式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAllFolds</span><span class="params">(<span class="type">int</span> N)</span> &#123;</span><br><span class="line">printProcess(<span class="number">1</span>, N, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// i:节点的层数，N：一共要折的层数，down == true：凹，down == false：true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printProcess</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> N, <span class="type">boolean</span> down)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; N) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printProcess(i + <span class="number">1</span>, N, <span class="literal">true</span>);</span><br><span class="line">        System.out.println(down ? <span class="string">&quot;凹&quot;</span> : <span class="string">&quot;凸&quot;</span>);</span><br><span class="line">        printProcess(i + <span class="number">1</span>, N, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>











<h3 id="最大二叉树"><a href="#最大二叉树" class="headerlink" title="最大二叉树"></a>最大二叉树</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-20%2023.02.49.png" alt="截屏2022-08-20 23.02.49" style="zoom:50%;" />



<p><strong>递归</strong></p>
<p>注意：递归函数的base case 里必须是小于，否则会损失答案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> process(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">biggest</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">            biggest = nums[biggest] &gt; nums[i] ? biggest : i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[biggest]);</span><br><span class="line">        newHead.left = process(nums, left, biggest - <span class="number">1</span>);</span><br><span class="line">        newHead.right = process(nums, biggest + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>单调栈</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 树的子结构</span><br><span class="line"></span><br><span class="line">&gt; 输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</span><br><span class="line">&gt; B是A的子结构， 即 A中有出现和B相同的结构和节点值。</span><br><span class="line">&gt;</span><br><span class="line">&gt; https:<span class="comment">//leetcode.cn/problems/shu-de-zi-jie-gou-lcof/</span></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (A != <span class="literal">null</span> &amp;&amp; B != <span class="literal">null</span>) &amp;&amp; (recur( A, B) </span><br><span class="line">            || isSubStructure(A.left, B) || isSubStructure(A.right, B));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">recur</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (B == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="literal">null</span> || A.val != B.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> recur(A.left, B.left) &amp;&amp; recur(A.right, B.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="最大二叉树2"><a href="#最大二叉树2" class="headerlink" title="最大二叉树2"></a>最大二叉树2</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-30%2011.35.25.png" alt="截屏2022-08-30 11.35.25" style="zoom:50%;" />





<h3 id="最长同值路径"><a href="#最长同值路径" class="headerlink" title="最长同值路径"></a>最长同值路径</h3><blockquote>
<p>给定一个二叉树的 root ，返回 最长的路径的长度 ，这个路径中的 每个节点具有相同值 。 这条路径可以经过也可以不经过根节点。两个节点之间的路径长度 由它们之间的边数表示。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/longest-univalue-path">https://leetcode.cn/problems/longest-univalue-path</a></p>
</blockquote>
<p><strong>深度优先</strong></p>
<p>一般二叉树找各种最值是需要做一个缓存来存储当前最值的，可能是数组链表，也可能是一个变量即可，这里明显只需要一个变量res<br>然后采用深度优先搜索，将问题分治为：当前node的左节点的最长同值路径与右节点的最长同值路径比较，且左右节点值与根节点值做比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestUnivaluePath</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> dfs(node.left), right = dfs(node.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left1</span> <span class="operator">=</span> <span class="number">0</span>, right1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.val == node.left.val) &#123;</span><br><span class="line">            left1 = left + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span> &amp;&amp; node.val == node.right.val) &#123;</span><br><span class="line">            right1 = right + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, left1 + right1);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left1, right1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="二叉树序列化"><a href="#二叉树序列化" class="headerlink" title="二叉树序列化"></a>二叉树序列化</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-05%2011.26.22.png" alt="截屏2022-09-05 11.26.22"  />



<p><strong>深度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rserialize(root, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        String[] dataArray = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        List&lt;String&gt; dataList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;(Arrays.asList(dataArray));</span><br><span class="line">        <span class="keyword">return</span> rdeserialize(dataList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">rserialize</span><span class="params">(TreeNode root, String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            str += <span class="string">&quot;None,&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str += str.valueOf(root.val) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            str = rserialize(root.left, str);</span><br><span class="line">            str = rserialize(root.right, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">rdeserialize</span><span class="params">(List&lt;String&gt; dataList)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataList.get(<span class="number">0</span>).equals(<span class="string">&quot;None&quot;</span>)) &#123;</span><br><span class="line">            dataList.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.valueOf(dataList.get(<span class="number">0</span>)));</span><br><span class="line">        dataList.remove(<span class="number">0</span>);</span><br><span class="line">        root.left = rdeserialize(dataList);</span><br><span class="line">        root.right = rdeserialize(dataList);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="寻找重复的子树"><a href="#寻找重复的子树" class="headerlink" title="寻找重复的子树"></a>寻找重复的子树</h3><blockquote>
<p>给定一棵二叉树 root，返回所有重复的子树。<br>对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。<br>如果两棵树具有相同的结构和相同的结点值，则它们是重复的。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/find-duplicate-subtrees">https://leetcode.cn/problems/find-duplicate-subtrees</a></p>
</blockquote>
<p><strong>哈希映射+序列化</strong></p>
<p>将每个节点的子树序列化成字符串加到哈希表中，再用一个HashSet判断是否重复</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 记录每个节点的字节点序列化值</span></span><br><span class="line">    Map&lt;String, TreeNode&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 记录重复序列化的根节点</span></span><br><span class="line">    Set&lt;TreeNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">findDuplicateSubtrees</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TreeNode&gt;(set);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dfs</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 逗号用来分割根节点和左右节点，不然难以区分</span></span><br><span class="line">        sb.append(node.val).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        sb.append(dfs(node.left));</span><br><span class="line">        sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        sb.append(dfs(node.right));</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(str)) &#123;</span><br><span class="line">            set.add(map.get(str));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(str, node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>三元组唯一表示</strong></p>
<p>方法一很明显的缺点是，二叉树足够大时序列化产生的字符串会很长很多，所以用三元组优化，三元组的组成是：根节点的值，左右子树的序列，这个序列是不同结构子树的序号，序号相同即表示左右子树结构相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 记录每个节点的字节点序列化值</span></span><br><span class="line">    Map&lt;String, Pair&lt;TreeNode, Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 记录重复序列化的根节点</span></span><br><span class="line">    Set&lt;TreeNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">findDuplicateSubtrees</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TreeNode&gt;(set);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] tri = &#123;node.val, dfs(node.left), dfs(node.right)&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> Arrays.toString(tri);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(hash)) &#123;</span><br><span class="line">            Pair&lt;TreeNode, Integer&gt; pair = map.get(hash);</span><br><span class="line">            set.add(pair.getKey());</span><br><span class="line">            <span class="keyword">return</span> pair.getValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(hash, <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;TreeNode, Integer&gt;(node, ++idx));</span><br><span class="line">            <span class="keyword">return</span> idx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="计算布尔二叉树"><a href="#计算布尔二叉树" class="headerlink" title="计算布尔二叉树"></a>计算布尔二叉树</h3><blockquote>
<p>给你一棵 <strong>完整二叉树</strong> 的根，这棵树有以下特征：</p>
<ul>
<li><strong>叶子节点</strong> 要么值为 <code>0</code> 要么值为 <code>1</code> ，其中 <code>0</code> 表示 <code>False</code> ，<code>1</code> 表示 <code>True</code> 。</li>
<li><strong>非叶子节点</strong> 要么值为 <code>2</code> 要么值为 <code>3</code> ，其中 <code>2</code> 表示逻辑或 <code>OR</code>，<code>3</code> 表示逻辑与 <code>AND</code> 。</li>
</ul>
<p><strong>计算</strong> 一个节点的值方式如下：</p>
<ul>
<li>如果节点是个叶子节点，那么节点的 <strong>值</strong> 为它本身，即 <code>True</code> 或者 <code>False</code> 。</li>
<li>否则，<strong>计算</strong> 两个孩子的节点值，然后将该节点的运算符对两个孩子值进行 <strong>运算</strong> 。</li>
</ul>
<p>返回根节点 <code>root</code> 的布尔运算值。</p>
<p><strong>完整二叉树</strong> 是每个节点有 <code>0</code> 个或者 <code>2</code> 个孩子的二叉树。</p>
<p><strong>叶子节点</strong> 是没有孩子的节点。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">evaluateTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.val == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> evaluateTree(root.left) || evaluateTree(root.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> evaluateTree(root.left) &amp;&amp; evaluateTree(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























<h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><blockquote>
<p>前缀树主要针对字符串，能够查询是否存在某一个字符串并且能查询以某一子串为前缀的字符串个数</p>
<p>将某单个字符放在节点与节点的边上，这样从根节点走到叶子节点就是一个字符串</p>
<p>其中在字符种类多的情况喜爱可以用哈希表来代替数组 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrieT</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前缀树节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> pass; <span class="comment">//表示此节点到达过多少次</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> end; <span class="comment">// 表示此节点是否是一个字符串的结尾节点</span></span><br><span class="line">        <span class="keyword">public</span> TrieNode[] nexts; <span class="comment">// HashMap&lt;Char, Node&gt; nexts</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> &#123;</span><br><span class="line">           pass = <span class="number">0</span>;</span><br><span class="line">           end = <span class="number">0</span>;</span><br><span class="line">           <span class="comment">//nexts[0] == 0 :没有走向a的路</span></span><br><span class="line">           <span class="comment">//nexts[1] != 0 :有走向a的路</span></span><br><span class="line">           <span class="comment">//nexts[25] != 0 ：有走向z的路</span></span><br><span class="line">           nexts = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前缀树类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span>[] chs = word.toCharArray();</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">            node.pass++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录每个字符在nexts数组中的下标</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">                index = chs[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.nexts[index] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">                node.pass++;</span><br><span class="line">            &#125;</span><br><span class="line">            node.end++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询单词加入过几次</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searcchCount</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span>[] chs = word.toCharArray();</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">                index = chs[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询所有的字符串中有多少个是以pre这个字符串作为前缀的</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">prefixNum</span><span class="params">(String pre)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span>[] chs = pre.toCharArray();</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">                index = chs[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.pass;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除一个字符串的存储信息</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (searcchCount(word) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">char</span>[] chs = word.toCharArray();</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">                node.pass--;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">                    index = chs[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (--node.nexts[index].pass == <span class="number">0</span>) &#123; <span class="comment">// 如果一个节点的pass都是0了，那就释放掉，没用了</span></span><br><span class="line">                        node.nexts[index] = <span class="literal">null</span>; <span class="comment">//只有java可以这么写，因为有gc机制</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    node = node.nexts[index];</span><br><span class="line">                &#125;</span><br><span class="line">                node.end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="单词替换"><a href="#单词替换" class="headerlink" title="单词替换"></a>单词替换</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-07%2023.59.25.png" alt="截屏2022-07-07 23.59.25" style="zoom:50%;" />

















<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h3 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h3><blockquote>
<p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p>
<p><strong>有效</strong> 二叉搜索树定义如下：</p>
<ul>
<li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li>
<li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li>
<li>所有左子树和右子树自身必须也是二叉搜索树。</li>
</ul>
<p>LeetCode (98) hot 100</p>
</blockquote>
<p><strong>递归</strong></p>
<p>每次向下递归一个范围，判断当前节点在不在范围内<br>用 long 没有特殊的，只是测试用例里面有 Integer，这样会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isValid(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(TreeNode node, <span class="type">long</span> lower, <span class="type">long</span> upper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.val &lt;= lower || node.val &gt;= upper) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValid(node.left, lower, node.val) &amp;&amp; isValid(node.right, node.val, upper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>中序遍历</strong></p>
<p>二叉搜索树的一个重要特性就是中序遍历是一个升序的序列，所以我们只需在中序遍历的时候判断当前节点是否大于之前的一个节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">double</span> <span class="variable">pre</span> <span class="operator">=</span> -Double.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; </span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (root.val &lt;= pre) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            pre = root.val;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="二叉搜索树众数"><a href="#二叉搜索树众数" class="headerlink" title="二叉搜索树众数"></a>二叉搜索树众数</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-14%2011.30.15.png" alt="截屏2022-07-14 11.30.15" style="zoom:50%;" />



<p><strong>中序遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; asc = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(); <span class="comment">//用来记录截止到目前的出现频率最高的的节点们</span></span><br><span class="line">    <span class="type">int</span> curNum; <span class="comment">// 当前遍历到的节点</span></span><br><span class="line">    <span class="type">int</span> count; <span class="comment">// 遍历到的节点的出现次数</span></span><br><span class="line">    <span class="type">int</span> maxCount; <span class="comment">// asc中的出现频率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[asc.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; asc.size(); ++i) &#123;</span><br><span class="line">            answer[i] = asc.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        update(root.val);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 更新asc的函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (val == curNum) &#123; </span><br><span class="line">          <span class="comment">// 判断当前遍历到的节点和之前遍历到的节点值是不是一样的</span></span><br><span class="line">          <span class="comment">//因为一样的肯定是在相同的区间内</span></span><br><span class="line">            ++count; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不一样就用两个变量来存放当前值以及重置的出现次数</span></span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">            curNum = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == maxCount) &#123;</span><br><span class="line">            asc.add(curNum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; maxCount) &#123;</span><br><span class="line">            maxCount = count;</span><br><span class="line">            asc.clear();</span><br><span class="line">            asc.add(curNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>Morris中序遍历</strong><br>需要修改树的结构</p>
<h3 id="搜索树最小绝对差"><a href="#搜索树最小绝对差" class="headerlink" title="搜索树最小绝对差"></a>搜索树最小绝对差</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-26%2014.51.47.png" alt="截屏2022-07-26 14.51.47" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    <span class="type">int</span> preVal;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ans = Integer.MAX_VALUE;</span><br><span class="line">        preVal = -<span class="number">999</span>;</span><br><span class="line">        process(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        process(root.left);</span><br><span class="line">        <span class="keyword">if</span> (preVal == -<span class="number">999</span>) &#123;</span><br><span class="line">            preVal = root.val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = Math.min(ans, root.val - preVal);</span><br><span class="line">            preVal = root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        process(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="判断BST后序序列"><a href="#判断BST后序序列" class="headerlink" title="判断BST后序序列"></a>判断BST后序序列</h3><blockquote>
<p>力扣：<a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/</a></p>
<p>题目描述：<br>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 <code>true</code>，否则返回 <code>false</code>。假设输入的数组的任意两个数字都互不相同。</p>
</blockquote>
<p><strong>递归法</strong></p>
<p>Base case：当递归传入的左节点index大于或等于右节点的index下标，说明此时的递归只剩下最后一个节点，那就没必要判断了，直接返回true。<br>接下来通过两个 while 循环来找到第一个大于根节点的节点以及第一个不大于根节点的节点，用来分开左子树与右子树，以进行下一次递归。<br>在最后判断此树是不是二叉搜索树的后序遍历时，先看第一个不大于根节点的节点和传入的右节点的下标是否相同，并且总体返回的值还取决于左子树的情况以及右子树的情况，所以将三种情况相与。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifyPostorder</span><span class="params">(<span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> process(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] postorder, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="keyword">while</span> (postorder[p] &lt; postorder[r]) p++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lnew</span> <span class="operator">=</span> p;</span><br><span class="line">        <span class="keyword">while</span> (postorder[p] &gt; postorder[r]) p++;</span><br><span class="line">        <span class="keyword">return</span> p == r </span><br><span class="line">            &amp;&amp; process(postorder, l, lnew - <span class="number">1</span>) &amp;&amp; process(postorder, lnew, r - <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>辅助单调栈</strong></p>
<p>主要利用了后序遍历的逆序列是前序遍历的“镜像”这一特点，很新颖，但效率不高，知道就好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifyPostorder</span><span class="params">(<span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">root</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> postorder.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(postorder[i] &gt; root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek() &gt; postorder[i])</span><br><span class="line">            	root = stack.pop();</span><br><span class="line">            stack.add(postorder[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="修剪二叉搜索树"><a href="#修剪二叉搜索树" class="headerlink" title="修剪二叉搜索树"></a>修剪二叉搜索树</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-10%2023.18.07.png" alt="截屏2022-09-10 23.18.07" style="zoom:50%;" />





<p><strong>深度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; high) &#123;</span><br><span class="line">            <span class="keyword">return</span> trimBST(root.left, low, high);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; low) &#123;</span><br><span class="line">            <span class="keyword">return</span> trimBST(root.right, low, high);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.left = trimBST(root.left, low, high);</span><br><span class="line">            root.right = trimBST(root.right, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>迭代</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (root != <span class="literal">null</span> &amp;&amp; (root.val &lt; low || root.val &gt; high)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (root.val &lt; low) &#123;</span><br><span class="line">               root = root.right;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               root = root.left;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root; node.left != <span class="literal">null</span>; ) &#123;</span><br><span class="line">           <span class="keyword">if</span> (node.left.val &lt; low) &#123;</span><br><span class="line">               node.left = node.left.right;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               node = node.left;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root; node.right != <span class="literal">null</span>;) &#123;</span><br><span class="line">           <span class="keyword">if</span> (node.right.val &gt; high) &#123;</span><br><span class="line">               node.right = node.right.left;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               node = node.right;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>















<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="重叠矩形面积"><a href="#重叠矩形面积" class="headerlink" title="重叠矩形面积"></a>重叠矩形面积</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-17%2023.55.05.png" alt="截屏2022-09-17 23.55.05" style="zoom:50%;" />

































<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><hr>
<h2 id="图的表达"><a href="#图的表达" class="headerlink" title="图的表达"></a>图的表达</h2><blockquote>
<p>图的表达有很多种方式，最常用的也是最万能的两个方法：</p>
<ul>
<li>临接表</li>
<li>临接矩阵</li>
</ul>
<p>此外还有很多特殊表达，比如对于一个没有环且有向上的节点的图，可以用数据来表示，每个数组元素表示其父节点<br>还有比如一个二维数组，N行3列，第一列表示某一个边的权值，第二列第三列表示其连接的两个节点</p>
<p>所以图的学习方式是用一种存储方式去解决所有算法，效率最高</p>
</blockquote>
<h3 id="表达代码"><a href="#表达代码" class="headerlink" title="表达代码"></a>表达代码</h3><blockquote>
<p>在图的结构里用hashmap存点集和边集</p>
<p>这个结构比较完善，基本支持所有的常规图算法，如果其中某些字段没用到，不填即可</p>
</blockquote>
<p><strong>图Graph</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, Node&gt; nodes;</span><br><span class="line">    <span class="keyword">public</span> HashSet&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(HashMap&lt;Integer, Node&gt; nodes, HashSet&lt;Edge&gt; edges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodes = nodes;</span><br><span class="line">        <span class="built_in">this</span>.edges = edges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>点集Nodes</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> in; <span class="comment">// 一个点的入度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> out; <span class="comment">// 一个点的出度</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; nexts; <span class="comment">// 由这个点发散出去的直接邻居的点集</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Edge&gt; edges; <span class="comment">// 由这个点出去的边</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        in = <span class="number">0</span>;</span><br><span class="line">        out = <span class="number">0</span>;</span><br><span class="line">        nexts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Edge&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>边集Edge</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weight; <span class="comment">//这个边的权值</span></span><br><span class="line">    <span class="keyword">public</span> Node from;</span><br><span class="line">    <span class="keyword">public</span> Node to;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> weight, Node from, Node to)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        <span class="built_in">this</span>.from = from;</span><br><span class="line">        <span class="built_in">this</span>.to = to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="不同表达的转换"><a href="#不同表达的转换" class="headerlink" title="不同表达的转换"></a>不同表达的转换</h3><blockquote>
<p>若现在有一个N行3列的二维数组，第一列第二列表示from节点和to节点，第三列表示边的权重，现将这个二维数组的图的表达转换成我自己的表达</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Graph <span class="title function_">createGraph</span><span class="params">(Integer matrix[][])</span> &#123;</span><br><span class="line">       <span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">from</span> <span class="operator">=</span> matrix[i][<span class="number">0</span>];</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">to</span> <span class="operator">=</span> matrix[i][<span class="number">1</span>];</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">weight</span> <span class="operator">=</span> matrix[i][<span class="number">2</span>];</span><br><span class="line">           <span class="keyword">if</span> (!graph.nodes.containsKey(from)) &#123;</span><br><span class="line">               graph.nodes.put(from, <span class="keyword">new</span> <span class="title class_">Node</span>(from));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!graph.nodes.containsKey(to)) &#123;</span><br><span class="line">               graph.nodes.put(to, <span class="keyword">new</span> <span class="title class_">Node</span>(to));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">Node</span> <span class="variable">fromNode</span> <span class="operator">=</span> graph.nodes.get(from);</span><br><span class="line">           <span class="type">Node</span> <span class="variable">toNode</span> <span class="operator">=</span> graph.nodes.get(to);</span><br><span class="line">           <span class="type">Edge</span> <span class="variable">newEdge</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Edge</span>(weight, fromNode, toNode);</span><br><span class="line">           fromNode.nexts.add(toNode);</span><br><span class="line">           fromNode.out++;</span><br><span class="line">           toNode.in++;</span><br><span class="line">           fromNode.edges.add(newEdge);</span><br><span class="line">           graph.edges.add(newEdge);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> graph;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>











<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="宽度优先遍历"><a href="#宽度优先遍历" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h3><blockquote>
<ol>
<li>优先访问与源节点相邻的节点</li>
<li>利用队列实现</li>
<li>从源节点开始依次按照宽度进入队列，然后弹出</li>
<li>每弹出一个点，把该节点所有没进过队列的临接点放入队列</li>
<li>直到队列变空</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从node出发，宽度优先遍历图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 这个set是为了判断某一个节点有没有被遍历过</span></span><br><span class="line">        queue.add(node);</span><br><span class="line">        set.add(node);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            System.out.println(cur.value);</span><br><span class="line">            <span class="keyword">for</span> (Node next : cur.nexts) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.contains(next)) &#123;</span><br><span class="line">                    set.add(next);</span><br><span class="line">                    queue.add(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









<h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><blockquote>
<ol>
<li>一直往下遍历节点</li>
<li>利用栈实现</li>
<li>从源节点开始把节点按深度放入栈，然后弹出</li>
<li>每弹出一个点，把该节点下一个没进过栈的临接点放入栈</li>
<li>直到栈变空</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从Node出发，深度优先遍历图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        stack.add(node);</span><br><span class="line">        set.add(node);</span><br><span class="line">        System.out.println(node.value);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">for</span> (Node next : cur.nexts) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.contains(next)) &#123;</span><br><span class="line">                    stack.push(cur);</span><br><span class="line">                    stack.push(next);</span><br><span class="line">                    set.add(next);</span><br><span class="line">                    System.out.println(next.value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>











<h2 id="图排序"><a href="#图排序" class="headerlink" title="图排序"></a>图排序</h2><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><blockquote>
<p>思想：每次找出入度为0的那个节点，遍历他的nexts，把与其相邻的节点入度减一再继续遍历找到入度为0的节点</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Node&gt; <span class="title function_">sortedTopology</span><span class="params">(Graph graph)</span> &#123;</span><br><span class="line">        <span class="comment">//key : 某一个Node，value：剩余的入度</span></span><br><span class="line">        HashMap&lt;Node, Integer&gt; inMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//入度为0的点进入这个队列</span></span><br><span class="line">        Queue&lt;Node&gt; zeroInQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历这个图的nodes集合，目的是把所有的nodes以及其入度加入到inMap中</span></span><br><span class="line">        <span class="comment">// 同时检查出第一个入度为0的节点并接入到0入度集合中</span></span><br><span class="line">        <span class="keyword">for</span> (Node node : graph.nodes.values()) &#123;</span><br><span class="line">            inMap.put(node, node.in);</span><br><span class="line">            <span class="keyword">if</span> (node.in == <span class="number">0</span>) &#123;</span><br><span class="line">                zeroInQueue.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这个数组用来接收最终的拓扑排序结果</span></span><br><span class="line">        List&lt;Node&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!zeroInQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//将0入度集合的第一个元素弹出，放入到result中</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> zeroInQueue.poll();</span><br><span class="line">            result.add(cur);</span><br><span class="line">            <span class="comment">//继续遍历弹出元素的nexts，将其next中的元素的入度减一再重新加入到inMap中</span></span><br><span class="line">            <span class="keyword">for</span> (Node next : cur.nexts) &#123;</span><br><span class="line">                inMap.put(next, inMap.get(next) - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//再继续找下一个入度为0的节点</span></span><br><span class="line">                <span class="keyword">if</span> (inMap.get(next) == <span class="number">0</span>) &#123;</span><br><span class="line">                    zeroInQueue.add(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><blockquote>
<p>从边的角度获得最小生成树，且针对无向图</p>
<p>所有的边中从权值最小的开始添加，每次添加的时候判断一下有没有环生成，有就不要，依次这样处理所有的边</p>
<p>所以问题就变成了如何判断树有无环，这里使用并查集来解决，一开始将所有的节点看成单独的集合，然后每当有两个集合需要连接就会判断这两个节点是否在同一个集合中，如果在，那么连接后就意味着有环，如果不在，连接后这两个节点的集合就合并</p>
<p>在此题中只会写一个小型并查集</p>
</blockquote>
<p><strong>写一个模拟并查集，说清楚底层原理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//并查集</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">mySets</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> HashMap&lt;Node, List&lt;Node&gt;&gt; setMap;</span><br><span class="line">       <span class="comment">//将所有的节点一开始加入到集合中</span></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">mySets</span><span class="params">(List&lt;Node&gt; nodes)</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node node : nodes) &#123;</span><br><span class="line">               ArrayList&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//每个节点所在的集合</span></span><br><span class="line">               set.add(node);</span><br><span class="line">               setMap.put(node, set);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断两个节点是不是处于同一个集合</span></span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameSet</span><span class="params">(Node from, Node to)</span> &#123;</span><br><span class="line">           List&lt;Node&gt; fromSet = setMap.get(from);</span><br><span class="line">           List&lt;Node&gt; toSet = setMap.get(to);</span><br><span class="line">           <span class="keyword">return</span> fromSet == toSet;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//将两个节点所在集合合并成一个集合</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(Node from, Node to)</span> &#123;</span><br><span class="line">           List&lt;Node&gt; fromSet = setMap.get(from);</span><br><span class="line">           List&lt;Node&gt; toSet = setMap.get(to);</span><br><span class="line">           <span class="keyword">for</span> (Node node : toSet) &#123;</span><br><span class="line">               fromSet.add(node);</span><br><span class="line">               setMap.put(node, fromSet);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>Kruskal</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title function_">kruskal</span><span class="params">(Graph graph)</span> &#123;</span><br><span class="line">        List&lt;Node&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node cur : graph.nodes.values()) &#123;</span><br><span class="line">            list.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">mySets</span> <span class="variable">mysets</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">mySets</span>(list); <span class="comment">//先将每个节点设置成单独的集合</span></span><br><span class="line">        <span class="comment">//创建一个堆，传入自己定义的比较器</span></span><br><span class="line">        PriorityQueue&lt;Edge&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">EdgeComparator</span>());</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : graph.edges) &#123;</span><br><span class="line">            priorityQueue.add(edge);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Edge&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!priorityQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> priorityQueue.poll();</span><br><span class="line">            <span class="keyword">if</span> (!mysets.isSameSet(edge.from, edge.to)) &#123;</span><br><span class="line">                result.add(edge);</span><br><span class="line">                mysets.union(edge.from, edge.to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><blockquote>
<p>适用于无向图</p>
<p>思想：从源节点开始，每次找到此节点的边中权值最低的然后将与其相邻的节点加入</p>
<p>Prim算法不同与Kruskal算法，不需要并查集结构，因为Prim是确定了一个集合然后每次将其他解节点拉入到这个集合当中，而Kruskal算法会涉及到不同的集合合并的问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title function_">primMST</span><span class="params">(Graph graph)</span> &#123;</span><br><span class="line">        <span class="comment">//将所有的边做成一个小根堆</span></span><br><span class="line">        PriorityQueue&lt;Edge&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">EdgeComparator</span>());</span><br><span class="line">        HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">//判断节点有无处理过</span></span><br><span class="line">        Set&lt;Edge&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">//依次挑选的边放在result里</span></span><br><span class="line">        <span class="keyword">for</span> (Node node : graph.nodes.values()) &#123; <span class="comment">//这个for循环是为了处理森林情况的,如果是连通图不用这个大for循环也可以</span></span><br><span class="line">            <span class="comment">//node是开始的点</span></span><br><span class="line">            <span class="keyword">if</span> (!set.contains(node)) &#123;</span><br><span class="line">                set.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Edge edge : node.edges) &#123; <span class="comment">//遍历这个点所有的相邻边</span></span><br><span class="line">                priorityQueue.add(edge);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!priorityQueue.isEmpty()) &#123;</span><br><span class="line">                <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> priorityQueue.poll();<span class="comment">//小根堆弹出时是以从小到大顺序弹出的</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">toNode</span> <span class="operator">=</span> edge.to;</span><br><span class="line">                <span class="keyword">if</span> (!set.contains(toNode)) &#123;</span><br><span class="line">                    set.add(toNode);</span><br><span class="line">                    result.add(edge);</span><br><span class="line">                    <span class="keyword">for</span> (Edge nextEdge : toNode.edges) &#123;</span><br><span class="line">                        priorityQueue.add(nextEdge);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h3><blockquote>
<p>单元最短路径算法，适用于没有负数权值的图</p>
<p>思路：Dijkstra算法必须指定一个源节点，然后可以找到这个源节点出发到所有节点的权值最小路径，然后维护一个数组，素组的元素是源节点出发到其他节点的最短距离，初始化源节点到自己的距离是0，到其他节点的距离是无穷，然后每次开始操作当下节点相邻边，看看此时的距离有没有比之前更加优化。每次确定好的距离可以加锁表示最终答案。</p>
<p>Dijkstra算法的改进：可以将distance存放在小根堆中，具体见9.2.1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Node, Integer&gt; <span class="title function_">dijkstra</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="comment">//key : 从head出发到达key</span></span><br><span class="line">        <span class="comment">//value：从head出发到达key的最小值</span></span><br><span class="line">        <span class="comment">//如果在表中没有t这个节点的信息，含义是从head到t的距离是正无穷</span></span><br><span class="line">        HashMap&lt;Node, Integer&gt; distanceMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        distanceMap.put(head, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//已经求过距离的节点存在selectedNodes，以后不碰</span></span><br><span class="line">        HashSet&lt;Node&gt; selectedNode = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">minNode</span> <span class="operator">=</span> getMinDIstanceAndUnselectedNodes(distanceMap, selectedNode);</span><br><span class="line">        <span class="keyword">while</span> (minNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> distanceMap.get(minNode);</span><br><span class="line">            <span class="keyword">for</span> (Edge edge : minNode.edges) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">toNode</span> <span class="operator">=</span> edge.to;</span><br><span class="line">                <span class="keyword">if</span> (!distanceMap.containsKey(toNode)) &#123;</span><br><span class="line">                    distanceMap.put(toNode, distance + edge.weight);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    distanceMap.put(edge.to, Math.min(distanceMap.get(toNode), distance + edge.weight));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                selectedNode.add(minNode); <span class="comment">//锁住处理好的节点</span></span><br><span class="line">                minNode = getMinDIstanceAndUnselectedNodes(distanceMap, selectedNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> distanceMap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">getMinDIstanceAndUnselectedNodes</span><span class="params">(</span></span><br><span class="line"><span class="params">            HashMap&lt;Node, Integer&gt; distanceMap,</span></span><br><span class="line"><span class="params">            HashSet&lt;Node&gt; touchedNodes</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">minNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minDistance</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Node, Integer&gt; entry : distanceMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!touchedNodes.contains(node) &amp;&amp; distance &lt; minDistance) &#123;</span><br><span class="line">                minNode = node;</span><br><span class="line">                minDistance = distance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>













<h2 id="图应用"><a href="#图应用" class="headerlink" title="图应用"></a>图应用</h2><h3 id="不邻接植花"><a href="#不邻接植花" class="headerlink" title="不邻接植花"></a>不邻接植花</h3><blockquote>
<p>有 <code>n</code> 个花园，按从 <code>1</code> 到 <code>n</code> 标记。另有数组 <code>paths</code> ，其中 <code>paths[i] = [xi, yi]</code> 描述了花园 <code>xi</code> 到花园 <code>yi</code> 的双向路径。在每个花园中，你打算种下四种花之一。</p>
<p>另外，所有花园 <strong>最多</strong> 有 <strong>3</strong> 条路径可以进入或离开.</p>
<p>你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。</p>
<p><em>以数组形式返回 <strong>任一</strong> 可行的方案作为答案 <code>answer</code>，其中 <code>answer[i]</code> 为在第 <code>(i+1)</code> 个花园中种植的花的种类。花的种类用  1、2、3、4 表示。保证存在答案。</em></p>
<p>LeetCode 1042</p>
</blockquote>
<p><strong>这道题比较容易，放在图应用的第一道题用来体会图的思想，主要也还是蕾丝广度优先遍历</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] gardenNoAdj(<span class="type">int</span> n, <span class="type">int</span>[][] paths) &#123;</span><br><span class="line">        List&lt;Integer&gt;[] adj = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] path : paths) &#123;</span><br><span class="line">            adj[path[<span class="number">0</span>] - <span class="number">1</span>].add(path[<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">            adj[path[<span class="number">1</span>] - <span class="number">1</span>].add(path[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span>[] colored = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> adjGardens : adj[i]) &#123;</span><br><span class="line">                colored[ans[adjGardens]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!colored[j]) &#123;</span><br><span class="line">                    ans[i] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="受限条件下可到达的节点数目"><a href="#受限条件下可到达的节点数目" class="headerlink" title="受限条件下可到达的节点数目"></a>受限条件下可到达的节点数目</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-12%2011.01.32.png" alt="截屏2022-08-12 11.01.32" style="zoom:50%;" />



<p><strong>BFS</strong></p>
<p>广度优先，主要思想是：建立链表数组来做邻接表，然后维护一个访问队列，这个访问队列的元素是一个两个元素的数组，第一个元素代表访问的是哪一个元素的邻接表，第二个元素代表上一个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reachableNodes</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span>[] restricted)</span> &#123;</span><br><span class="line">       <span class="comment">// 建立邻接表</span></span><br><span class="line">       List&lt;Integer&gt;[] connectedList = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           connectedList[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span>[] cur : edges) &#123;</span><br><span class="line">           connectedList[cur[<span class="number">0</span>]].add(cur[<span class="number">1</span>]);</span><br><span class="line">           connectedList[cur[<span class="number">1</span>]].add(cur[<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 建立被限制元素的索引表，可以做到o(1)内判断是否是限制元素</span></span><br><span class="line">       <span class="type">int</span>[] isRest = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">       Arrays.fill(isRest, -<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> cur : restricted) isRest[cur] = <span class="number">1</span>;</span><br><span class="line">       <span class="comment">// 广度优先搜索的关键是维护一个队列，将邻接表的元素按顺序加入</span></span><br><span class="line">       <span class="comment">//所以先做一个队列</span></span><br><span class="line">       Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//队列的数组元素含义是：</span></span><br><span class="line">       <span class="comment">//第一个是当前遍历到的节点值，用来获取该节点的临界数表</span></span><br><span class="line">       <span class="comment">//第二个是该节点上一个与之连接的节点，作用是防重复</span></span><br><span class="line">       queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;);</span><br><span class="line">       <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="comment">// 开始bfs</span></span><br><span class="line">       <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">           <span class="type">int</span>[] temp = queue.poll();</span><br><span class="line">           <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> temp[<span class="number">1</span>];</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> p : connectedList[temp[<span class="number">0</span>]]) &#123;</span><br><span class="line">               <span class="keyword">if</span> (isRest[p] != <span class="number">1</span> &amp;&amp; p != pre) &#123;</span><br><span class="line">                   ans++;</span><br><span class="line">                   queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;p, temp[<span class="number">0</span>]&#125;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>DFS</strong></p>
<p>深度优先：不用维护队列，用递归去完成遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    List&lt;Integer&gt;[] connectedList;</span><br><span class="line">    <span class="type">int</span>[] isRest;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reachableNodes</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span>[] restricted)</span> &#123;</span><br><span class="line">       <span class="comment">// 建立邻接表</span></span><br><span class="line">       connectedList = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           connectedList[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span>[] cur : edges) &#123;</span><br><span class="line">           connectedList[cur[<span class="number">0</span>]].add(cur[<span class="number">1</span>]);</span><br><span class="line">           connectedList[cur[<span class="number">1</span>]].add(cur[<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 建立被限制元素的索引表，可以做到o(1)内判断是否是限制元素</span></span><br><span class="line">       isRest = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">       Arrays.fill(isRest, -<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> cur : restricted) isRest[cur] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       dfs(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> node : connectedList[now]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node != pre &amp;&amp; isRest[node] != <span class="number">1</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                dfs(node, now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><blockquote>
<p>并查集主要就是对样本集合提供两个操作，一个是判断是否是同一个集合，一个是合并集合</p>
<p>但是传统数据结构没办法同时做到这两点，所以诞生了并查集</p>
<p>实现原理就是：给每一个样本集合封装一个顶部指针，一开始都指向自己，判断是否是同一个集合时就判断顶部指针是否相同即可，合并时就把元素较少的集合的指针挂在元素多的集合下</p>
<p>查找时并查集有一个小优化，就是将链状扁平化，即：假设现在有 a -&gt; b -&gt; c -&gt; e 的一个链，在找a的顶部节点时顺便把b、c的顶部节点指向e，这样就是扁平化优化</p>
</blockquote>
<h3 id="并查集模版"><a href="#并查集模版" class="headerlink" title="并查集模版"></a>并查集模版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] p = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"><span class="type">int</span>[] size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) &#123;</span><br><span class="line">        <span class="comment">// 路径压缩</span></span><br><span class="line">        p[x] = find(p[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pa</span> <span class="operator">=</span> find(a), pb = find(b);</span><br><span class="line">    <span class="keyword">if</span> (pa == pb) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p[pa] = pb;</span><br><span class="line">    size[pb] += size[pa];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="省份问题"><a href="#省份问题" class="headerlink" title="省份问题"></a>省份问题</h3><blockquote>
<p>有 <code>n</code> 个城市，其中一些彼此相连，另一些没有相连。如果城市 <code>a</code> 与城市 <code>b</code> 直接相连，且城市 <code>b</code> 与城市 <code>c</code> 直接相连，那么城市 <code>a</code> 与城市 <code>c</code> 间接相连。</p>
<p><strong>省份</strong> 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p>
<p>给你一个 <code>n x n</code> 的矩阵 <code>isConnected</code> ，其中 <code>isConnected[i][j] = 1</code> 表示第 <code>i</code> 个城市和第 <code>j</code> 个城市直接相连，而 <code>isConnected[i][j] = 0</code> 表示二者不直接相连。</p>
<p>返回矩阵中 <strong>省份</strong> 的数量。</p>
<p>LeetCode 547</p>
</blockquote>
<h3 id="岛问题"><a href="#岛问题" class="headerlink" title="岛问题"></a>岛问题</h3><blockquote>
<p>题目：<br>一个矩阵中只有0 和1两种值，每个位置都可以和自己的上、下、左、右四个位置相连，如果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛（斜着相连不算）</p>
<p>进阶：如何设计一个并行的算法解决这个问题？</p>
</blockquote>
<p><strong>常规</strong></p>
<p>常规算法就是广度优先</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countIslands</span><span class="params">(<span class="type">int</span>[][] m)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="literal">null</span> || m[<span class="number">0</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> m.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> m[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    infect(m, i, j, N, M);</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 感染过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">infect</span><span class="params">(<span class="type">int</span>[][] m, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> N, <span class="type">int</span> M)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N || j &lt; <span class="number">0</span> || j &gt;= M || m[i][j] != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m[i][j] = <span class="number">2</span>;</span><br><span class="line">        infect(m, i + <span class="number">1</span>, j, N, M);</span><br><span class="line">        infect(m, i - <span class="number">1</span>, j, N, M);</span><br><span class="line">        infect(m, i, j + <span class="number">1</span>, N, M);</span><br><span class="line">        infect(m, i, j - <span class="number">1</span>, N, M);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="最大人工岛"><a href="#最大人工岛" class="headerlink" title="最大人工岛"></a>最大人工岛</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-19%2000.05.36.png" alt="截屏2022-09-19 00.05.36" />





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 用来标记方向的静态数组，在遍历岛屿的四个方向时会用到</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] d = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length, res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录每个点的编号</span></span><br><span class="line">        <span class="type">int</span>[][] tag = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="comment">// 记录每个点所属的岛屿</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; area = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span> &amp;&amp; tag[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 给所有的陆地赋编号，属于同一片岛屿的点编号相同</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> i * n + j + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 放到岛屿标记中去，key是编号，value是相连的最大岛屿</span></span><br><span class="line">                    area.put(t, dfs(grid, i, j, tag, t));</span><br><span class="line">                    res = Math.max(res, area.get(t));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接下来进行人工岛操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                    Set&lt;Integer&gt; connected = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i + d[k], y = j + d[k + <span class="number">1</span>];</span><br><span class="line">                        <span class="comment">// 如果周围岛屿不符合规范或已经连过了，就继续下一次循环</span></span><br><span class="line">                        <span class="keyword">if</span> (!valid(n, x, y) || tag[x][y] == <span class="number">0</span> </span><br><span class="line">                        || connected.contains(tag[x][y])) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 获得新新人工岛的面积</span></span><br><span class="line">                        z += area.get(tag[x][y]);</span><br><span class="line">                        <span class="comment">// 将已经算过面积的岛屿的标志加入已连接集合</span></span><br><span class="line">                        connected.add(tag[x][y]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res = Math.max(res, z);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span>[][] tag, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length, res = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 将编号加入tag数组</span></span><br><span class="line">        tag[x][y] = t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 得到周围四个点的坐标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> x + d[i], y1 = y + d[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 如果周围的点坐标在n以内，且是个岛屿，且没被遍历过</span></span><br><span class="line">            <span class="keyword">if</span> (valid(n, x1, y1) &amp;&amp; grid[x1][y1] == <span class="number">1</span> &amp;&amp; tag[x1][y1] == <span class="number">0</span>) &#123;</span><br><span class="line">                res += dfs(grid, x1, y1, tag, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断点坐标是否合规</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h3 id="图中是否存在路径"><a href="#图中是否存在路径" class="headerlink" title="图中是否存在路径"></a>图中是否存在路径</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-12-19%2017.24.34.png" alt="截屏2022-12-19 17.24.34" style="zoom:50%;" />



<p><strong>广度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="comment">// 先建立各结点的下一结点队列</span></span><br><span class="line">        List&lt;Integer&gt;[] neighbor = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; neighbor.length; i++) &#123;</span><br><span class="line">            neighbor[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化下一结点队列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> edge[<span class="number">0</span>], to = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 由于题中说的是双向图，所以需要在 from 和 to 都加</span></span><br><span class="line">            neighbor[from].add(to);</span><br><span class="line">            neighbor[to].add(from);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接下来开始广度优先遍历这些结点列</span></span><br><span class="line">        <span class="comment">// 记录结点是否被访问过</span></span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="comment">// 广度队列</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.offer(source);</span><br><span class="line">        visited[source] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (node == destination) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> next : neighbor[node]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[next]) &#123;</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                    visited[next] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> visited[destination];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>深度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] neighbor = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; neighbor.length; i++) &#123;</span><br><span class="line">            neighbor[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> edge[<span class="number">0</span>], to = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 由于题中说的是双向图，所以需要在 from 和 to 都加</span></span><br><span class="line">            neighbor[from].add(to);</span><br><span class="line">            neighbor[to].add(from);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> visited[] = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="keyword">return</span> dfs(source, destination, neighbor, visited);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, List&lt;Integer&gt;[] neighbor,<span class="type">boolean</span> visited[])</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (source == destination) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[source] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> next : neighbor[source]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[next] &amp;&amp; dfs(next, destination, neighbor, visited)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>并查集</strong></p>
<p>我们将图中的每个强连通分量视为一个集合，强连通分量中任意两点均可达，如果两个点 source 和 destination 处在同一个强连通分量中，则两点一定可连通，因此连通性问题可以使用并查集解决。</p>
<p>并查集初始化时，nnn 个顶点分别属于 nnn 个不同的集合，每个集合只包含一个顶点。初始化之后遍历每条边，由于图中的每条边均为双向边，因此将同一条边连接的两个顶点所在的集合做合并。</p>
<p>遍历所有的边之后，判断顶点 source 和顶点 destination 是否在同一个集合中，如果两个顶点在同一个集合则两个顶点连通，如果两个顶点所在的集合不同则两个顶点不连通</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == destination) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            uf.uni(edge[<span class="number">0</span>], edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uf.connect(source, destination);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">        <span class="comment">// 下标和结点编号相同，对应的元素是其老大</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">        <span class="comment">// 记录当前结点下有几个节点</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span>[] rank;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parent[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并函数，如果调用了此函数就说明 x 和 y 两结点是连通的，需要进行合并操作</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uni</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootx</span> <span class="operator">=</span> find(x);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rooty</span> <span class="operator">=</span> find(y);</span><br><span class="line">            <span class="comment">// 根节点不同，所以需要进行合并操作,合并的依据是看谁底下的小弟多</span></span><br><span class="line">            <span class="keyword">if</span> (rootx != rooty) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rank[rootx] &gt; rank[rooty]) &#123;</span><br><span class="line">                    parent[rooty] = rootx;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootx] &lt; rank[rooty]) &#123;</span><br><span class="line">                    parent[rootx] = rooty;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent[rooty] = rootx;</span><br><span class="line">                    rank[rootx]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果每个结点的 parent 不是自己，就继续找当前结点的“老大”是谁</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">                parent[x] = find(parent[x]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断两节点是否联通</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="可能的二分法"><a href="#可能的二分法" class="headerlink" title="可能的二分法"></a>可能的二分法</h3><blockquote>
<p>886</p>
<p>给定一组 <code>n</code> 人（编号为 <code>1, 2, ..., n</code>）， 我们想把每个人分进<strong>任意</strong>大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p>
<p>给定整数 <code>n</code> 和数组 <code>dislikes</code> ，其中 <code>dislikes[i] = [ai, bi]</code> ，表示不允许将编号为 <code>ai</code> 和 <code>bi</code>的人归入同一组。当可以用这种方法将所有人分进两组时，返回 <code>true</code>；否则返回 <code>false</code>。</p>
</blockquote>
<p><strong>广度优先 + 染色法</strong></p>
<p>染色法就是遍历所有样本进行染色以便分类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">possibleBipartition</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] dislikes)</span> &#123;</span><br><span class="line">        <span class="comment">// 因为人的编号从 1 开始所以范围多声明一个方便计算</span></span><br><span class="line">        <span class="type">int</span> color[] = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        List&lt;Integer&gt;[] disl = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            disl[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化每个人的不喜欢人的链表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : dislikes) &#123;</span><br><span class="line">            disl[p[<span class="number">0</span>]].add(p[<span class="number">1</span>]);</span><br><span class="line">            disl[p[<span class="number">1</span>]].add(p[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历每个人，给所有人染色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 0 是未染色</span></span><br><span class="line">            <span class="keyword">if</span> (color[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">                queue.offer(i);</span><br><span class="line">                <span class="comment">// 默认给颜色1</span></span><br><span class="line">                color[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> next : disl[t]) &#123;</span><br><span class="line">                        <span class="comment">// 如果已经染色且颜色相同，那就返回false</span></span><br><span class="line">                        <span class="keyword">if</span> (color[next] &gt; <span class="number">0</span> &amp;&amp; color[next] == color[t]) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 如果还没染色就赋相反色</span></span><br><span class="line">                        <span class="comment">// 3 异或 1 等于 2 ， 3 异或 2 等于 1</span></span><br><span class="line">                        <span class="keyword">if</span> (color[next] == <span class="number">0</span>) &#123;</span><br><span class="line">                            color[next] = <span class="number">3</span> ^ color[t];</span><br><span class="line">                            queue.offer(next);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>深度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">possibleBipartition</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] dislikes)</span> &#123;</span><br><span class="line">        <span class="comment">// 因为人的编号从 1 开始所以范围多声明一个方便计算</span></span><br><span class="line">        <span class="type">int</span> color[] = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        List&lt;Integer&gt;[] disl = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            disl[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化每个人的不喜欢人的链表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : dislikes) &#123;</span><br><span class="line">            disl[p[<span class="number">0</span>]].add(p[<span class="number">1</span>]);</span><br><span class="line">            disl[p[<span class="number">1</span>]].add(p[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[i] == <span class="number">0</span> &amp;&amp; !dfs(i, <span class="number">1</span>, color, disl)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> curnode, <span class="type">int</span> nowcolor, <span class="type">int</span>[] color, List&lt;Integer&gt;[] disl)</span> &#123;</span><br><span class="line">        color[curnode] = nowcolor;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : disl[curnode]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[next] != <span class="number">0</span> &amp;&amp; color[next] == color[curnode]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (color[next] == <span class="number">0</span> &amp;&amp; !dfs(next, <span class="number">3</span> ^ nowcolor, color, disl)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>并查集</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] p;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">possibleBipartition</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] dislikes)</span> &#123;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        List&lt;Integer&gt;[] disl = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            p[i] = i;</span><br><span class="line">            disl[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : dislikes) &#123;</span><br><span class="line">            disl[p[<span class="number">0</span>]].add(p[<span class="number">1</span>]);</span><br><span class="line">            disl[p[<span class="number">1</span>]].add(p[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : disl[i]) &#123;</span><br><span class="line">                <span class="comment">// 如果发现 i 和 j 属于同一个集合，那就说明错误</span></span><br><span class="line">                <span class="keyword">if</span> (find(i) == find(j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将 j 放在 i 讨厌的人的集合里面</span></span><br><span class="line">                p[find(j)] = find(disl[i].get(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x != p[x]) &#123;</span><br><span class="line">            <span class="keyword">return</span> find(p[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>











































<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><hr>
<blockquote>
<p>在某一个标准下，优先考虑最满足标本的样本，最后考虑不满足标本的样本，最终得到答案的算法，叫做贪心算法<br>也就是说不从整体最优上去考虑，所作出的是某种意义上的局部最优解。</p>
<p>贪心策略在实现时，经常使用到的技巧：</p>
<ul>
<li><p>根据某一标准建立一个比较器来排序</p>
</li>
<li><p>根据某一标准建立一个比较器来组成堆</p>
</li>
<li></li>
</ul>
</blockquote>
<h2 id="贪心–比较器"><a href="#贪心–比较器" class="headerlink" title="贪心–比较器"></a>贪心–比较器</h2><h3 id="会议安排"><a href="#会议安排" class="headerlink" title="会议安排"></a>会议安排</h3><blockquote>
<p>一些项目要占用会议室宣讲，会议室不能同时容纳两个项目的宣讲，给定每个回忆开始时间和结束时间（一个数组，数组元素是一个个项目），现在来安排宣讲日程，要求会议室进行的宣讲场次最多，返回这个最多的宣讲场次</p>
<p>贪心策略：会议结束时间早的先安排</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Program</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> start;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> end;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Program</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个比较器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ProgramComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Program&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Program o1, Program o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.end - o2.end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//timePoint：此时的时间点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bestArrange</span><span class="params">(Program[] programs, <span class="type">int</span> timePoint)</span> &#123;</span><br><span class="line">        Arrays.sort(programs, <span class="keyword">new</span> <span class="title class_">ProgramComparator</span>());</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最终安排的会议数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; programs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timePoint &lt;= programs[i].start) &#123;</span><br><span class="line">                result++;</span><br><span class="line">                timePoint = programs[i].end;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="字典序最小"><a href="#字典序最小" class="headerlink" title="字典序最小"></a>字典序最小</h3><blockquote>
<p>给定一组字符串，将它们全部组合在一起，找到字典序最小的组合</p>
<p>贪心策略：字符串a，和字符串b，a+b的字典序如果小于b+a,就把a+b拼接在一起，如此循环</p>
<p>证明：要想证明此策略是正确的，本质上是证明这样一种排序方式是有传递性的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt; &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (o1 + o1).compareTo(o2 + o1); <span class="comment">//compareTo：比较字典序</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">lowerString</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (strs == <span class="literal">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Arrays.sort(strs, <span class="keyword">new</span> <span class="title class_">MyComparator</span>());</span><br><span class="line">       <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">           res += strs[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>









<h3 id="卡车上最大单元数"><a href="#卡车上最大单元数" class="headerlink" title="卡车上最大单元数"></a>卡车上最大单元数</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-15%2011.25.16.png" alt="截屏2022-11-15 11.25.16" style="zoom:50%;" />



<p><strong>比较器</strong></p>
<p>这一题关键就是用比较器来从大到小排序二维数组，下面给出两种比较器声明方式，第一种是自己写的，是完整版，第二种是lambda表达式写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumUnits</span><span class="params">(<span class="type">int</span>[][] boxTypes, <span class="type">int</span> truckSize)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(boxTypes, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2[<span class="number">1</span>] - o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; boxTypes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (boxTypes[i][<span class="number">0</span>] &lt;= truckSize) &#123;</span><br><span class="line">                ans += boxTypes[i][<span class="number">0</span>] * boxTypes[i][<span class="number">1</span>];</span><br><span class="line">                truckSize -= boxTypes[i][<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += truckSize * boxTypes[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumUnits</span><span class="params">(<span class="type">int</span>[][] boxTypes, <span class="type">int</span> truckSize)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(boxTypes, (a, b) -&gt; b[<span class="number">1</span>] - a[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; boxTypes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (boxTypes[i][<span class="number">0</span>] &lt;= truckSize) &#123;</span><br><span class="line">                ans += boxTypes[i][<span class="number">0</span>] * boxTypes[i][<span class="number">1</span>];</span><br><span class="line">                truckSize -= boxTypes[i][<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += truckSize * boxTypes[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="贪心–-数组"><a href="#贪心–-数组" class="headerlink" title="贪心– 数组"></a>贪心– 数组</h2><h3 id="交换一次的先前排列"><a href="#交换一次的先前排列" class="headerlink" title="交换一次的先前排列"></a>交换一次的先前排列</h3><blockquote>
<p>给你一个正整数数组 <code>arr</code>（可能存在重复的元素），请你返回可在 <strong>一次交换</strong>（交换两数字 <code>arr[i]</code> 和 <code>arr[j]</code> 的位置）后得到的、按字典序排列小于 <code>arr</code> 的最大排列。</p>
<p>如果无法这么操作，就请返回原数组。</p>
<p>LeetCode(1053)</p>
</blockquote>
<p><strong>贪心策略</strong></p>
<p>贪心策略：arr[i] 记为 A，arr[j] 记为 B</p>
<ol>
<li>A &gt; B 且 A 尽可能靠后</li>
<li>B 在 A 之后，且 B 尽可能大</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] prevPermOpt1(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 这样写 if 条件可以保证已遍历过的数组部分是非递减的</span></span><br><span class="line">            <span class="comment">// 有助于我们在找最大 arr[j] 的时候直接从后往前遍历</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// arr[j] == arr[j - 1] 是应对 3 1 1 3 这种情况</span></span><br><span class="line">                <span class="keyword">while</span> (arr[j] &gt;= arr[i] || arr[j] == arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h2 id="贪心–堆"><a href="#贪心–堆" class="headerlink" title="贪心–堆"></a>贪心–堆</h2><h3 id="切金条"><a href="#切金条" class="headerlink" title="切金条"></a>切金条</h3><blockquote>
<p>一块金条切成两半，是需要花费和长度数值一样的铜板的，比如长度为20的金条，不管切成长度多大的两半，都需要花费20铜板<br>一群人想整分整块金条，怎么分最省铜板？<br>例如给定数组{10, 20, 30} ，代表一共三个人，整块金条长度为10 + 20 + 30 &#x3D; 60， 金条要分成10，20，30三个部分，如果先把长度60的金条分成10和50，花费60，再把长度为50的金条分成20和30，花费50，一共花费110， 但如果先把长度60的金条分为30和30，花费60，再把30的金条分为10和20，花费30，一共花费90铜板。</p>
<p>输入一个数组，返回分割的最小代价</p>
<p>策略：典型的哈夫曼树编码，将数组扔到小根堆里，每次弹出两个最小的数，组成新的节点再扔到小根堆里，再重复此过程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lessMoney</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; pQ = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            pQ.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//最小代价</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//每次弹出的两个值的和</span></span><br><span class="line">        <span class="keyword">while</span> (pQ.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            cur = pQ.poll() + pQ.poll();</span><br><span class="line">            sum += cur;</span><br><span class="line">            pQ.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="项目收益"><a href="#项目收益" class="headerlink" title="项目收益"></a>项目收益</h3><blockquote>
<p>输入：<br>正数数组costs<br>正数数组profits<br>正数k<br>正数m</p>
<p>含义：<br>costs[i] 表示i号项目的花费<br>profits[i] 表示i号项目在扣除花费后还能挣到的钱（利润）<br>k表示只能串行的做最多k个项目<br>m表示初始资金</p>
<p>说明：<br>每做完一个项目获得的收益可以立马获得并且支持去做下一个项目</p>
<p>输出：最后获得的最大钱数</p>
<p>贪心策略：<br>首先判断现有资金能否完成项目，如果能够完成的话，优先完成能完成项目中的收益最大的项目，所以思路是准备两个堆，一个小根堆，一个大根堆，小根堆的作用是lock，初始时将所有的项目按花费锁在堆中，如多手头的钱足够完成项目，就弹出小根堆到大根堆里，大根队是按收益排序，每从大根堆里处理一次，就去扫描小根堆看看有没有符合要求的项目。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxProfit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> cost;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> profit;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> cost, <span class="type">int</span> profit)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cost = cost;</span><br><span class="line">            <span class="built_in">this</span>.profit = profit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MinCostComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Node&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Node o1, Node o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.cost - o2.cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MaxProfitComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Node&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Node o1, Node o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.profit - o2.profit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMaxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m, <span class="type">int</span>[] profits, <span class="type">int</span>[] costs)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Node&gt; minCostQ = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        PriorityQueue&lt;Node&gt; maxProfitQ = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//先将项目都放到花费小根堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; costs.length; i++) &#123;</span><br><span class="line">            minCostQ.add(<span class="keyword">new</span> <span class="title class_">Node</span>(costs[i], profits[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="comment">//将花费小于当前手头现金的项目弹到大根堆里</span></span><br><span class="line">            <span class="keyword">while</span> (!minCostQ.isEmpty() &amp;&amp; minCostQ.peek().cost &lt;= m) &#123;</span><br><span class="line">                maxProfitQ.add(minCostQ.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxProfitQ.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;</span><br><span class="line">            m += maxProfitQ.poll().profit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h2 id="贪心策略"><a href="#贪心策略" class="headerlink" title="贪心策略"></a>贪心策略</h2><h3 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h3><blockquote>
<p>leetcode : 55 , 跳跃游戏</p>
<p>题目描述：<br>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的第一个下标<br>数组中的每个元素代表你在该位置可以跳跃的最大长度<br>判断你是否能够到达最后一个下标。</p>
</blockquote>
<p><strong>分析</strong><br>此题有一个核心的点是，每一个数组的元素值代表的是可以跳到的最远距离的范围，所以，只需要从左到右不断的遍历到此刻所能到达的最远距离去看看最远距离能否到达最远的元素即可同时不断更新最远距离</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDistance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= maxDistance; i++) &#123;</span><br><span class="line">            maxDistance = maxDistance &gt; i + nums[i] ? maxDistance : i + nums[i];</span><br><span class="line">            <span class="keyword">if</span> (maxDistance &gt;= nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="跳跃游戏-2"><a href="#跳跃游戏-2" class="headerlink" title="跳跃游戏_2"></a>跳跃游戏_2</h3><blockquote>
<p>Leetcode : <a href="https://leetcode.cn/problems/jump-game-ii/">https://leetcode.cn/problems/jump-game-ii/</a></p>
<p>题目描述：<br>给你一个非负整数数组 nums ，你最初位于数组的第一个位置。<br>数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>你的目标是使用最少的跳跃次数到达数组的最后一个位置。<br>假设你总是可以到达数组的最后一个位置。</p>
</blockquote>
<p><strong>1. 巧妙的贪心策略</strong></p>
<p>这个贪心策略很巧妙，就是从最后一个元素开始往回推，看哪个元素能走到这里，往回推的策略就是一个巧妙的贪心–我们认为，靠左的元素的到达最后一个元素的步数更少。但这种方案时间复杂度较高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (position &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + nums[i] &gt;= position) &#123;</span><br><span class="line">                    position = i;</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2. 正面推</strong></p>
<p>维护一个每次移动的边界以及最大距离，即可做到一次遍历得到结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 步数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 判断当前位置有没有到此次最大范围的边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDistance</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 可移动的最大距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            maxDistance = Math.max(maxDistance, i + nums[i]); <span class="comment">// 更新最大范围</span></span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123; <span class="comment">// 如果移动范围已经到了更新前的距离边界，那就 步数++且更新end</span></span><br><span class="line">                ans++;</span><br><span class="line">                end = maxDistance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="最多排序块"><a href="#最多排序块" class="headerlink" title="最多排序块"></a>最多排序块</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-13%2011.28.17.png" alt="截屏2022-08-13 11.28.17" style="zoom:50%;" />



<p><strong>分析</strong></p>
<p>我一开始的思路是：每次找到数组中最小的数，因为每次划分一定要有最小值，不然就无法成功，但是在提交时意识到，并不一定有答案，比如：[2,0,1]这个数据，就无法通过我的思路<br>再看官方的贪心策略就高明很多:<br>即：一次合理的划分一定要满足最大值在最右边的块，所以可以用一个变量来记录当前遍历得到的最大值，由于数组的值和下标是对应的，所以直接判断最大值与当前遍历的下标是否一样，一样就说明当前遍历的最大值已经满足一个块了，就可以ans++</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            max = Math.max(arr[i], max);</span><br><span class="line">            <span class="keyword">if</span> (max == i) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="最多排序块-2"><a href="#最多排序块-2" class="headerlink" title="最多排序块_2"></a>最多排序块_2</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-13%2011.49.38.png" alt="截屏2022-08-13 11.49.38" style="zoom:50%;" />



<p><strong>哈希 + 排序</strong></p>
<p>核心思想：arr 和 arr 的排序数组从左到右开始比较的话，如果能够划分成一个合理的块数，那么其词频应该是一样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法一：统计词频法</span></span><br><span class="line">        <span class="comment">// 用 HashMap统计词频</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化排序数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span>[] visited = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, visited, <span class="number">0</span>, arr.length);</span><br><span class="line">        Arrays.sort(visited);</span><br><span class="line">        <span class="comment">// 开始循环</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> arr[i], v = visited[i];</span><br><span class="line">            map.put(a, map.getOrDefault(a, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (map.get(a) == <span class="number">0</span>) &#123;</span><br><span class="line">                map.remove(a);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(v, map.getOrDefault(v, <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (map.get(v) == <span class="number">0</span>) &#123;</span><br><span class="line">                map.remove(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>单调栈</strong></p>
<p>维护一个记录所有逻辑上分块的最大值的栈，当来到一个新的num时，找到最大值小于它的那个块，然后这个快之前的所有块都要融合成一个块，再把原来最大值push进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 单调栈法</span></span><br><span class="line">        <span class="comment">// 这个栈的元素是逻辑上分块的最大值！最后返回栈的size（）就是最终答案</span></span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素比最大值大或者栈非空就加入新的值</span></span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty() || num &gt;= stack.peek()) &#123;</span><br><span class="line">                stack.push(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 找到下一个大于其最大值的块</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; num &lt; stack.peek()) &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="无重叠区间"><a href="#无重叠区间" class="headerlink" title="无重叠区间"></a>无重叠区间</h3><blockquote>
<p>给定一个区间的集合 intervals ，其中 intervals[i] &#x3D; [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/non-overlapping-intervals">https://leetcode.cn/problems/non-overlapping-intervals</a></p>
<p>此题类似于：646. 最长数对链<br><a href="https://leetcode.cn/problems/maximum-length-of-pair-chain/">https://leetcode.cn/problems/maximum-length-of-pair-chain/</a></p>
</blockquote>
<p><strong>动态规划</strong></p>
<p>这题用动态规划执行效率比较低，超出时间限制，但是作为一个经典思路，以及对二维数组比较器的学习，将代码拿过来。<br>主要思路是：先按数组的第一列从小到大排序，然后找出动态转移方程就是：到第 i 个区间的可以找到多少个不重叠区间取决于第 i-1个区间可以有多少个不重叠区间且如果 i-1 的右端点小于等于 i 区间的左端点，那么可组成的不重叠区间就 + 1<br>最终返回区间总数 - 缓存数组的最大值就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自定义一个比较器，按第一列排序二维数组</span></span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a1, <span class="type">int</span>[] a2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a1[<span class="number">0</span>] - a2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="comment">// 缓存数组</span></span><br><span class="line">        <span class="comment">// flush数组元素的含义是当前元素之前的不重叠区间的个数以及判断当前是否属可加入这个区间</span></span><br><span class="line">        <span class="type">int</span>[] flush = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(flush, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (intervals[j][<span class="number">1</span>] &lt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                    flush[i] = Math.max(flush[i], flush[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - Arrays.stream(flush).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>贪心</strong></p>
<p>贪心可以理解为上述动态规划算法的优化<br>我们可以隐约看出一点：那就是最优不重叠区间序列的左端点一定是右端点最小的那个区间，这很好理解，而且这一结论是递归的<br>所以我们可以按右端点进行排序，然后遍历到的区间的最左端点就是最优序列的左端点！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 与动归不同，这个是按照第二列也就是右端点大小来排序的</span></span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a1, <span class="type">int</span>[] a2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a1[<span class="number">1</span>] - a2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="comment">// 维护一个右端点以及总数即可，不需要一个数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (right &lt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="最低支付工资"><a href="#最低支付工资" class="headerlink" title="最低支付工资"></a>最低支付工资</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-11%2009.55.32.png" alt="截屏2022-09-11 09.55.32" style="zoom:50%;" />











<h3 id="最大交换"><a href="#最大交换" class="headerlink" title="最大交换"></a>最大交换</h3><blockquote>
<p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p>
</blockquote>
<p><strong>暴力全交换</strong></p>
<p>这个方法效率显而易见的低，但是实现思路还是有意思，String和Integer的相互转化以及交换策略都是值得看一下的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] charArray = String.valueOf(num).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> charArray.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                swap(charArray, i, j);</span><br><span class="line">                max = Math.max(max, Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(charArray)));</span><br><span class="line">                swap(charArray, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>贪心</strong></p>
<p>贪心策略：从右往左一次遍历，记录最大值的index，同时判断当前index和最大index的数位大小，如果当前的index数字比maxIndex小，那么就把这两个数交换，得到的数一定比原来的数大，经过一轮这样操作后，得到的最大数即为答案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">      <span class="comment">// 从右往左找到最大的</span></span><br><span class="line">      <span class="type">char</span>[] charArray = String.valueOf(num).toCharArray();</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> charArray.length;</span><br><span class="line">      <span class="type">int</span> <span class="variable">maxId</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> num;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          <span class="keyword">if</span> (charArray[i] &gt; charArray[maxId]) &#123;</span><br><span class="line">              maxId = i;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (charArray[i] &lt; charArray[maxId]) &#123;</span><br><span class="line">              swap(charArray, i, maxId);</span><br><span class="line">              <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(charArray));</span><br><span class="line">              swap(charArray, i, maxId);</span><br><span class="line">              maxNum = maxNum &gt; cur ? maxNum : cur;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> maxNum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] charArray, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> charArray[i];</span><br><span class="line">        charArray[i] = charArray[j];</span><br><span class="line">        charArray[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以上代码是我自己写的，很明显的是，每次比较都会经历一次交换数字以及Integer 和 String 转化的过程，比较蠢，所以可用以下手段优化, 可以用记录数对的方式，记录最大数的交换的index，这样只用一次判断加一次转化，即可完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">      <span class="comment">// 从右往左找到最大的</span></span><br><span class="line">      <span class="type">char</span>[] charArray = String.valueOf(num).toCharArray();</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> charArray.length;</span><br><span class="line">      <span class="type">int</span> <span class="variable">maxId</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 记录需要交换的数字的下标</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">idx1</span> <span class="operator">=</span> -<span class="number">1</span>, idx2 = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          <span class="keyword">if</span> (charArray[i] &gt; charArray[maxId]) &#123;</span><br><span class="line">              maxId = i;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (charArray[i] &lt; charArray[maxId]) &#123;</span><br><span class="line">              idx1 = i;</span><br><span class="line">              idx2 = maxId;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (idx1 != -<span class="number">1</span>) &#123;</span><br><span class="line">          swap(charArray, idx1, idx2);</span><br><span class="line">          <span class="keyword">return</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(charArray));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> num;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] charArray, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> charArray[i];</span><br><span class="line">        charArray[i] = charArray[j];</span><br><span class="line">        charArray[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="最少括号添加"><a href="#最少括号添加" class="headerlink" title="最少括号添加"></a>最少括号添加</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-04%2022.01.54.png" alt="截屏2022-10-04 22.01.54" style="zoom:50%;" />



<p><strong>贪心</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minAddToMakeValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">      <span class="comment">// 专注于一个括号的匹配情况来进行贪心</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">leftcnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">          <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">              leftcnt++;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (leftcnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  leftcnt--;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  ans++;</span><br><span class="line">              &#125;              </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans + leftcnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="最小小球操作数"><a href="#最小小球操作数" class="headerlink" title="最小小球操作数"></a>最小小球操作数</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-12-02%2010.28.28.png" alt="截屏2022-12-02 10.28.28" style="zoom:50%;" />



<p><strong>策略</strong></p>
<p>最快速的策略是直接用上一个位置的操作数以及当前位置的状态来得出当前位置的操作数<br>详细来说就是：假设 i 位置的操作数是 operationsi ，i + 1位置左边的小球数是 left, 右边的小球数是 right， 那么当前位置的操作数是 oerations + left - right ，因为所有左边的小球都要多移动一位，右边的小球少移动一位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] minOperations(String boxes) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> boxes.length();</span><br><span class="line">        <span class="comment">// 初始化左边小球数是第一个盒子的状态（因为后面的遍历都从1开始)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> boxes.charAt(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>, right = <span class="number">0</span>, operations = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化右边的小球数以及操作数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (boxes.charAt(i) == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                right ++;</span><br><span class="line">                operations += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        ans[<span class="number">0</span>] = operations;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            operations += left - right;</span><br><span class="line">            <span class="keyword">if</span> (boxes.charAt(i) == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i] = operations;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="能组成的最大整数"><a href="#能组成的最大整数" class="headerlink" title="能组成的最大整数"></a>能组成的最大整数</h3><blockquote>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>coins</code> ，它代表你拥有的 <code>n</code> 个硬币。第 <code>i</code> 个硬币的值为 <code>coins[i]</code> 。如果你从这些硬币中选出一部分硬币，它们的和为 <code>x</code> ，那么称，你可以 <strong>构造</strong> 出 <code>x</code> 。</p>
<p>请返回从 <code>0</code> 开始（<strong>包括</strong> <code>0</code> ），你最多能 <strong>构造</strong> 出多少个连续整数。</p>
<p>你可能有多个相同值的硬币。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaximumConsecutive</span><span class="params">(<span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        假设当前若干硬币可以组成的最大连续整数范围是 [0, x]</span></span><br><span class="line"><span class="comment">        那么当加上 y 时，其能组成的整数范围是 [0, x] 和 [y, y + x]</span></span><br><span class="line"><span class="comment">        要使加上的这个 y 有效果， x + 1 就必须在 [y, y + x]中</span></span><br><span class="line"><span class="comment">        则 y &lt;= x + 1</span></span><br><span class="line"><span class="comment">        则 y &gt; n</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(coins);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y : coins) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y &gt; x + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x += y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 因为什么都取也是一种方法，所以要 + 1</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="和有限的最长子序列"><a href="#和有限的最长子序列" class="headerlink" title="和有限的最长子序列"></a>和有限的最长子序列</h3><blockquote>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，和一个长度为 <code>m</code> 的整数数组 <code>queries</code> 。</p>
<p>返回一个长度为 <code>m</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是 <code>nums</code> 中元素之和小于等于 <code>queries[i]</code> 的 <strong>子序列</strong> 的 <strong>最大</strong> 长度 。</p>
<p><strong>子序列</strong> 是由一个数组删除某些元素（也可以不删除）但不改变剩余元素顺序得到的一个数组。</p>
<p>LeetCode: 2389</p>
</blockquote>
<p><strong>我的方法</strong></p>
<p>这道题是一道简单题，我自己写的方法是比较直观的了，因为是子序列，且只要子序列的长度，所以直接排序，然后两层for去处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] answerQueries(<span class="type">int</span>[] nums, <span class="type">int</span>[] queries) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>, m = nums.length; j &lt; m; j++) &#123;</span><br><span class="line">                cnt += nums[j];</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt; queries[i]) &#123;</span><br><span class="line">                    ans[i] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == m - <span class="number">1</span>) &#123;</span><br><span class="line">                    ans[i] = m;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>前缀和 + 二分查找</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      前缀和 f[i] + 二分查找</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] answerQueries(<span class="type">int</span>[] nums, <span class="type">int</span>[] queries) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length, q = queries.length;</span><br><span class="line">        <span class="comment">// 声明前缀和数组并初始化</span></span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            f[i + <span class="number">1</span>] = f[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[q];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            ans[i] = binarySearch(f, queries[i]) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用二分法找到前缀和数组中最小的大于 target 的元素，其下标就是ans</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] f, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = f.length;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 这个二分的 if 可以好好琢磨一下，high 和 mid 的赋值有讲究</span></span><br><span class="line">            <span class="keyword">if</span> (f[mid] &gt; target) &#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="字母与数字"><a href="#字母与数字" class="headerlink" title="字母与数字"></a>字母与数字</h3><blockquote>
<p>给定一个放有字母和数字的数组，找到最长的子数组，且包含的字母和数字的个数相同。</p>
<p>返回该子数组，若存在多个最长子数组，返回左端点下标值最小的子数组。若不存在这样的数组，返回一个空数组。</p>
<p>LeetCode(面试题17.05) </p>
</blockquote>
<p><strong>前缀和基础版</strong></p>
<p>核心思想如下：</p>
<ul>
<li>转换思想：遍历数组，遇到字母++，遇到数字–，这样题目就变成了求前缀和为0的最长子数组了</li>
<li>求前缀和为0的最长子数组，即求两个前缀和之差为0且下标差最大的子数组，求前缀和之差为 0 等价于求前缀和相同的两个下标</li>
<li>在遍历的同时，用一个数组或哈希表记录某个前缀和首次出现的位置，我们要找的就是 i - first[sum] 的最大值</li>
<li>对于任意小写&#x2F;大写英文字母字符，其 ASCII 码的二进制都形如 01xxxxxx；对于任意数字字符，其 ASCII 码的二进制都形如0011xxxx。根据这一特点，可以根据二进制从低到高第 6 位（设二进制最低位是第 0 位）是 0还是 1 来判断：如果是 1 就是小写&#x2F;大写英文字母字符，如果是 0 就是数字字符。把字符的二进制右移 6 位再 AND 1 就可以得到这个比特值。然后再通过 x2−1 的操作，把 1 转换成 1，0 转换成 −1。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] findLongestSubarray(String[] array) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> array.length;</span><br><span class="line">        <span class="type">int</span>[] s = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 前缀数组的第一个元素默认是 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            s[i + <span class="number">1</span>] = s[i] + (array[i].charAt(<span class="number">0</span>) &gt;&gt; <span class="number">6</span> &amp; <span class="number">1</span>) * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>; <span class="comment">// 声明符合要求的子数组</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; first = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> first.getOrDefault(s[i], -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">0</span>)</span><br><span class="line">                first.put(s[i], i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i - j &gt; end - begin)&#123;</span><br><span class="line">                begin = j;</span><br><span class="line">                end = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] sub = <span class="keyword">new</span> <span class="title class_">String</span>[end - begin];</span><br><span class="line">        System.arraycopy(array, begin, sub, <span class="number">0</span>, sub.length);</span><br><span class="line">        <span class="keyword">return</span> sub;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>优化-官方</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] findLongestSubarray(String[] array) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, maxLength = <span class="number">0</span>, startIdx = <span class="number">0</span>, n = array.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果是字母前缀和++，数字前缀和--</span></span><br><span class="line">            <span class="keyword">if</span> (Character.isLetter(array[i].charAt(<span class="number">0</span>))) sum++;</span><br><span class="line">            <span class="keyword">else</span> sum--;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(sum)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">firstIdx</span> <span class="operator">=</span> map.get(sum);</span><br><span class="line">                <span class="keyword">if</span> (i - firstIdx &gt; maxLength) &#123;</span><br><span class="line">                    maxLength = i - firstIdx;</span><br><span class="line">                    startIdx = firstIdx + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(sum, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxLength == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        String[] res = <span class="keyword">new</span> <span class="title class_">String</span>[maxLength];</span><br><span class="line">        System.arraycopy(array, startIdx, res, <span class="number">0</span>, maxLength);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>优化-前缀和数组和Hash</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] findLongestSubarray(String[] array) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> array.length, begin = <span class="number">0</span>, end = <span class="number">0</span>, s = n;</span><br><span class="line">        <span class="type">var</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[n * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(first, -<span class="number">1</span>); <span class="comment">// 注：去掉可以再快 1ms（需要 s 下标改从 1 开始）</span></span><br><span class="line">        first[s] = <span class="number">0</span>; <span class="comment">// s[0] = 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            s += (array[i - <span class="number">1</span>].charAt(<span class="number">0</span>) &gt;&gt; <span class="number">6</span> &amp; <span class="number">1</span>) * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> first[s];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">0</span>)</span><br><span class="line">                first[s] = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i - j &gt; end - begin) &#123;</span><br><span class="line">                begin = j;</span><br><span class="line">                end = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">var</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>[end - begin];</span><br><span class="line">        System.arraycopy(array, begin, sub, <span class="number">0</span>, sub.length);</span><br><span class="line">        <span class="keyword">return</span> sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



































<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><hr>
<h2 id="堆应用"><a href="#堆应用" class="headerlink" title="堆应用"></a>堆应用</h2><h3 id="找中位数"><a href="#找中位数" class="headerlink" title="找中位数"></a>找中位数</h3><blockquote>
<p>在一个数据流中可以随时取得中位数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MidNum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MinNumComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1 - o2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MaxNumComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt;&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o2 - o1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minNum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Integer&gt; bigger = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MaxNumComparator</span>());</span><br><span class="line">        PriorityQueue&lt;Integer&gt; smaller = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MinNumComparator</span>());</span><br><span class="line">        bigger.add(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">//当</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= bigger.peek()) &#123;</span><br><span class="line">                bigger.add(nums[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                smaller.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当两个堆的size大小差距超过2就进行调整</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(bigger.size() - smaller.size()) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bigger.size() &gt; smaller.size()) &#123;</span><br><span class="line">                    smaller.add(bigger.poll());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bigger.add(smaller.poll());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midNum</span> <span class="operator">=</span> nums.length % <span class="number">2</span> == <span class="number">1</span> ?</span><br><span class="line">                (bigger.size() &gt; smaller.size() ? bigger.poll() : smaller.poll()) :</span><br><span class="line">                ((bigger.poll() + smaller.poll()) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> midNum;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





















<h2 id="堆的改进"><a href="#堆的改进" class="headerlink" title="堆的改进"></a>堆的改进</h2><h3 id="Dijkstra改进"><a href="#Dijkstra改进" class="headerlink" title="Dijkstra改进"></a>Dijkstra改进</h3><blockquote>
<p>将disctance放在小根堆中，每次改完distance后重新放在堆中，这样的一个堆无法使用系统提供的堆结构，需要自己改造堆结构来满足需求</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NodeRecord</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> Node node;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> distance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NodeRecord</span><span class="params">(Node node, <span class="type">int</span> distance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.node = node;</span><br><span class="line">        <span class="built_in">this</span>.distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NodeHeap</span>  &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node[] nodes; <span class="comment">//所有的节点放在数组里面（堆的底层结构是数组）</span></span><br><span class="line">        <span class="keyword">private</span> HashMap&lt;Node, Integer&gt; heapIndexMap; <span class="comment">//节点在堆中的位置</span></span><br><span class="line">        <span class="keyword">private</span> HashMap&lt;Node, Integer&gt; distanceMap; <span class="comment">// 节点目前到head的最短距离</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">//目前这个堆上有多少个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">NodeHeap</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">            nodes = <span class="keyword">new</span> <span class="title class_">Node</span>[size];</span><br><span class="line">            heapIndexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            distanceMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrUpdateOrIgnore</span><span class="params">(Node node, <span class="type">int</span> distance)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inHeap(node)) &#123;</span><br><span class="line">                distanceMap.put(node, Math.min(distanceMap.get(node), distance));</span><br><span class="line">                insertHeapify(node, heapIndexMap.get(node));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isEntered(node)) &#123;</span><br><span class="line">                nodes[size] = node;</span><br><span class="line">                heapIndexMap.put(node, size);</span><br><span class="line">                distanceMap.put(node, distance);</span><br><span class="line">                insertHeapify(node, size++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> NodeRecord <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">NodeRecord</span> <span class="variable">nodeRecord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeRecord</span>(nodes[<span class="number">0</span>], distanceMap.get(nodes[<span class="number">0</span>]));</span><br><span class="line">            swap(<span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">            heapIndexMap.put(nodes[size - <span class="number">1</span>], -<span class="number">1</span>);</span><br><span class="line">            distanceMap.remove(nodes[size - <span class="number">1</span>]);</span><br><span class="line">            nodes[size - <span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">            heapify(<span class="number">0</span>, --size);</span><br><span class="line">            <span class="keyword">return</span> nodeRecord;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断一个节点有没有进来过</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEntered</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> heapIndexMap.containsKey(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertHeapify</span><span class="params">(Node node, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (distanceMap.get(nodes[index]) &lt; distanceMap.get(nodes[index - <span class="number">1</span>]) / <span class="number">2</span>) &#123;</span><br><span class="line">                swap(index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">                index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; size) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">smallest</span> <span class="operator">=</span> left + <span class="number">1</span> &lt; size &amp;&amp; distanceMap.get(nodes[left + <span class="number">1</span>]) &lt; distanceMap.get(nodes[left])</span><br><span class="line">                        ? left + <span class="number">1</span> : left;</span><br><span class="line">                smallest = distanceMap.get(nodes[smallest]) &lt; distanceMap.get(nodes[index]) ? smallest : index;</span><br><span class="line">                <span class="keyword">if</span> (smallest == index) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(smallest, index);</span><br><span class="line">                index = smallest;</span><br><span class="line">                left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断节点是否在堆上</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">inHeap</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> isEntered(node) &amp;&amp; heapIndexMap.get(node) != -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换调整堆</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> index1, <span class="type">int</span> index2)</span> &#123;</span><br><span class="line">            heapIndexMap.put(nodes[index1], index2);</span><br><span class="line">            heapIndexMap.put(nodes[index2], index1);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> nodes[index1];</span><br><span class="line">            nodes[index1] = nodes[index2];</span><br><span class="line">            nodes[index2] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//改进后的dijkstra算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Node, Integer&gt; <span class="title function_">dijkstra2</span><span class="params">(Node head, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">NodeHeap</span> <span class="variable">nodeHeap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeHeap</span>(size);</span><br><span class="line">        nodeHeap.addOrUpdateOrIgnore(head, <span class="number">0</span>);</span><br><span class="line">        HashMap&lt;Node, Integer&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!nodeHeap.isEmpty()) &#123;</span><br><span class="line">            <span class="type">NodeRecord</span> <span class="variable">record</span> <span class="operator">=</span> nodeHeap.pop();</span><br><span class="line">            <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> record.node;</span><br><span class="line">            <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> record.distance;</span><br><span class="line">            <span class="keyword">for</span> (Edge edge : cur.edges) &#123;</span><br><span class="line">                nodeHeap.addOrUpdateOrIgnore(edge.to, edge.weight + distance);</span><br><span class="line">            &#125;</span><br><span class="line">            result.put(cur, distance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>













<h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><h3 id="最大平均通过率"><a href="#最大平均通过率" class="headerlink" title="最大平均通过率"></a>最大平均通过率</h3><blockquote>
<p>一所学校里有一些班级，每个班级里有一些学生，现在每个班都会进行一场期末考试。给你一个二维数组 <code>classes</code> ，其中 <code>classes[i] = [passi, totali]</code> ，表示你提前知道了第 <code>i</code> 个班级总共有 <code>totali</code> 个学生，其中只有 <code>passi</code> 个学生可以通过考试。</p>
<p>给你一个整数 <code>extraStudents</code> ，表示额外有 <code>extraStudents</code> 个聪明的学生，他们 <strong>一定</strong> 能通过任何班级的期末考。你需要给这 <code>extraStudents</code> 个学生每人都安排一个班级，使得 <strong>所有</strong> 班级的 <strong>平均</strong> 通过率 <strong>最大</strong> 。</p>
<p>一个班级的 <strong>通过率</strong> 等于这个班级通过考试的学生人数除以这个班级的总人数。<strong>平均通过率</strong> 是所有班级的通过率之和除以班级数目。</p>
<p>请你返回在安排这 <code>extraStudents</code> 个学生去对应班级后的 <strong>最大</strong> 平均通过率。与标准答案误差范围在 <code>10-5</code> 以内的结果都会视为正确结果。</p>
</blockquote>
<p><strong>数学分析可知：</strong><br><strong>a + 1 &#x2F; b + 1 &lt; a &#x2F; b</strong><br><strong>所以应该每次挑出其中通过率最小的那个班级分子分母加 1 后再放回去，继续和其他班级的通过率比较，每次拿出最大的，所以考虑使用数据结构：优先队列，也就是大根堆，由于java的优先队列默认是小根堆，所以要定制化一下初始化方法.</strong><br><strong>其中,满足以下条件时，j比i的优先级更高(j 班级的通过率大于 i 班级)：</strong><br><strong>passi + 1 &#x2F; totali + 1 &lt; passj + 1 &#x2F; totalj + 1,    化简后可得：</strong><br><strong>(totalj+1)×(totalj)×(totali−passi)&lt;(totali+1)×(totali)×(totalj−passj)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">maxAverageRatio</span><span class="params">(<span class="type">int</span>[][] classes, <span class="type">int</span> extraStudents)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明优先队列，定制取根逻辑</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">val1</span> <span class="operator">=</span> (<span class="type">long</span>)(b[<span class="number">1</span>] + <span class="number">1</span>) * b[<span class="number">1</span>] * (a[<span class="number">1</span>] - a[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">long</span> <span class="variable">val2</span> <span class="operator">=</span> (<span class="type">long</span>)(a[<span class="number">1</span>] + <span class="number">1</span>) * a[<span class="number">1</span>] * (b[<span class="number">1</span>] - b[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (val1 == val2) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val2 &gt; val1 ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 将当前班级逐个加入到优先队列中，会自动调lambda方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] c : classes) &#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;c[<span class="number">0</span>], c[<span class="number">1</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开始将 extraStudents 加入到优先队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; extraStudents; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = pq.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">pass</span> <span class="operator">=</span> arr[<span class="number">0</span>], total = arr[<span class="number">1</span>];</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;pass + <span class="number">1</span>, total + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历优先队列，计算总平均通过率</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classes.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = pq.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">pass</span> <span class="operator">=</span> arr[<span class="number">0</span>], total = arr[<span class="number">1</span>];</span><br><span class="line">            ans += <span class="number">1.0</span> * pass / total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans / classes.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="距离相等的条形码"><a href="#距离相等的条形码" class="headerlink" title="距离相等的条形码"></a>距离相等的条形码</h3><blockquote>
<p>在一个仓库里，有一排条形码，其中第 <code>i</code> 个条形码为 <code>barcodes[i]</code>。</p>
<p>请你重新排列这些条形码，使其中任意两个相邻的条形码不能相等。 你可以返回任何满足该要求的答案，此题保证存在答案。</p>
<p>LeetCode 1054 (medium)</p>
</blockquote>
<p><strong>大根堆</strong></p>
<p>采用的排列策略是：每次优先将数量最多的那个元素做排列，实在不行就出现频次第二多的排</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] rearrangeBarcodes(<span class="type">int</span>[] barcodes) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : barcodes) &#123;</span><br><span class="line">            cnt.put(i, cnt.getOrDefault(i, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b[<span class="number">0</span>] - a[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : cnt.entrySet()) &#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getValue(), entry.getKey()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> barcodes.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] p = pq.poll();</span><br><span class="line">            <span class="comment">// 如果 i == 0或前一个元素不等于频率最大的元素，就拿当前频率最大的元素去排</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || res[i - <span class="number">1</span>] != p[<span class="number">1</span>]) &#123;</span><br><span class="line">                res[i] = p[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (p[<span class="number">0</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;p[<span class="number">0</span>] - <span class="number">1</span>, p[<span class="number">1</span>]&#125;);</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则就拿频率第二的元素排</span></span><br><span class="line">                <span class="type">int</span>[] q = pq.poll();</span><br><span class="line">                res[i] = q[<span class="number">1</span>]; </span><br><span class="line">                <span class="keyword">if</span> (q[<span class="number">0</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;q[<span class="number">0</span>] - <span class="number">1</span>, q[<span class="number">1</span>]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                pq.offer(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><hr>
<blockquote>
<p>什么是动态规划：</p>
<ul>
<li>空间换时间</li>
<li>如果有重复调用的子过程，那就把子过程执行结果记下来，下次遇到直接调用</li>
</ul>
<p>在写动态规划题目时，一般来说是三部曲，一开始是自己分析开始尝试，然后加入缓存优化，如果可以的话最后维护dp表<br>将递归行为替换为dp表里拿值</p>
</blockquote>
<h2 id="dp三部曲案例"><a href="#dp三部曲案例" class="headerlink" title="dp三部曲案例"></a>dp三部曲案例</h2><h3 id="分隔数组得最大和"><a href="#分隔数组得最大和" class="headerlink" title="分隔数组得最大和"></a>分隔数组得最大和</h3><blockquote>
<p>给你一个整数数组 <code>arr</code>，请你将该数组分隔为长度 <strong>最多</strong> 为 k 的一些（连续）子数组。分隔完成后，每个子数组的中的所有值都会变为该子数组中的最大值。</p>
<p>返回将数组分隔变换后能够得到的元素最大和。本题所用到的测试用例会确保答案是一个 32 位整数。</p>
<p>LeetCode 1043</p>
</blockquote>
<p><strong>基本递归</strong></p>
<p>以 [1,15,7,9,2,5,10]，k &#x3D; 3 为例，我们从后往前遍历，当遍历到 10 时，我们可以分割的数组有三种可能性，[10], [5, 10], [2, 5, 10], 我们分别计算这些数组的最大值后，继续在不同的可能性往下计算，可以想象出遍历的过程大致为树状，所以采用递归来做<br>但是这种算法会超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumAfterPartitioning</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        <span class="keyword">return</span> dfs(arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i, mx = <span class="number">0</span>; j &gt; i - k &amp;&amp; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            mx = Math.max(mx, arr[j]); <span class="comment">// 计算当前的最大值</span></span><br><span class="line">            ans = Math.max((i - j + <span class="number">1</span>) * mx + dfs(j - <span class="number">1</span>), ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>递归优化</strong></p>
<p>加入缓存数组，将最优解缓存至数组，以空间换时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr, memo;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumAfterPartitioning</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        Arrays.fill(memo, -<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        <span class="keyword">return</span> dfs(arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i, mx = <span class="number">0</span>; j &gt; i - k &amp;&amp; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            mx = Math.max(mx, arr[j]); <span class="comment">// 计算当前的最大值</span></span><br><span class="line">            ans = Math.max((i - j + <span class="number">1</span>) * mx + dfs(j - <span class="number">1</span>), ans);</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>翻译成 dp 递推形式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumAfterPartitioning</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i, mx = <span class="number">0</span>; j &gt;= <span class="number">0</span> &amp;&amp; j &gt; i - k; j--) &#123;</span><br><span class="line">                mx = Math.max(mx, arr[j]);</span><br><span class="line">                f[i + <span class="number">1</span>] = Math.max(f[j] + (i - j + <span class="number">1</span>) * mx, f[i + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>优化</strong></p>
<p>还没彻底掌握</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumAfterPartitioning</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">var</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i, mx = <span class="number">0</span>; j &gt; i - k &amp;&amp; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                mx = Math.max(mx, arr[j]); <span class="comment">// 一边枚举 j，一边计算子数组的最大值</span></span><br><span class="line">                <span class="comment">// 注意在循环结束前，f[(i+1)%k] 是需要用到的，不能提前覆盖</span></span><br><span class="line">                res = Math.max(res, f[j % k] + (i - j + <span class="number">1</span>) * mx);</span><br><span class="line">            &#125;</span><br><span class="line">            f[(i + <span class="number">1</span>) % k] = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n % k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h3 id="一位机器人左右走"><a href="#一位机器人左右走" class="headerlink" title="一位机器人左右走"></a>一位机器人左右走</h3><blockquote>
<p>给定参数：N，start， aim，K<br>N：给定的一位数组位置数，从1到N<br>start：机器人从哪个位置出发<br>aim：机器人的目的地<br>K：机器人走K步到目的地</p>
<p>问：机器人智能左右走，从start走到aim用K步，有多少种方案，返回方案数</p>
</blockquote>
<p><strong>暴力尝递归法</strong><br>暴力递归是存在大量重复解的问题的，例如我们从7开始走还剩10步，那么会调用（6，9）和（8，9）<br>（6，9）会调用（5，8）和（7，8）<br>（8，9）会调用（7，8）和（9，8）<br>（7，8）就被重复调用了，所以动态规划需要解决重复解问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ways1</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> start, <span class="type">int</span> aim, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (N &lt; <span class="number">2</span> || start &lt; <span class="number">1</span> || start &gt; N || aim &lt; <span class="number">1</span> || aim &gt; N || K &lt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">return</span> process1(start, K, aim, N);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//cur：当前位置</span></span><br><span class="line">   <span class="comment">//rest：剩余位置</span></span><br><span class="line">   <span class="comment">//aim：目的地</span></span><br><span class="line">   <span class="comment">//N：1到N个位置</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> rest, <span class="type">int</span> aim, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123; <span class="comment">//base case， 如果剩下的位置为0，说明K步走完</span></span><br><span class="line">           <span class="keyword">return</span> cur == aim ? <span class="number">1</span> : <span class="number">0</span>; <span class="comment">// 如果此时的位置是aim，那就是一种方案，否则就不是</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果rest大于0，还有步数要走</span></span><br><span class="line">       <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123; <span class="comment">//当走到1时没有别的选择，只能去2</span></span><br><span class="line">           <span class="keyword">return</span> process1(<span class="number">2</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (cur == N) &#123; <span class="comment">// 当走到N时，只能去N-1</span></span><br><span class="line">           <span class="keyword">return</span> process1(N - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> process1(cur - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N) + process1(cur + <span class="number">1</span>, rest - <span class="number">1</span>, aim, N);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>动态规划：记忆化搜索｜自顶向下的动态规划</strong><br>用一个dp二维数组记录每一种状态下的可能性有没有被走过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ways2</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> start, <span class="type">int</span> aim, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (N &lt; <span class="number">2</span> || start &lt; <span class="number">1</span> || start &gt; N || aim &lt; <span class="number">1</span> || aim &gt; N || K &lt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="type">int</span> dp[][] = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>][K + <span class="number">1</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= N; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= K; j++) &#123;</span><br><span class="line">               dp[i][j] = -<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//dp[][]就是缓存表</span></span><br><span class="line">       <span class="comment">//dp[cur][rest] == -1 -&gt; process(cur, rest)之前没算过</span></span><br><span class="line">       <span class="comment">//dp[cur][rest] != -1 -&gt; process(cur, rest)之前算过，返回值就是dp[cur][rest]</span></span><br><span class="line">       <span class="keyword">return</span> process2(start, K, aim, N, dp);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//cur范围：1到N</span></span><br><span class="line">   <span class="comment">//rest范围：0到K</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process2</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> rest, <span class="type">int</span> aim, <span class="type">int</span> N, <span class="type">int</span> dp[][])</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (dp[cur][rest] != -<span class="number">1</span>) &#123; <span class="comment">//缓存命中</span></span><br><span class="line">           <span class="keyword">return</span> dp[cur][rest];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> cur == aim ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">           ans = process2(<span class="number">2</span>, rest - <span class="number">1</span>, aim, N, dp);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == N) &#123;</span><br><span class="line">           ans = process2(N - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N, dp);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          ans = process2(cur - <span class="number">1</span>, rest - <span class="number">1</span>, aim, N, dp) + process2(cur + <span class="number">1</span>, rest - <span class="number">1</span>, aim, N, dp);</span><br><span class="line">       &#125;</span><br><span class="line">       dp[cur][rest] = ans;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>动态规划：最终优化版本</strong><br>动态规划不是原因只是结果，维护一张dp表，找到引起变化的两个元素作为二维表的两个维度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ways3</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> start, <span class="type">int</span> aim, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (N &lt; <span class="number">2</span> || start &lt; <span class="number">1</span> || start &gt; N || aim &lt; <span class="number">1</span> || aim &gt; N || K &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>][K + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//设置好dp[cur][rest]枚举数据的初始值</span></span><br><span class="line">        <span class="comment">//只有rest == 0，cur == aim的时候dp的值才为1</span></span><br><span class="line">        dp[aim][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//dp填表</span></span><br><span class="line">        <span class="comment">//从左到右，从上往下填</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> <span class="number">1</span>; rest &lt;= K; rest++) &#123; <span class="comment">//从第一列开始填</span></span><br><span class="line">            dp[<span class="number">1</span>][rest] = dp[<span class="number">2</span>][rest - <span class="number">1</span>]; <span class="comment">//当位置在1时只依赖于位置2</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">2</span>; cur &lt; N; cur++) &#123;</span><br><span class="line">                dp[cur][rest] = dp[cur - <span class="number">1</span>][rest - <span class="number">1</span>] + dp[cur + <span class="number">1</span>][rest - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            dp[N][rest] = dp[N - <span class="number">1</span>][rest - <span class="number">1</span>]; <span class="comment">//当位置在N时只依赖于位置N-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[start][K];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="左右纸牌问题"><a href="#左右纸牌问题" class="headerlink" title="左右纸牌问题"></a>左右纸牌问题</h3><blockquote>
<p>和 递归4.3.4 一样</p>
<p>给定一个整型数组arr，代表数值不同的纸牌排成一条线。玩家A和玩家B依次拿走每张纸牌，规定玩家A先拿，玩家B后拿，玩家A和玩家B都绝顶聪明。返回最后获胜者的分数。</p>
</blockquote>
<p><strong>递归法：自然分析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据规则返回获胜者的分数</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">win1</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> before(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> after(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> Math.max(p1, p2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在arr[L,,,R]返回上，先手获得的最好分数返回</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">before</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (L == R) &#123; <span class="comment">// 最后一张牌的情况下，base case</span></span><br><span class="line">           <span class="keyword">return</span> arr[L];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//下面这两步和先手的思路不一样，不是后手的人在&quot;尝试&quot;，而是被迫在做决定</span></span><br><span class="line">       <span class="comment">//因为这样个人都很聪明，所以后手的是一定拿的是在L和R的情况下，先手拿的结果中自己哪怕尽力争取也是最小的那个</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> arr[L] + after(arr, L + <span class="number">1</span>, R);</span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> arr[R] + after(arr, L, R - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> Math.max(p1, p2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在arr[L,,,R]返回上，后手获得的最好分数返回</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">after</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> before(arr, L + <span class="number">1</span>, R); <span class="comment">//对方先手拿走了L，只能在L+1里先手拿大的</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> before(arr, L, R - <span class="number">1</span>); <span class="comment">//对方先手拿了R， 只能在R-1里先手拿小的</span></span><br><span class="line">       <span class="keyword">return</span> Math.min(p1, p2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<p><strong>缓存优化</strong><br>自然分析法在调用时会有调用重复，这里加入了缓存优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缓存优化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">win2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span>[][] beforeMap = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">        <span class="type">int</span>[][] afterMap = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123; <span class="comment">//没算过的都是-1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                beforeMap[i][j] = -<span class="number">1</span>;</span><br><span class="line">                afterMap[i][j] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> before2(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, beforeMap, afterMap);</span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> after2(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, beforeMap, afterMap);</span><br><span class="line">        <span class="keyword">return</span> Math.max(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">before2</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span>[][] beforeMap, <span class="type">int</span>[][] afterMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (beforeMap[L][R] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beforeMap[L][R];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">            ans = arr[L];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> arr[L] + after2(arr, L + <span class="number">1</span>, R, beforeMap, afterMap);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> arr[R] + after2(arr, L, R - <span class="number">1</span>, beforeMap, afterMap);</span><br><span class="line">            ans = Math.max(p1, p2);</span><br><span class="line">        &#125;</span><br><span class="line">        beforeMap[L][R] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">after2</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span>[][] beforeMap, <span class="type">int</span>[][] afterMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (afterMap[L][R] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> afterMap[L][R];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (L != R) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> before2(arr, L + <span class="number">1</span>, R, beforeMap, afterMap);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> before2(arr, L, R - <span class="number">1</span>, beforeMap, afterMap);</span><br><span class="line">            ans = Math.min(p1, p2);</span><br><span class="line">        &#125;</span><br><span class="line">        afterMap[L][R] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>终极动态规划</strong><br>先找两张表的边界（base case），再找两张表的每个点的依赖<br>dp表的含义是理解问题和解决问题的关键，最先填好两张表的对角线的位置（即递归的base case），然后再往回推，相当于这个表记录的是递归在完成了第一次深入后的返回的时候的值的记录！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">win3</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line">       <span class="type">int</span>[][] beforeMap = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">       <span class="type">int</span>[][] afterMap = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">       <span class="comment">//给对角线也就是base case ： L == R赋值</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">           beforeMap[i][i] = arr[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//因为每个点的依赖和左边和下边的点相关</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">startCol</span> <span class="operator">=</span> <span class="number">1</span>; startCol &lt; N; startCol++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> startCol;</span><br><span class="line">           <span class="keyword">while</span> (R &lt; N) &#123;</span><br><span class="line">               beforeMap[L][R] = Math.max(arr[L] + afterMap[L + <span class="number">1</span>][R], arr[R] + afterMap[L][R - <span class="number">1</span>]);</span><br><span class="line">               afterMap[L][R] = Math.min(beforeMap[L + <span class="number">1</span>][R], beforeMap[L][R - <span class="number">1</span>]);</span><br><span class="line">               <span class="comment">//实现对角线往下爬</span></span><br><span class="line">               L++;</span><br><span class="line">               R++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Math.max(beforeMap[<span class="number">0</span>][N - <span class="number">1</span>], afterMap[<span class="number">0</span>][N - <span class="number">1</span>]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>







<h3 id="装袋最大重量-1"><a href="#装袋最大重量-1" class="headerlink" title="装袋最大重量"></a>装袋最大重量</h3><blockquote>
<p>给定两个长度为N的数组weights[i] 和 values[i] 分别代表i号物品的重量和价值，给定一个正数bag，表示一个载重bag的袋子，你装的物品不能超过这个重量，返回你能装下最多的价值是多少？</p>
</blockquote>
<p><strong>递归写法见4.2.3 相同问题</strong><br>典型的从左往右尝试模型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span>[] w, <span class="type">int</span>[] v, <span class="type">int</span> bag)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (w == <span class="literal">null</span> || v == <span class="literal">null</span> || w.length != v.length || w.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> process(w, v, <span class="number">0</span>, bag);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//尝试函数</span></span><br><span class="line">   <span class="comment">//当前考虑到了index号货，index往后的货物可以自由选择，返回value</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] w, <span class="type">int</span>[] v, <span class="type">int</span> index, <span class="type">int</span> bag)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (bag &lt; <span class="number">0</span>) &#123; <span class="comment">//不是&lt;=是因为以防有的货物重量为0</span></span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (index == w.length) &#123; <span class="comment">//没货了</span></span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//bag还有空间</span></span><br><span class="line">       <span class="comment">//index有货</span></span><br><span class="line">       <span class="comment">//不要当前的货</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> process(w, v, index + <span class="number">1</span>, bag);</span><br><span class="line">       <span class="comment">//要当前货物</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span>  process(w, v, index + <span class="number">1</span>, bag - w[index]);</span><br><span class="line">       <span class="keyword">if</span> (next != -<span class="number">1</span>) &#123;</span><br><span class="line">           p2 = v[index] + next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Math.max(p1, p2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>调优：</strong><br>主函数的参数w和v是固定的，所以递归的变化取决于index和bag，所以优化从这两个变量入手</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span>[] w, <span class="type">int</span>[] v, <span class="type">int</span> bag)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (w == <span class="literal">null</span> || v == <span class="literal">null</span> || w.length != v.length || w.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> w.length;</span><br><span class="line">       <span class="comment">//index o~N</span></span><br><span class="line">       <span class="comment">//rest 0~bag</span></span><br><span class="line">       <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>][bag + <span class="number">1</span>];</span><br><span class="line">       <span class="comment">//之所以让dp数组是N+1行是因为我们需要多出来的一行来判断index是否超过了w数组长度</span></span><br><span class="line">       <span class="comment">//所以p数组的第N行（最后一行为0）所以就不用赋值了，因为java默认为0</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> N - <span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> <span class="number">0</span>; rest &lt;= bag; rest++) &#123;</span><br><span class="line">               <span class="comment">//dp的状态转移方程由暴力递归的逻辑决定</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> dp[index + <span class="number">1</span>][rest];</span><br><span class="line">               <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">               <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> rest - w[index] &lt; <span class="number">0</span>? -<span class="number">1</span> : dp[index + <span class="number">1</span>][rest - w[index]];</span><br><span class="line">               <span class="keyword">if</span> (next != -<span class="number">1</span>) &#123;</span><br><span class="line">                   p2 = next + v[index];</span><br><span class="line">               &#125;</span><br><span class="line">               dp[index][rest] = Math.max(p1, p2);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[<span class="number">0</span>][bag];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>







<h3 id="数字和字符转化"><a href="#数字和字符转化" class="headerlink" title="数字和字符转化"></a>数字和字符转化</h3><blockquote>
<p>规定 1 和 A对应、2 和 B对应、3 和 C对应</p>
<p>那么一个数字字符串比如“111” 就可以转化为“AAA“、“KA”、“AK”<br>给定一个只有数字组成的字符串，返回有多少种转化结果</p>
<p>思路：找到适当的决策</p>
<ol>
<li>只要任意位置上的数字不是0，就可以找到一个字母与之对应</li>
<li>如果i位置上的字符是3到9之间的数字，那么仅可以做一个决定</li>
<li>如果i是1的话，那么有两种方案</li>
<li>如果i是2的话，那么需要看i和i+1的数字组合起来有没有超过26</li>
</ol>
</blockquote>
<p><strong>暴力尝试</strong></p>
<p>做好逻辑推理和分类讨论</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">number</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> process(str.toCharArray(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假设str[0~i-1]无需过问</span></span><br><span class="line">    <span class="comment">//就看str[i....]往后有多少种方法并返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">//当i的位置来到终止位，说明前面已经找到了一种方案，返回1</span></span><br><span class="line">        <span class="keyword">if</span> (i == str.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当i的位置元素是0，说明当前方法失效</span></span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当以上情况都不是的时候说明开始进行决策：</span></span><br><span class="line">        <span class="comment">//决策一：当前位置的数字单独转成字母</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ways</span> <span class="operator">=</span> process(str, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//决策二：如果当前位置的下一个位置没有越界且他们两个组成的字母没有超过26则也是方法</span></span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; str.length &amp;&amp; (str[i] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + str[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> &lt; <span class="number">27</span>) &#123;</span><br><span class="line">            ways += process(str, i + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ways;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>DP优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> str.length;</span><br><span class="line">        <span class="comment">//由于当前位置的种类个数取决于下一个位置，所以dp表是从右往左填</span></span><br><span class="line">        <span class="comment">//又因为i的位置有可能走到 越界的位置裁判定成功，所以dp表的长度应该加1</span></span><br><span class="line">        <span class="type">int</span> dp[] = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//如果当前位置正确走到了终止则是一个允许的方案，所以最后一位赋1</span></span><br><span class="line">        dp[N] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">ways</span> <span class="operator">=</span> dp[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; str.length &amp;&amp; (str[i] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + str[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> &lt; <span class="number">27</span>) &#123;</span><br><span class="line">                    ways += dp[i + <span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i] = ways;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="贴纸凑目标串"><a href="#贴纸凑目标串" class="headerlink" title="贴纸凑目标串"></a>贴纸凑目标串</h3><blockquote>
<p>题目：<br>给定一个字符串 str，给定一个字符串类型的数组 arr， 出现的字符都是小写英文，arr 每一个字符串代表一张贴纸（假设每一种贴纸无穷张），你可以把单个字符剪开使用，目的是拼出 str 来，返回需要<strong>至少</strong>多少张贴纸可以完成这个任务。</p>
<p>举例：<br>Str &#x3D; “babac” , arr &#x3D; {“ba”, “c”, “abcd”}<br>至少需要两张贴纸<br>为了凑出 babac， 大概有以下几种策略：<br>2 张 ba + 1 张 c<br>1 张 ba + 1 张 abcd<br>2 张 babac<br>由此可见，至少需要两张贴纸才可以完成任务</p>
</blockquote>
<p><strong>最初始的尝试策略–暴力递归</strong></p>
<p>暴力递归的思路就是：从 arr 的第一个字符串开始遍历尝试，每次遍历时将 arr 的字符串从 str 中去除（这里需要量身定制一个minus函数，用于从一个小写字符串中去除另外一个小写字符串的所有字符），然后继续递归调用这个函数，这样就可以做到毫无保留的暴力递归尝试。但是此方法效率太低，leetcode的时间都过不了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方案1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minStickers1</span><span class="params">(String[] stickers, String target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> process1(stickers, target);</span><br><span class="line">        <span class="comment">//如果ans是整型最大值，说明无有效方案，所以返回-1</span></span><br><span class="line">        <span class="keyword">return</span> ans == Integer.MAX_VALUE ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(String[] stickers, String target)</span> &#123;</span><br><span class="line">        <span class="comment">//base case 是当这个 target 的长度为 0 时返回 0</span></span><br><span class="line">        <span class="comment">//因为此时说明target已经被每次遍历的贴纸去除干净了</span></span><br><span class="line">        <span class="keyword">if</span> (target.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//min 是还需要的最小贴纸数的数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (String first : stickers) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rest</span> <span class="operator">=</span> minus(target, first);</span><br><span class="line">            <span class="keyword">if</span> (rest.length() != target.length()) &#123;</span><br><span class="line">                min = Math.min(min, process1(stickers, rest));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// min 的值是还需要的最小贴纸数，还需要再加上现在的已经选中的1</span></span><br><span class="line">        <span class="keyword">return</span> min + (min == Integer.MAX_VALUE ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先完成一个函数用来实现一个小写字符串去掉另一个小写字符串的字符后剩下的字符组成的字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">minus</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] str1 = s1.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] str2 = s2.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> cha : str1) &#123;</span><br><span class="line">            count[cha - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> cha : str2) &#123;</span><br><span class="line">            count[cha - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; count[i]; j++) &#123;</span><br><span class="line">                    builder.append((<span class="type">char</span>)(i + <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>暴力递归的优化：</strong></p>
<ul>
<li>优先判断含有当前target第一个字符的贴纸</li>
<li>做两张词频表</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方案2</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minStickers2</span><span class="params">(String stickers[], String target)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> stickers.length;</span><br><span class="line">       <span class="type">int</span>[][] count = <span class="keyword">new</span> <span class="title class_">int</span>[N][<span class="number">26</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">           <span class="type">char</span>[] str = stickers[i].toCharArray();</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">char</span> cha : str) &#123;</span><br><span class="line">               count[i][cha - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> process2(count, target);</span><br><span class="line">       <span class="keyword">return</span> ans == Integer.MAX_VALUE ? -<span class="number">1</span> : ans;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将 stickers 换成二维数组</span></span><br><span class="line">   <span class="comment">// stickers[i] 表示 arr 的第 i 号贴纸的字符词频统计</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process2</span><span class="params">(<span class="type">int</span>[][] stickers, String target)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (target.length() == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">char</span>[] tar = target.toCharArray();</span><br><span class="line">       <span class="type">int</span>[] tarCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">char</span> cha : tar) &#123;</span><br><span class="line">           tarCount[cha - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> stickers.length;</span><br><span class="line">       <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">           <span class="type">int</span>[] sticker = stickers[i];</span><br><span class="line">           <span class="keyword">if</span> (sticker[tar[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (tarCount[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> tarCount[j] - sticker[j];</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; num; k++) &#123;</span><br><span class="line">                           builder.append((<span class="type">char</span>)(j + <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="type">String</span> <span class="variable">rest</span> <span class="operator">=</span> builder.toString();</span><br><span class="line">               min = Math.min(min, process2(stickers, rest));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> min + (min == Integer.MAX_VALUE ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>方案三</strong></p>
<p>加入傻缓存优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方案三</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minStickers3</span><span class="params">(String stickers[], String target)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> stickers.length;</span><br><span class="line">       <span class="type">int</span>[][] count = <span class="keyword">new</span> <span class="title class_">int</span>[N][<span class="number">26</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">           <span class="type">char</span>[] str = stickers[i].toCharArray();</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">char</span> cha : str) &#123;</span><br><span class="line">               count[i][cha - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       HashMap&lt; String, Integer&gt; dp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       dp.put(<span class="string">&quot;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> process3(count, target, dp);</span><br><span class="line">       <span class="keyword">return</span> ans == Integer.MAX_VALUE ? -<span class="number">1</span> : ans;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process3</span><span class="params">(<span class="type">int</span>[][] stickers, String target, HashMap&lt;String, Integer&gt; dp)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (dp.containsKey(target)) &#123;</span><br><span class="line">           <span class="keyword">return</span> dp.get(target);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">char</span>[] tar = target.toCharArray();</span><br><span class="line">       <span class="type">int</span>[] tarCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">char</span> cha : tar) &#123;</span><br><span class="line">           tarCount[cha - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> stickers.length;</span><br><span class="line">       <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">           <span class="type">int</span>[] sticker = stickers[i];</span><br><span class="line">           <span class="keyword">if</span> (sticker[tar[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (tarCount[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> tarCount[j] - sticker[j];</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; num; k++) &#123;</span><br><span class="line">                           builder.append((<span class="type">char</span>)(j + <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="type">String</span> <span class="variable">rest</span> <span class="operator">=</span> builder.toString();</span><br><span class="line">               min = Math.min(min, process3(stickers, rest, dp));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> min + (min == Integer.MAX_VALUE ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">       dp.put(target, ans);</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



















<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-08%2021.23.32.png" alt="截屏2022-08-08 21.23.32" style="zoom:50%;" />



<p><strong>方案 1: 暴力递归</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longCommonSubsequence</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() == <span class="number">0</span> || s2.length() == <span class="number">0</span> || s1 == <span class="literal">null</span> || s2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] str1 = s1.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] str2 = s2.toCharArray();</span><br><span class="line">        <span class="keyword">return</span> process1(str1, str2, str1.length - <span class="number">1</span>, str2.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此递归的含义是str1[0..i] 与 str2[0...j]的最长公共子序列是多长</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process1</span><span class="params">(<span class="type">char</span>[] str1, <span class="type">char</span>[] str2, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str1[i] == str2[j] ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[i] == str2[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> process1(str1, str2, i, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[i] == str2[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> process1(str1, str2, i - <span class="number">1</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//有三种可能性去尝试</span></span><br><span class="line">            <span class="comment">//不考虑以 i 位置结尾，但考虑以 j 位置结尾</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> process1(str1, str2, i - <span class="number">1</span>, j);</span><br><span class="line">            <span class="comment">//不考虑以 j 位置结尾，但考虑以 i 位置结尾</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> process1(str1, str2, i, j - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//上面两种可能性以外还有一种可能性:一定要以 i 和 j 结尾</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p3</span> <span class="operator">=</span> str1[i] == str2[j] ? (<span class="number">1</span> + process1(str1, str2, i - <span class="number">1</span>, j - <span class="number">1</span>)) : Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">return</span> Math.max(p1, Math.max(p2, p3));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p><strong>方案2 ：dp优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longCommonSubsequence2</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text1.length() == <span class="number">0</span> || text2.length() == <span class="number">0</span> || text1 == <span class="literal">null</span> || text2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] str1 = text1.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] str2 = text2.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> str1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> str2.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][M];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = str1[<span class="number">0</span>] == str2[<span class="number">0</span>] ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; M; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = str1[<span class="number">0</span>] == str2[j] ? <span class="number">1</span> : dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = str1[i] == str2[<span class="number">0</span>] ? <span class="number">1</span> : dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; M; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> dp[i][j - <span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">p3</span> <span class="operator">=</span> str1[i] == str2[j] ? (<span class="number">1</span> + dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) : <span class="number">0</span>;</span><br><span class="line">                dp[i][j] = Math.max(p1, Math.max(p2, p3));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N - <span class="number">1</span>][M - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="最长回文子序列"><a href="#最长回文子序列" class="headerlink" title="最长回文子序列"></a>最长回文子序列</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-08%2022.45.09.png" alt="截屏2022-08-08 22.45.09" style="zoom:50%;" />



<p><strong>方案1: 利用上一题，最长子序列</strong></p>
<p>将给定的字符串 s 逆序 ss ， 求 s 与 ss 的最长子公共子序列，求得的就是最长回文子序列</p>
<p><strong>方案2：暴力尝试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lpsl</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> process(s.toCharArray(), <span class="number">0</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归函数的意义是 str[L...R] 上的最长回文子序列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> L , <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="comment">//如果只剩一个字符那一定是回文串</span></span><br><span class="line">        <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果只剩两个字符，那么这两个字符相同的话就是2，不相同的就是1</span></span><br><span class="line">        <span class="keyword">if</span> (L == R - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str[L] == str[R] ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//接下来是4种普遍情况</span></span><br><span class="line">        <span class="comment">//不以 L 开头也不以 R 结尾</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> process(str, L + <span class="number">1</span>, R - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//以 L 开头，但不以 R 结尾</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> process(str, L, R - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//不以 L 开头，以 R 结尾</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p3</span> <span class="operator">=</span> process(str, L + <span class="number">1</span>, R);</span><br><span class="line">        <span class="comment">// 以 L 开头， 以 R 结尾</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p4</span> <span class="operator">=</span> str[L] == str[R] ? (<span class="number">2</span> + process(str, L + <span class="number">1</span>, R - <span class="number">1</span>)) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(Math.max(p1, p2), Math.max(p3, p4));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>方案3 ：dp优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lpsl2</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">        <span class="comment">//根据递归的base case 填好初始值</span></span><br><span class="line">        <span class="comment">//dp表的下半区是没用的且对角全为1，对角线上面那条平行线需要判断</span></span><br><span class="line">        dp[N - <span class="number">1</span>][N - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">            dp[i][i+<span class="number">1</span>] = str[i] == str[i+<span class="number">1</span>] ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> N - <span class="number">3</span>; L &gt;= <span class="number">0</span>; L--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> L + <span class="number">2</span>; R &lt; N; R++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> dp[L + <span class="number">1</span>][R - <span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> dp[L][R - <span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">p3</span> <span class="operator">=</span> dp[L + <span class="number">1</span>][R];</span><br><span class="line">                <span class="type">int</span> <span class="variable">p4</span> <span class="operator">=</span> str[L] == str[R] ? (dp[L + <span class="number">1</span>][R - <span class="number">1</span>] + <span class="number">2</span>) : <span class="number">0</span>;</span><br><span class="line">                dp[L][R] = Math.max(Math.max(p1, p2), Math.max(p3, p4));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][N - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>方案4:继续优化</strong></p>
<p>画个二维表仔细思考可以得出，没必要和左下的那个格子比较，这是第一个优化的点，第二点是只有L和R位置的字符相等才有必要去和第四种情况比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lpsl2</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">        <span class="comment">//根据递归的base case 填好初始值</span></span><br><span class="line">        <span class="comment">//dp表的下半区是没用的且对角全为1，对角线上面那条平行线需要判断</span></span><br><span class="line">        dp[N - <span class="number">1</span>][N - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">            dp[i][i+<span class="number">1</span>] = str[i] == str[i+<span class="number">1</span>] ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> N - <span class="number">3</span>; L &gt;= <span class="number">0</span>; L--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> L + <span class="number">2</span>; R &lt; N; R++) &#123;</span><br><span class="line">                dp[L][R] = Math.max(dp[L][R - <span class="number">1</span>], dp[L + <span class="number">1</span>][R]);</span><br><span class="line">                <span class="keyword">if</span> (str[L] == str[R]) &#123;</span><br><span class="line">                    dp[L][R] = Math.max(dp[L][R], dp[L + <span class="number">1</span>][R - <span class="number">1</span>] + <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][N - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>











<h3 id="象棋跳跃问题"><a href="#象棋跳跃问题" class="headerlink" title="象棋跳跃问题"></a>象棋跳跃问题</h3><blockquote>
<p>已知象棋规则中马走日，给定棋盘大小，马的初始位置在(0,0)，目标是在跳 k 步的情况下跳到目标坐标，问有多少种方法</p>
</blockquote>
<p><strong>暴力</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">horseJump</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jump(<span class="number">0</span>, <span class="number">0</span>, k, a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 易想到以下递归</span></span><br><span class="line">    <span class="comment">// 当前来到 (x, y)</span></span><br><span class="line">    <span class="comment">// 还剩下rest步</span></span><br><span class="line">    <span class="comment">// 跳完rest步正好跳到 (a, b) 有多少种可能</span></span><br><span class="line">    <span class="comment">//棋盘大小 10 * 9</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> rest, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">9</span> || y &lt; <span class="number">0</span> || y &gt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (x == a &amp;&amp; y == b) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 列举马走日的八种可能性</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ways</span> <span class="operator">=</span> jump(x + <span class="number">2</span>, y + <span class="number">1</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        ways += jump(x + <span class="number">1</span>, y + <span class="number">2</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        ways += jump(x - <span class="number">1</span>, y + <span class="number">2</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        ways += jump(x - <span class="number">2</span>, y + <span class="number">1</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        ways += jump(x - <span class="number">2</span>, y - <span class="number">1</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        ways += jump(x - <span class="number">1</span>, y - <span class="number">2</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        ways += jump(x + <span class="number">1</span>, y - <span class="number">2</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        ways += jump(x + <span class="number">2</span>, y - <span class="number">1</span>, rest - <span class="number">1</span>, a, b);</span><br><span class="line">        <span class="keyword">return</span> ways;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p><strong>dp优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dpJump</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">9</span>][k+<span class="number">1</span>];</span><br><span class="line">        dp[a][b][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> <span class="number">1</span>; rest &lt;= k; rest++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; <span class="number">9</span>; y++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">ways</span> <span class="operator">=</span> pick(dp, x + <span class="number">2</span>, y + <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    ways += pick(dp, x + <span class="number">1</span>, y + <span class="number">2</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    ways += pick(dp, x - <span class="number">1</span>, y + <span class="number">2</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    ways += pick(dp, x - <span class="number">2</span>, y + <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    ways += pick(dp, x - <span class="number">2</span>, y - <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    ways += pick(dp, x - <span class="number">1</span>, y - <span class="number">2</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    ways += pick(dp, x + <span class="number">1</span>, y - <span class="number">2</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    ways += pick(dp, x + <span class="number">2</span>, y - <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">                    dp[x][y][rest] = ways;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>][k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了防止dp表拿值的时候越界报错，写一个pick函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">pick</span><span class="params">(<span class="type">int</span>[][][] dp, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> rest)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">9</span> || y &lt; <span class="number">0</span> || y &gt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[x][y][rest];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>













<h3 id="咖啡问题"><a href="#咖啡问题" class="headerlink" title="咖啡问题"></a>咖啡问题</h3><blockquote>
<p>给定一个数组 arr， arr[i]代表第 i 号咖啡机泡一杯咖啡的时间<br>给定一个正数 N，表示 N 个人等着咖啡机泡咖啡，每台咖啡机只能轮流泡咖啡<br>只有一台咖啡机，一次只能洗一个杯子，时间耗费a，洗完才能洗下一杯<br>每个咖啡杯也可以自己挥发干净，时间耗费 b，咖啡杯可以并行挥发<br>假设所有人拿到咖啡之后立刻喝干净，<br>返回从开始等到所有咖啡机变干净的最短时间<br>三个参数: int[ ] arr、int N, int a、int b</p>
</blockquote>
<h2 id="动归入门"><a href="#动归入门" class="headerlink" title="动归入门"></a>动归入门</h2><h3 id="不同的二叉搜索树"><a href="#不同的二叉搜索树" class="headerlink" title="不同的二叉搜索树"></a>不同的二叉搜索树</h3><blockquote>
<p>Leetcode : <a href="https://leetcode.cn/problems/unique-binary-search-trees/">https://leetcode.cn/problems/unique-binary-search-trees/</a></p>
<p>题目描述：<br>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。</p>
</blockquote>
<p><strong>简单的暴力</strong></p>
<p>这个尝试是符合正常思维的，主要思想是当有 n 个节点时，轮流让每个节点作为根节点，而当根节点确定后其能构建的搜索二叉树的数量又取决于左右两棵子树的种类相乘。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> process(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整数n有多少个二叉搜索树</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">     <span class="comment">// 虽然当 n = 0 时意味着左子树没有节点，但是由于是可能性相乘，所以返回1</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 使用i当头结点。如果左树有m个搜索子树，右树有n个搜索子树。那么 m * n 就是以i为结点的搜索子树个数。</span></span><br><span class="line">            <span class="comment">// 左树有多少种子树</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> process(i - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 右树有多少种子树</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> process(n - i);</span><br><span class="line">            ans += p1 * p2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>比较妙的优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">2</span> * numTrees(n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i &lt; n;i++)&#123;</span><br><span class="line">              sum += numTrees(i - <span class="number">1</span>) * numTrees(n - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>缓存优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numTrees2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 结点个数为0或者1的时候，搜索子树个数为1</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f(n, dp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整数n有多少个二叉搜索树</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] dp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[n] != -<span class="number">1</span>) <span class="keyword">return</span> dp[n];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 使用i当头结点。如果左树有m个搜索子树，右树有n个搜索子树。那么 m * n 就是以i为结点的搜索子树个数。</span></span><br><span class="line">            <span class="comment">// 左树有多少种子树</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> f(i - <span class="number">1</span>, dp);</span><br><span class="line">            <span class="comment">// 右树有多少种子树</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> f(n - i, dp);</span><br><span class="line">            ans += p1 * p2;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[n] = ans;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>最终优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numTrees3</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">2</span>; index &lt;= n; index++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 从1...index。有多少个搜索子树</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> <span class="number">1</span>; node &lt;= index; node++) &#123;</span><br><span class="line">                <span class="comment">// 以node值为头结点</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> dp[node - <span class="number">1</span>]; <span class="comment">// 左树有多少个搜索子树</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> dp[index - node]; <span class="comment">// 右树有多少个搜索子树</span></span><br><span class="line">                ans += p1 * p2;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[index] = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>











<h3 id="字符串递增"><a href="#字符串递增" class="headerlink" title="字符串递增"></a>字符串递增</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-11%2013.25.33.png" alt="截屏2022-06-11 13.25.33" style="zoom:50%;" />







<h3 id="粉刷房子问题"><a href="#粉刷房子问题" class="headerlink" title="粉刷房子问题"></a>粉刷房子问题</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-25%2016.23.07.png" alt="截屏2022-06-25 16.23.07" style="zoom:50%;" />











<h3 id="剪绳子-1"><a href="#剪绳子-1" class="headerlink" title="剪绳子_1"></a>剪绳子_1</h3><blockquote>
<p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]<em>k[1]</em>…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/jian-sheng-zi-lcof">https://leetcode.cn/problems/jian-sheng-zi-lcof</a></p>
</blockquote>
<p><strong>递归 和 缓存优化</strong></p>
<p>递归的主要思想是：当剪到 n &#x3D;&#x3D; 0 时，一位置绳子没办法再剪了，就返回 1，然后每次递归分为两个分支–剪或者不剪，剪剪的话剪多少则是由 for 循环决定的.但是由于有太多重复计算，所以超出时间限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 下面这个递归在思维上更好理解，速度也更快点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> process(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= (n &gt;&gt; <span class="number">1</span>); i++) &#123;</span><br><span class="line">            max = Math.max(Math.max(i * process(n - i), i * (n - i)), max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp =<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">cut</span> <span class="operator">=</span> <span class="number">3</span>; cut &lt;= n; cut++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= (cut &gt;&gt; <span class="number">1</span>); i++) &#123;</span><br><span class="line">                max = Math.max(Math.max(i * dp[cut - i], i * (cut - i)), max);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[cut] = max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>贪心–数学</strong></p>
<p>利用了均值不等式，求解最大值的数字特点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">3</span>) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> n / <span class="number">3</span>, b = n % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> (<span class="type">int</span>)Math.pow(<span class="number">3</span>, a);</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">1</span>) <span class="keyword">return</span> (<span class="type">int</span>)Math.pow(<span class="number">3</span>, a - <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)Math.pow(<span class="number">3</span>, a) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="相似度为k的字符串"><a href="#相似度为k的字符串" class="headerlink" title="相似度为k的字符串"></a>相似度为k的字符串</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-21%2023.02.33.png" alt="截屏2022-09-21 23.02.33" style="zoom:50%;" />



<p><strong>方式一 ： 枚举</strong></p>
<p>这是最简单粗暴的一种方式，枚举所有的可能性，同时很自然的想到用Set来记录所有遍历过的可能性来剪枝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kSimilarity</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        Deque&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        queue.offer(s1);</span><br><span class="line">        visited.add(s1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 之所以敢写while true 是因为s1一定可以转变成s2，我们只需要找到结果返回</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 我们每次需要遍历queue的size次，以此来找到当前队列中所有的状态的下一个状态</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> queue.size(); i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cur</span> <span class="operator">=</span> queue.pollFirst();</span><br><span class="line">                <span class="keyword">if</span> (cur.equals(s2)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (String s : next(cur, s2)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!visited.contains(s)) &#123;</span><br><span class="line">                        visited.add(s);</span><br><span class="line">                        queue.offer(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将所有满足条件的下一个状态的字符串以list返回</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">next</span><span class="params">(String cur, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = s2.length();</span><br><span class="line">        <span class="type">char</span>[] cs = cur.toCharArray();</span><br><span class="line">        List&lt;String&gt; next = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 找到第一个cur 和 s2不相等的字符的索引</span></span><br><span class="line">        <span class="keyword">for</span> (; cs[i] == s2.charAt(i); ++i) &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cs[j] == s2.charAt(i) &amp;&amp; cs[j] != s2.charAt(j)) &#123;</span><br><span class="line">                swap(cs, i, j);</span><br><span class="line">                next.add(<span class="keyword">new</span> <span class="title class_">String</span>(cs));</span><br><span class="line">                swap(cs, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] cs, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> cs[i];</span><br><span class="line">        cs[i] = cs[j];</span><br><span class="line">        cs[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>方式二</strong></p>
<p><strong>方式三</strong></p>
<p><strong>方式四</strong></p>
<h3 id="使序列递增最小交换"><a href="#使序列递增最小交换" class="headerlink" title="使序列递增最小交换"></a>使序列递增最小交换</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-11%2016.39.06.png" alt="截屏2022-10-11 16.39.06" style="zoom:50%;" />



<p><strong>分析</strong></p>
<p>由于题目指明：一定会有解，所以，所有位置的数字的情况由以下两种情况组成</p>
<ul>
<li>当前位置和上一个位置的数字已经是单调递增的关系<ul>
<li>nums1[i] &gt; nums1[i - 1] &amp;&amp; nums2[i] &gt; nums2[i - 1]</li>
</ul>
</li>
<li>当前位置的数字交换以后和上一个位置的数字是单调递增的关系<ul>
<li>nums1[i] &gt; nums2[i - 1] &amp;&amp; nums2[i] &gt; nums1[i - 1]</li>
</ul>
</li>
</ul>
<p><strong>基本方法</strong></p>
<p>最基本的、毫无优化的方法就是使用dp 数组分类讨论上述情况,但是效率很低</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSwap</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123; </span><br><span class="line">            <span class="comment">// 换不换都是递增</span></span><br><span class="line">            <span class="keyword">if</span> ((nums1[i] &gt; nums1[i-<span class="number">1</span>] &amp;&amp; nums2[i] &gt; nums2[i-<span class="number">1</span>]) &amp;&amp; </span><br><span class="line">                (nums1[i] &gt; nums2[i-<span class="number">1</span>] &amp;&amp; nums2[i] &gt; nums1[i-<span class="number">1</span>])) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> Math.min(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                    dp[i][<span class="number">0</span>] = cur;</span><br><span class="line">                    dp[i][<span class="number">1</span>] = cur + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 换了才递增</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] &gt; nums2[i-<span class="number">1</span>] &amp;&amp; nums2[i] &gt; nums1[i-<span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                dp[i][<span class="number">1</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                dp[i][<span class="number">1</span>] = dp[i-<span class="number">1</span>][<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[n-<span class="number">1</span>][<span class="number">0</span>], dp[n-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>滚动数组优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSwap</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">      <span class="comment">// 滚动数组优化：</span></span><br><span class="line">       <span class="comment">// 由于当前位置仅由前一个位置决定，所以可以用关东数组优化：即</span></span><br><span class="line">       <span class="comment">// 用两个变量代表dp[i][0] 和 dp[i][1]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">           <span class="comment">// at 和 bt 用来存放上一个dp[1][0] 和 dp[i][1]的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">at</span> <span class="operator">=</span> a, bt = b;</span><br><span class="line">          <span class="comment">// 这个用来记录当前dp值</span></span><br><span class="line">            a = b = n;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &gt; nums1[i - <span class="number">1</span>] &amp;&amp; nums2[i] &gt; nums2[i - <span class="number">1</span>])  &#123;</span><br><span class="line">                a = Math.min(a, at);</span><br><span class="line">                b = Math.min(b, bt + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &gt; nums2[i - <span class="number">1</span>] &amp;&amp; nums2[i] &gt; nums1[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                a = Math.min(a, bt);</span><br><span class="line">                b = Math.min(b, at + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h3 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h3><blockquote>
<p>Leetcode 5 </p>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="comment">// 当 s 的长度为1时，必定是回文，所以直接返回 s 本身</span></span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 声明 dp 数组</span></span><br><span class="line">        <span class="comment">// dp[i][j] 表示从 i 到 j 是不是回文</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len][len];</span><br><span class="line">        <span class="comment">// 所有一个字符的串都是回文串，所以边界设置为 true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录当前最长回文字串的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 记录当前回文字串的起点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] ss = s.toCharArray();</span><br><span class="line">        <span class="comment">// 用双层for来遍历每一种可能的字符串，但用dp空间换时间</span></span><br><span class="line">        <span class="comment">// 这个 L 表示现在检查的回文串从 2 开始（因为1肯定是回文）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">2</span>;  L &lt;= len; L++) &#123;</span><br><span class="line">            <span class="comment">// 然后从0开始遍历每一个字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="comment">// j 表示当前子串的右端点</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> L + i - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 右端点界限判断</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= len) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// dp 策略：</span></span><br><span class="line">                <span class="comment">// 1. 如果当前子串的两端不相等直接赋值 false</span></span><br><span class="line">                <span class="comment">// 2. 如果当前字串两端相等，取决于当前子串的长度</span></span><br><span class="line">                <span class="comment">//  如果是小于等于3，则可直接由两端判定是true</span></span><br><span class="line">                <span class="comment">//  如果是不是，则其值取决于里面是否是回文子串</span></span><br><span class="line">                <span class="keyword">if</span> (ss[i] != ss[j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 更新子串最大长度并记录索引</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; maxLen) &#123;</span><br><span class="line">                    maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin, begin + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="最大加号标志"><a href="#最大加号标志" class="headerlink" title="最大加号标志"></a>最大加号标志</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-11%2010.16.42.png" alt="截屏2022-11-11 10.16.42" style="zoom:50%;" />



<p><strong>预处理+模拟</strong></p>
<p>声明四个方向的前缀和数组，每个元素的加号阶数由四个方向中最短的那一个决定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] mines)</span> &#123;</span><br><span class="line">        <span class="comment">// 预处理 + 模拟</span></span><br><span class="line">        <span class="comment">// 由于要预处理，所以要多加2的边际</span></span><br><span class="line">        <span class="type">int</span>[][] g = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>][n + <span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 下面两个for循环做出grid数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Arrays.fill(g[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] mine: mines) &#123;</span><br><span class="line">            g[mine[<span class="number">0</span>] + <span class="number">1</span>][mine[<span class="number">1</span>] + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 四个前缀数组</span></span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span>[][] b = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span>[][] d = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">2</span>][n+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 给前缀数组赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    a[i][j] = a[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">                    b[i][j] = b[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (g[n + <span class="number">1</span> - i][n + <span class="number">1</span> - j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    c[n + <span class="number">1</span> - i][n + <span class="number">1</span> - j] = c[n + <span class="number">1</span> - i][n + <span class="number">2</span> - j] + <span class="number">1</span>;</span><br><span class="line">                    d[n + <span class="number">1</span> - i][n + <span class="number">1</span> - j] = d[n + <span class="number">2</span> - i][n + <span class="number">1</span> - j] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                ans = Math.max(ans, </span><br><span class="line">                Math.min(</span><br><span class="line">                    Math.min(a[i][j], b[i][j]),</span><br><span class="line">                    Math.min(c[i][j], d[i][j])</span><br><span class="line">                ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>动态规划</strong></p>
<p>思维也类似于前缀和数组，但是不用四个数组来缓存前缀和，而是每个方向上找最小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] mines)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Arrays.fill(dp[i], n);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; banned = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] vec : mines) &#123;</span><br><span class="line">            banned.add(vec[<span class="number">0</span>] * n + vec[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* left */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.contains(i * n + j)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j], count);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* right */</span> </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.contains(i * n + j)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j], count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* up */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.contains(j * n + i)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[j][i] = Math.min(dp[j][i], count);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* down */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banned.contains(j * n + i)) &#123;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[j][i] = Math.min(dp[j][i], count);</span><br><span class="line">                ans = Math.max(ans, dp[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>











<h3 id="礼物最大价值"><a href="#礼物最大价值" class="headerlink" title="礼物最大价值"></a>礼物最大价值</h3><blockquote>
<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>
<p>LeetCode: 剑指 47</p>
</blockquote>
<p><strong>自己的第一次写的方法</strong></p>
<p>纪念一下自己写出的第一道中等以上的动归。<br>虽然题目读完就知道一定是用动归来写，但是需要弄清楚一个底层逻辑，就是当走到  i，j 位置时，当前拿到的礼物的最大价值是可以唯一确定的，因为只有两种走路方式，向右或者向下，每次都可以分解为两个方向二选一，一直分解到从 0，0出发，如果是四个方向的话，就不能用动态规划来解决了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="comment">//初始化 dp 数组，两条边只需要累加即可</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = grid[i][<span class="number">0</span>] + dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = grid[<span class="number">0</span>][j] + dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// 从两个方向中选出最大的那个</span></span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                dp[i][j] += grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>代码简化版写法，但是速度可能没提升太多</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// 相当于用 if 判断来代替了我的初始化的过程</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) dp[i][j] = Math.max(dp[i][j], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) dp[i][j] = Math.max(dp[i][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                dp[i][j] += grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>用两个一维数组代替dp数组，减少空间复杂度</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 数位动规</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 旋转数字</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-25%2023.56.26.png&quot;</span> alt=<span class="string">&quot;截屏2022-09-25 23.56.26&quot;</span> style=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**方法一：找规律**</span><br><span class="line"></span><br><span class="line">规律总结起来就一个字：一个数如果是好数，那么所有位的数字都必须是 0125689 里的，且至少有一位是 <span class="number">2589</span> 里的</span><br><span class="line">用两个map存储两组数字，然后再单独写一个判断是否好数的方法，弹出每一位数字就好</span><br><span class="line">代码比较简单，就不写了，效率也比较低。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**方法二：加强查找**</span><br><span class="line"></span><br><span class="line">用一种巧妙的方式存储有效旋转数字</span><br><span class="line">可能在效率上也不是多么高效，但是非常巧妙</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="comment">// 用距离 + 分类去判断是否有效</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] check = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rotatedDigits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">must</span> <span class="operator">=</span> <span class="literal">true</span>, least = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; num.length(); j++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">cur</span> <span class="operator">=</span> num.charAt(j);</span><br><span class="line">                <span class="keyword">if</span> (check[cur - <span class="string">&#x27;0&#x27;</span>] == -<span class="number">1</span> ) &#123;</span><br><span class="line">                    must = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (check[cur - <span class="string">&#x27;0&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    least = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (must &amp;&amp; least) &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>方法三：数位动态规划</strong></p>
<h2 id="动归-二分"><a href="#动归-二分" class="headerlink" title="动归 + 二分"></a>动归 + 二分</h2><h2 id="动归-数组"><a href="#动归-数组" class="headerlink" title="动归 + 数组"></a>动归 + 数组</h2><h3 id="填充书架"><a href="#填充书架" class="headerlink" title="填充书架"></a>填充书架</h3><blockquote>
<p>给定一个数组 <code>books</code> ，其中 <code>books[i] = [thicknessi, heighti]</code> 表示第 <code>i</code> 本书的厚度和高度。你也会得到一个整数 <code>shelfWidth</code> 。</p>
<p><strong>按顺序</strong> 将这些书摆放到总宽度为 <code>shelfWidth</code> 的书架上。</p>
<p>先选几本书放在书架上（它们的厚度之和小于等于书架的宽度 <code>shelfWidth</code> ），然后再建一层书架。重复这个过程，直到把所有的书都放在书架上。</p>
<p>需要注意的是，在上述过程的每个步骤中，<strong>摆放书的顺序与你整理好的顺序相同</strong>。</p>
<ul>
<li>例如，如果这里有 5 本书，那么可能的一种摆放情况是：第一和第二本书放在第一层书架上，第三本书放在第二层书架上，第四和第五本书放在最后一层书架上。（书架自上而下去建）</li>
</ul>
<p>每一层所摆放的书的最大高度就是这一层书架的层高，书架整体的高度为各层高之和。</p>
<p>以这种方式布置书架，返回书架整体可能的最小高度。</p>
<p>LeetCode 1105</p>
</blockquote>
<p><strong>暴力递归</strong></p>
<p>首先为什么可以用递归解决这个问题呢？– 假设我们最后一层摆满了4本书，现在还有3本书，那么总共7本书的最小高度问题就变成了3本书的最小高度加上最底下那一层的4本书的最高高度。<br>我们可以这么考虑从后往前遍历 books，每次遍历到一个位置就开始 for 循环，for 循环的目的是枚举每一层可以放多少本书的所有情况，然后每一种情况的最优解又取决于剩下的书的最优解，递归就形成了，最后返回ans。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法无法通过 LeetCode 提交，超时</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] books;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> shelfWidth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minHeightShelves</span><span class="params">(<span class="type">int</span>[][] books, <span class="type">int</span> shelfWidth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">        <span class="built_in">this</span>.shelfWidth = shelfWidth;</span><br><span class="line">        <span class="keyword">return</span> dfs(books.length - <span class="number">1</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 传入的参数的含义是：放置 i 本书所需要的最小书架高度,所以递归最终 return 的就是答案</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 没有书的话书架高度是 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE, leftW = shelfWidth, maxH = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            leftW -= books[j][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (leftW &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            maxH = Math.max(maxH, books[j][<span class="number">1</span>]);</span><br><span class="line">            ans = Math.min(ans, dfs(j - <span class="number">1</span>) + maxH);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>递归 + 记忆化搜索</strong></p>
<p>很明显，上面的方法有很明显的弊端，就是有很多重复的递归，比如，dfs(4)  和 dfs(3) 的时候，都会重复调用 dfs(2) 和 dfs(1),所以尝试加入缓存。</p>
<p>加了缓存以后，效果改观很明显，从运行超时直接击败百分百。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] books;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> shelfWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] memo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minHeightShelves</span><span class="params">(<span class="type">int</span>[][] books, <span class="type">int</span> shelfWidth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">        <span class="built_in">this</span>.shelfWidth = shelfWidth;</span><br><span class="line">        <span class="built_in">this</span>.memo = <span class="keyword">new</span> <span class="title class_">int</span>[books.length];</span><br><span class="line">        Arrays.fill(memo, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> dfs(books.length - <span class="number">1</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">      <span class="comment">// 缓存判断</span></span><br><span class="line">        <span class="keyword">if</span> (memo[i] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE, leftW = shelfWidth, maxH = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            leftW -= books[j][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (leftW &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            maxH = Math.max(maxH, books[j][<span class="number">1</span>]);</span><br><span class="line">            ans = Math.min(ans, dfs(j - <span class="number">1</span>) + maxH);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[i] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>1:1 翻译成递推写法</strong></p>
<p>我们可以通过 for 循环，去掉递的部分，只保留归的部分<br>通用做法：</p>
<ul>
<li>dfs 改成 f 数组</li>
<li>递归改成循环（每个参数对应一层循环）</li>
<li>递归的边界改成递归的初始值</li>
</ul>
<p>这里有一个小问题，递归的边界是 i &lt; 0, 但是在数组中无法反应这个边界，于是就只能把 f 数组整体往右推一位，f[0] &#x3D; 0；来表示边界，这样涉及到 f 数组的下标都加一，但是 books 的逻辑不用改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minHeightShelves</span><span class="params">(<span class="type">int</span>[][] books, <span class="type">int</span> shelfWidth)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> books.length;</span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 模拟 dfs “归”的部分,遍历的含义就是开始计算当前书本的最优解</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            f[i + <span class="number">1</span>] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftW</span> <span class="operator">=</span> shelfWidth, maxH = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                leftW -= books[j][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (leftW &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                maxH = Math.max(maxH, books[j][<span class="number">1</span>]);</span><br><span class="line">                f[i + <span class="number">1</span>] = Math.min(f[i + <span class="number">1</span>], f[j] + maxH);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





















<h2 id="动归-矩阵（图形）"><a href="#动归-矩阵（图形）" class="headerlink" title="动归 + 矩阵（图形）"></a>动归 + 矩阵（图形）</h2><h3 id="全为1的方形矩阵"><a href="#全为1的方形矩阵" class="headerlink" title="全为1的方形矩阵"></a>全为1的方形矩阵</h3><blockquote>
<p>给你一个 <code>m * n</code> 的矩阵，矩阵中的元素不是 <code>0</code> 就是 <code>1</code>，请你统计并返回其中完全由 <code>1</code> 组成的 <strong>正方形</strong> 子矩阵的个数。</p>
</blockquote>
<p><strong>核心思想是：遍历矩阵，以遍历到的当前元素作为正方形的右下角，并计算正方形面积</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSquares</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = matrix[i][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans += dp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>也可以申请一个范围 + 1的dp数组来避免讨论边界的case</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSquares</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length, m = matrix[<span class="number">0</span>].length;</span><br><span class="line">       <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;    </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                   dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                   ans += dp[i][j];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





























<h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><hr>
<h2 id="数学原理及应用"><a href="#数学原理及应用" class="headerlink" title="数学原理及应用"></a>数学原理及应用</h2><h3 id="最小偶倍数"><a href="#最小偶倍数" class="headerlink" title="最小偶倍数"></a>最小偶倍数</h3><blockquote>
<p>给你一个正整数 <code>n</code> ，返回 <code>2</code> 和 <code>n</code> 的最小公倍数（正整数）。</p>
<p>LeetCode 2413</p>
</blockquote>
<p><strong>奇偶讨论</strong></p>
<p>这题很简单，但是想思考的简单并且代码写的简洁也是需要功夫的</p>
<p><strong>当 n 为 偶数时答案是 n，当 n 为奇数时答案为 2 * n</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestEvenMultiple</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (n % <span class="number">2</span> == <span class="number">0</span>) ? n : <span class="number">2</span> * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这么写还是不够优雅,以下代码参考了灵神</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestEvenMultiple</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (n % <span class="number">2</span> + <span class="number">1</span>) * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>当 n 为奇数时，答案是 n 左移一位，否则不变</strong><br>这样就可以借助位运算了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestEvenMultiple</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt;&lt; (n % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="公因子数目（最大公约数）"><a href="#公因子数目（最大公约数）" class="headerlink" title="公因子数目（最大公约数）"></a>公因子数目（最大公约数）</h3><blockquote>
<p>给你两个正整数 <code>a</code> 和 <code>b</code> ，返回 <code>a</code> 和 <code>b</code> 的 <strong>公</strong> 因子的数目。</p>
<p>如果 <code>x</code> 可以同时整除 <code>a</code> 和 <code>b</code> ，则认为 <code>x</code> 是 <code>a</code> 和 <code>b</code> 的一个 <strong>公因子</strong> 。</p>
</blockquote>
<p><strong>找到到最大公约数</strong></p>
<p>这题我们当然可以从 1 遍历到 a 和 b 的最小值，然后用 a 和 b 取余遍历到的每一个元素即可，但是可以进行优化，我们只需要遍历到 a 和 b 的最大公约数即可，并且利用公因子是成对出现的这一特点去继续优化。</p>
<p><strong>1. 求最大公约数</strong><br>利用辗转相除法求最大公约数，原理如下：<br>例如：30 &#x2F; 18 &#x3D; 1 .. 12<br>其中 30 和 18 的最大公约数，就是 18 和 12 的最大公约数，证明如下：<br>a &#x2F; b &#x3D; q .. r , a &#x3D; q * b + r , 令 a 和 b 的最大公约数为 x , a &#x3D; n1 * x , b &#x3D; n2 * x , n1 * x &#x3D; q * n2 * x + r<br>r &#x3D; (n1 - q * n2) * x , 可以发现，r 也就是余数的最大公约数和除数和被除数保持一致<br>每次将除数和被除数作为下一次计算的参数，当余数为 0 时可以证明，该次除数即 a 和 b 的最大公约数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            a %= b;</span><br><span class="line">            a ^= b;</span><br><span class="line">            b ^= a;</span><br><span class="line">            a ^= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>2. 遍历到根号最大公约数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">commonFactors</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> gcd(a, b), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 由于公因子成对出现，所以遍历到根号最大公约数即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; x * x &lt;= c; x++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a % x == <span class="number">0</span> &amp;&amp; b % x == <span class="number">0</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">if</span> (x * x != c) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            a %= b;</span><br><span class="line">            a ^= b;</span><br><span class="line">            b ^= a;</span><br><span class="line">            a ^= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h2 id="简单数学应用"><a href="#简单数学应用" class="headerlink" title="简单数学应用"></a>简单数学应用</h2><h3 id="移动筹码问题"><a href="#移动筹码问题" class="headerlink" title="移动筹码问题"></a>移动筹码问题</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-07-08%2023.37.53.png" alt="截屏2022-07-08 23.37.53" style="zoom:50%;" />



<p><strong>分析</strong><br>仔细分析可知，如果是一个偶数位置移动到偶数位置或者奇数位置移动到奇数位置时cost都为0，只有奇数位置与偶数位置互相移动才会有花费，所以假设现在移动到 i 位置是一个奇数，那么所有奇数位置的cost都为0，只要计算偶数位置的cost，且每个偶数位置的数移动过来cost都为1，综上所述，其实也就是看奇数位置和偶数位置谁的个数少</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostToMoveChips</span><span class="params">(<span class="type">int</span>[] position)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cur : position) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                o++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(o, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="单调递增的数字"><a href="#单调递增的数字" class="headerlink" title="单调递增的数字"></a>单调递增的数字</h3><blockquote>
<p>力扣：<a href="https://leetcode.cn/problems/monotone-increasing-digits/">https://leetcode.cn/problems/monotone-increasing-digits/</a></p>
<p>题目描述：<br>当且仅当每个相邻位数上的数字 x 和 y 满足 x &lt;&#x3D; y 时，我们称这个整数是单调递增的。</p>
<p>给定一个整数 n ，返回 小于或等于 n 的最大数字，且数字呈 单调递增 。</p>
</blockquote>
<p><strong>贪心策略</strong></p>
<p>这其实是一道简单的贪心题，贪心策略是：从左往右遍历数字，找到第一个非递增的数据，然后将其以及之前的数字都减1，其之后的数字赋9</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 将数字转换成字符数组</span></span><br><span class="line">        <span class="type">char</span>[] strN = Integer.toString(n).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 遍历数组，找到第一个降低的字符</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; strN.length &amp;&amp; strN[i - <span class="number">1</span>] &lt;= strN[i]) &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; strN.length) &#123;</span><br><span class="line">            <span class="comment">// 第一个降低的字符之前的数字全部减一</span></span><br><span class="line">            <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; strN[i - <span class="number">1</span>] &gt; strN[i]) &#123;</span><br><span class="line">                strN[i - <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">                i -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 之后的数字全部赋值9</span></span><br><span class="line">            <span class="keyword">for</span> (i += <span class="number">1</span>; i &lt; strN.length; ++i) &#123;</span><br><span class="line">                strN[i] = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(strN));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h3><blockquote>
<p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p>
</blockquote>
<p><strong>快速幂 + 递归</strong><br>$$<br>假设求 2^{10}, 我们可以转换去用递归求：2^5 \times 2^5, \<br>这里要分一下奇偶：例如：2^{11} &#x3D; 2^5 \times 2^5\times 2<br>$$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt;= <span class="number">0</span> ? process(x, n) : <span class="number">1.0</span> / process(x, - n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">process</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> process(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span> ? y * y : y * y * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>快速幂 + 迭代</strong></p>
<p>在递归的基础上进行优化, 略难理解，省略。</p>
<h3 id="特殊数组的特征值"><a href="#特殊数组的特征值" class="headerlink" title="特殊数组的特征值"></a>特殊数组的特征值</h3><blockquote>
<p>给你一个非负整数数组 nums 。如果存在一个数 x ，使得 nums 中恰好有 x 个元素 大于或者等于 x ，那么就称 nums 是一个 特殊数组 ，而 x 是该数组的 特征值 。</p>
<p>注意： x 不必 是 nums 的中的元素。</p>
<p>如果数组 nums 是一个 特殊数组 ，请返回它的特征值 x 。否则，返回 -1 。可以证明的是，如果 nums 是特殊数组，那么其特征值 x 是 唯一的 。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/special-array-with-x-elements-greater-than-or-equal-x">https://leetcode.cn/problems/special-array-with-x-elements-greater-than-or-equal-x</a></p>
</blockquote>
<p><strong>降序排列+一次遍历</strong></p>
<p>降序排列后通过索引来找出个数和大小的关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">specialArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 先对数组进行降序排列</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = n - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i - <span class="number">1</span>] &gt;= i &amp;&amp; (i == nums.length || nums[i] &lt; i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="最小公倍数为K子数组"><a href="#最小公倍数为K子数组" class="headerlink" title="最小公倍数为K子数组"></a>最小公倍数为K子数组</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-15%2015.22.15.png" alt="截屏2022-11-15 15.22.15" style="zoom:50%;" />



<p><strong>暴力法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarrayLCM</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                x = lcm(x, nums[j]);</span><br><span class="line">                <span class="keyword">if</span> (x == k) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; k) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求最小公约数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> b, <span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a != <span class="number">0</span> ? gcd(a, b % a) : b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求最小公倍数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b / gcd(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>利用LCM性质剪枝</strong></p>
<h3 id="香槟塔"><a href="#香槟塔" class="headerlink" title="香槟塔"></a>香槟塔</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-20%2022.46.07.png" alt="截屏2022-11-20 22.46.07" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">champagneTower</span><span class="params">(<span class="type">int</span> poured, <span class="type">int</span> query_row, <span class="type">int</span> query_glass)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟法，先将水全部倒在当前所在行的杯子里（初始时倒在第一个杯子里）</span></span><br><span class="line">        <span class="type">double</span>[] row = &#123;poured&#125;;</span><br><span class="line">        <span class="comment">// 遍历倒所求行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= query_row; i++) &#123;</span><br><span class="line">            <span class="comment">// 模拟每一行倒水的情况，先声明这一行的杯子数量</span></span><br><span class="line">            <span class="type">double</span>[] nextRow = <span class="keyword">new</span> <span class="title class_">double</span>[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 模拟每一行的倒水的逻辑是遍历上一次层的杯子然后赋值给下一层的杯子</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">column</span> <span class="operator">=</span> row[j];</span><br><span class="line">                <span class="keyword">if</span> (column &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    nextRow[j] += (column - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                    nextRow[j + <span class="number">1</span>] += (column - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            row = nextRow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后别忘了有可能杯子里的水是大于1的，那就和1做比较</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(<span class="number">1</span>, row[query_glass]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="第N个神奇数字"><a href="#第N个神奇数字" class="headerlink" title="第N个神奇数字"></a>第N个神奇数字</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-22%2011.19.05.png" alt="截屏2022-11-22 11.19.05" style="zoom:50%;" />



<p><strong>容斥原理 + 二分法</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-22%2011.20.05.png" alt="截屏2022-11-22 11.20.05" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nthMagicalNumber</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Math.min(a, b);</span><br><span class="line">        <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> (<span class="type">long</span>) n * Math.min(a, b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> lcm(a, b);</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> ((r - l) &gt;&gt; <span class="number">1</span>) + l;</span><br><span class="line">            <span class="type">long</span> <span class="variable">cnt</span> <span class="operator">=</span> mid / a + mid / b - mid / c;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= n) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) ((r + <span class="number">1</span>) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最小公倍数 = 两数乘积 / 最大公约数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b / gcd(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 辗转相除求最大公约数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b != <span class="number">0</span> ? gcd(b, a % b) : a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="盒子最多球数量"><a href="#盒子最多球数量" class="headerlink" title="盒子最多球数量"></a>盒子最多球数量</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-23%2009.56.31.png" alt="截屏2022-11-23 09.56.31" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBalls</span><span class="params">(<span class="type">int</span> lowLimit, <span class="type">int</span> highLimit)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lowLimit; i &lt;= highLimit; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, x = i;</span><br><span class="line">            <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">                sum += x % <span class="number">10</span>;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(sum, map.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            max = Math.max(map.get(sum), max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="三的幂的和"><a href="#三的幂的和" class="headerlink" title="三的幂的和"></a>三的幂的和</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-12-09%2013.56.55.png" alt="截屏2022-12-09 13.56.55" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPowersOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="特定最少元素和"><a href="#特定最少元素和" class="headerlink" title="特定最少元素和"></a>特定最少元素和</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-12-16%2014.58.16.png" alt="截屏2022-12-16 14.58.16" style="zoom:50%;" />

<p> <strong>代码简单，但是数学原理有点意思</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-12-16%2014.58.32.png" alt="截屏2022-12-16 14.58.32" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minElements</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> limit, <span class="type">int</span> goal)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">diff</span> <span class="operator">=</span> Math.abs(sum - goal);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) ((diff + limit - <span class="number">1</span>) / limit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="移除石子最大得分"><a href="#移除石子最大得分" class="headerlink" title="移除石子最大得分"></a>移除石子最大得分</h3><blockquote>
<p>1753</p>
<p>你正在玩一个单人游戏，面前放置着大小分别为 <code>a</code>、<code>b</code> 和 <code>c</code> 的 <strong>三堆</strong> 石子。</p>
<p>每回合你都要从两个 <strong>不同的非空堆</strong> 中取出一颗石子，并在得分上加 <code>1</code>分。当存在 <strong>两个或更多</strong> 的空堆时，游戏停止。</p>
<p>给你三个整数 <code>a</code> 、<code>b</code> 和 <code>c</code> ，返回可以得到的 <strong>最大分数</strong> 。</p>
</blockquote>
<p><strong>贪心</strong></p>
<p>先给一个常规贪心解法，很容易想到，每次拿石子需要去拿最大的两堆，注意！这个最大的两堆是动态变化的，比如 4 4 6 这三堆，先拿第一堆和第三堆，变成 3 4 5，接下来要拿第二堆和第三堆了，这是动态变化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="comment">// 核心思想：每次取出最大的两个</span></span><br><span class="line">        <span class="type">int</span>[] stones = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;a, b, c&#125;;</span><br><span class="line">        Arrays.sort(stones);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (stones[<span class="number">0</span>] != <span class="number">0</span> || stones[<span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            stones[<span class="number">1</span>]--;</span><br><span class="line">            stones[<span class="number">2</span>]--;</span><br><span class="line">            Arrays.sort(stones);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>数学分析</strong></p>
<p>在解法一的基础上，进行数学推导，不妨假设a &lt;&#x3D; b &lt;&#x3D; c </p>
<p>若a + b &lt; c, 那么答案为c,将a和b依次与c进行配对，分数为a+b<br>若a + b &gt;&#x3D; c, 那么c每次与最大的数进行匹配。设于a匹配cnt1次，与b匹配cnt2次。最后变成(a - cnt1, b - cnt2, 0),由于每次c都与最大的数进行匹配，那么最后剩下的两个数必然相等或者相差1，如(3，6，7)(3， 6， 7)(3，6，7),会变成(1,1,0)(1,1,0)(1,1,0) 。将两者相加除2便是剩下两个数互相匹配的分数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(Math.max(a, b), c);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumAB</span> <span class="operator">=</span> a + b + c - max;</span><br><span class="line">        <span class="keyword">return</span> sumAB &lt; max ? sumAB : (a + b + c) / <span class="number">2</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="好对子"><a href="#好对子" class="headerlink" title="好对子"></a>好对子</h3><blockquote>
<p>给你一个数组 <code>nums</code> ，数组中只包含非负整数。定义 <code>rev(x)</code> 的值为将整数 <code>x</code> 各个数字位反转得到的结果。比方说 <code>rev(123) = 321</code> ， <code>rev(120) = 21</code> 。我们称满足下面条件的下标对 <code>(i, j)</code>是 <strong>好的</strong> ：</p>
<ul>
<li><code>0 &lt;= i &lt; j &lt; nums.length</code></li>
<li><code>nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])</code></li>
</ul>
<p>请你返回好下标对的数目。由于结果可能会很大，请将结果对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 核心思想：方程移项</span></span><br><span class="line">    <span class="comment">// nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]) 等价于</span></span><br><span class="line">    <span class="comment">// nums[i] - rev(nums[i]) == nums[j] - rev(nums[j]) 简便运算</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNicePairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1000000007</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num, rev = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                rev = rev * <span class="number">10</span> + temp % <span class="number">10</span>;</span><br><span class="line">                temp /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = (ans + map.getOrDefault(num - rev, <span class="number">0</span>)) % MOD;</span><br><span class="line">            map.put(num - rev, map.getOrDefault(num - rev, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="使数组中所有元素都为零"><a href="#使数组中所有元素都为零" class="headerlink" title="使数组中所有元素都为零"></a>使数组中所有元素都为零</h3><blockquote>
<p>给你一个非负整数数组 <code>nums</code> 。在一步操作中，你必须：</p>
<ul>
<li>选出一个正整数 <code>x</code> ，<code>x</code> 需要小于或等于 <code>nums</code> 中 <strong>最小</strong> 的 <strong>非零</strong>元素。</li>
<li><code>nums</code> 中的每个正整数都减去 <code>x</code>。</li>
</ul>
<p>返回使 <code>nums</code> 中所有元素都等于 <code>0</code> 需要的 <strong>最少</strong> 操作数。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumOperations</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        set.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h3><blockquote>
<p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p>LeetCode(hot 100)</p>
<p>此题有太多解法，这里只列举两种</p>
</blockquote>
<p><strong>排序法</strong></p>
<p>先用 java 内置的 sort 方法方法排序后，返回 nums.length &#x2F; 2 的那个元素，就是多数元素<br>代码略，执行时间 2ms</p>
<p><strong>随机数法</strong></p>
<p>由于多数已经超过了一般的数字，所以随机数法会有相当不错的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 在 nums 长度范围内生成一个随机数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">randRage</span><span class="params">(Random rand, <span class="type">int</span> min, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rand.nextInt(max - min) + min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 统计 num 出现的次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">countOccurences</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == num) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">majority</span> <span class="operator">=</span> nums.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> nums[randRage(rand, <span class="number">0</span>, nums.length)];</span><br><span class="line">            <span class="keyword">if</span> (countOccurences(nums, candidate) &gt; majority)</span><br><span class="line">                <span class="keyword">return</span> candidate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h2 id="复杂数学"><a href="#复杂数学" class="headerlink" title="复杂数学"></a>复杂数学</h2><h3 id="变为棋盘"><a href="#变为棋盘" class="headerlink" title="变为棋盘"></a>变为棋盘</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-08-23%2009.33.31.png" alt="截屏2022-08-23 09.33.31" style="zoom:50%;" />







<h3 id="子串中唯一字符串"><a href="#子串中唯一字符串" class="headerlink" title="子串中唯一字符串"></a>子串中唯一字符串</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-07%2000.52.57.png" alt="截屏2022-09-07 00.52.57" style="zoom:50%;" />











<h3 id="全局、局部倒置"><a href="#全局、局部倒置" class="headerlink" title="全局、局部倒置"></a>全局、局部倒置</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-16%2023.47.26.png" alt="截屏2022-11-16 23.47.26" style="zoom:50%;" />



<p><strong>从后往前遍历！</strong></p>
<p>仔细分析后发现，局部倒置一定是全局倒置，那么只需要找到一个跨度大于1且nums[i] &gt; nums[j]的数对即可，并且可以从后往前遍历，维护一个最小值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIdealPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length, min = nums[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; min) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            min = Math.min(nums[i + <span class="number">1</span>], min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>归纳证明！！</strong></p>
<p>这个做法更妙了，假设数组满足局部倒置等于非局部倒置，那么最小值的下标一定不能大于等于2</p>
<ul>
<li>如果 nums[0] &#x3D; 0, 那么问题转换为[1, n-1]区间的一个子问题</li>
<li>如果 nums[[0] &#x3D; 1, 那么nums[0]] 必须为1，否则，就不满足，所以问题转换为一个 [2, n-1]的子问题</li>
<li>经过总结，|nums[i] - i | &lt;&#x3D; 1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIdealPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(nums[i] - i) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h2 id="贪心-数学"><a href="#贪心-数学" class="headerlink" title="贪心 + 数学"></a>贪心 + 数学</h2><h3 id="递减元素使数组呈锯齿状"><a href="#递减元素使数组呈锯齿状" class="headerlink" title="递减元素使数组呈锯齿状"></a>递减元素使数组呈锯齿状</h3><blockquote>
<p>给你一个整数数组 <code>nums</code>，每次 <strong>操作</strong> 会从中选择一个元素并 <strong>将该元素的值减少 1</strong>。</p>
<p>如果符合下列情况之一，则数组 <code>A</code> 就是 <strong>锯齿数组</strong>：</p>
<ul>
<li>每个偶数索引对应的元素都大于相邻的元素，即 <code>A[0] &gt; A[1] &lt; A[2] &gt; A[3] &lt; A[4] &gt; ...</code></li>
<li>或者，每个奇数索引对应的元素都大于相邻的元素，即 <code>A[0] &lt; A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; ...</code></li>
</ul>
<p>返回将数组 <code>nums</code> 转换为锯齿数组所需的最小操作次数。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">movesToMakeZigzag</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 用一个两个元素的数组来存储分类讨论的情况</span></span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = nums.length; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span>  <span class="operator">=</span> i &gt; <span class="number">0</span> ? nums[i - <span class="number">1</span>] : Integer.MAX_VALUE;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i &lt; n - <span class="number">1</span> ? nums[i + <span class="number">1</span>] : Integer.MAX_VALUE;</span><br><span class="line">            ans[i % <span class="number">2</span>] += Math.max(nums[i] - Math.min(left, right) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(ans[<span class="number">0</span>], ans[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="进制相关"><a href="#进制相关" class="headerlink" title="进制相关"></a>进制相关</h2><h3 id="二进制数转字符串"><a href="#二进制数转字符串" class="headerlink" title="二进制数转字符串"></a>二进制数转字符串</h3><blockquote>
<p>二进制数转字符串。给定一个介于0和1之间的实数（如0.72），类型为double，打印它的二进制表达式。如果该数字无法精确地用32位以内的二进制表示，则打印“ERROR”。</p>
<p>LeetCode: 面试题 05.02</p>
</blockquote>
<p><strong>思路</strong></p>
<p>核心思想就是如何循环拿到每一位然后拼接到字符串里面，一般来说就是拿到最后一位或者第一位<br>在二进制中，以 0.625 为例，乘2, 二进制由 0.101 变成 1.01，这样可以拿到第一位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">printBin</span><span class="params">(<span class="type">double</span> num)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;0.&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (sb.length() &lt;= <span class="number">32</span> &amp;&amp; num != <span class="number">0</span>) &#123;</span><br><span class="line">            num *= <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> (<span class="type">int</span>) num;</span><br><span class="line">            sb.append(digit);</span><br><span class="line">            num -= digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.length() &lt;= <span class="number">32</span> ? sb.toString() : <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="比特位计数"><a href="#比特位计数" class="headerlink" title="比特位计数"></a>比特位计数</h3><blockquote>
<p>给你一个整数 <code>n</code> ，对于 <code>0 &lt;= i &lt;= n</code> 中的每个 <code>i</code> ，计算其二进制表示中 <strong><code>1</code> 的个数</strong> ，返回一个长度为 <code>n + 1</code> 的数组 <code>ans</code> 作为答案。</p>
<p>LeetCode(hot 100) 338</p>
</blockquote>
<p><strong>brain kernighan 算法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans[i] = getOnes(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// brain kernighan 算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOnes</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这样做可以消除 x 的最后一个 1</span></span><br><span class="line">            num = num &amp; (num - <span class="number">1</span>);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="负二进制数相加"><a href="#负二进制数相加" class="headerlink" title="负二进制数相加"></a>负二进制数相加</h3><blockquote>
<p>给出基数为 <strong>-2</strong> 的两个数 <code>arr1</code> 和 <code>arr2</code>，返回两数相加的结果。</p>
<p>数字以 <em>数组形式</em> 给出：数组由若干 0 和 1 组成，按最高有效位到最低有效位的顺序排列。例如，<code>arr = [1,1,0,1]</code> 表示数字 <code>(-2)^3 + (-2)^2 + (-2)^0 = -3</code>。<em>数组形式</em> 中的数字 <code>arr</code> 也同样不含前导零：即 <code>arr == [0]</code> 或 <code>arr[0] == 1</code>。</p>
<p>返回相同表示形式的 <code>arr1</code> 和 <code>arr2</code> 相加的结果。两数的表示形式为：不含前导零、由若干 0 和 1 组成的数组。</p>
<p>LeetCode 1073(Medium)</p>
</blockquote>
<p><strong>模拟</strong></p>
<p>需要注意的是 -2 进制下的进位是 - 1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] addNegabinary(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr1.length - <span class="number">1</span>, j = arr2.length - <span class="number">1</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> carry;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) x += arr1[i];</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) x += arr2[j];</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                res.add(x - <span class="number">2</span>);</span><br><span class="line">                carry = -<span class="number">1</span>; <span class="comment">// 因为基数是 -2， 所以进位是 -1，（绝对值变大)</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                res.add(x);</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.add(<span class="number">1</span>);</span><br><span class="line">                carry = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            --i;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (res.size() &gt; <span class="number">1</span> &amp;&amp; res.get(res.size() - <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            res.remove(res.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, j = res.size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; i++, j--) &#123;</span><br><span class="line">            arr[i] = res.get(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h2><h3 id="可被60整除"><a href="#可被60整除" class="headerlink" title="可被60整除"></a>可被60整除</h3><blockquote>
<p>在歌曲列表中，第 <code>i</code> 首歌曲的持续时间为 <code>time[i]</code> 秒。</p>
<p>返回其总持续时间（以秒为单位）可被 <code>60</code> 整除的歌曲对的数量。形式上，我们希望下标数字 <code>i</code> 和 <code>j</code> 满足 <code>i &lt; j</code> 且有 <code>(time[i] + time[j]) % 60 == 0</code>。</p>
<p>LeetCode 1010 (medium)</p>
</blockquote>
<p><strong>分析</strong></p>
<p>需要返回其总持续时间（以秒为单位）可被 60 整除的歌曲对的数量，因此，每首歌曲对结果的影响因素是它的持续时间除以 60 后的余数。可以用一个长度为 60 的数组 cnt，用来表示余数出现的次数。然后分情况统计歌曲对：</p>
<ul>
<li><p>余数为 0的歌曲。他们需要与余数为 0 的歌曲组成对，但不能与自己组成对。歌曲对的数量为 cnt[0]×(cnt[0]−1)&#x2F;2</p>
</li>
<li><p>余数为 30 的歌曲。他们需要与余数为 30 的歌曲组成对，但不能与自己组成对。歌曲对的数量为 cnt[30]×(cnt[30]−1)&#x2F;2</p>
</li>
<li><p>余数为 i,i∈[1,29]i, i∈[1,29] 的歌曲。他们需要与余数为 60−i 的歌曲组成对。歌曲对的数量为 ∑i&#x3D;129cnt[i]×cnt[60−i]</p>
</li>
<li><p>余数为 i,i∈[31,59]i, i\in[31,59]i,i∈[31,59] 的歌曲。已经在上一部分组对过，不需要重复计算。</p>
</li>
<li><p>把这几部分求和，就可以得到最后的对数。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numPairsDivisibleBy60</span><span class="params">(<span class="type">int</span>[] time)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">60</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : time) &#123;</span><br><span class="line">            cnt[num % <span class="number">60</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            res += cnt[i] * cnt[<span class="number">60</span> - i];</span><br><span class="line">        &#125;</span><br><span class="line">        res += (<span class="type">long</span>)cnt[<span class="number">0</span>] * (cnt[<span class="number">0</span>] - <span class="number">1</span>) / <span class="number">2</span> + (<span class="type">long</span>)cnt[<span class="number">30</span>] * (cnt[<span class="number">30</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="简单字符处理"><a href="#简单字符处理" class="headerlink" title="简单字符处理"></a>简单字符处理</h2><h3 id="重排列单词空格"><a href="#重排列单词空格" class="headerlink" title="重排列单词空格"></a>重排列单词空格</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-07%2014.29.20.png" alt="截屏2022-09-07 14.29.20" style="zoom:50%;" />



<p><strong>双指针</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reorderSpaces</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), cnt = <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27; &#x27;</span> &amp;&amp; ++i &gt;= <span class="number">0</span> &amp;&amp; ++cnt &gt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; s.charAt(j) != <span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line">            list.add(s.substring(i, j));</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> list.size(), t = cnt / Math.max(m - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) k += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            sb.append(list.get(i));</span><br><span class="line">            <span class="keyword">if</span> (i != m - <span class="number">1</span>) sb.append(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (sb.length() != n) sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>超强API调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reorderSpaces</span><span class="params">(String text)</span> &#123;</span><br><span class="line">       String[] words = text.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="type">int</span>) text.chars().filter(x -&gt; x == <span class="string">&#x27; &#x27;</span>).count(), m = words.length;</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= <span class="number">1</span>) <span class="keyword">return</span> String.join(<span class="string">&quot;&quot;</span>, words).concat(<span class="string">&quot; &quot;</span>.repeat(s));</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>.repeat(s / (m - <span class="number">1</span>)), words)</span><br><span class="line">                .concat(<span class="string">&quot; &quot;</span>.repeat(s % (m - <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="相同字符间隔"><a href="#相同字符间隔" class="headerlink" title="相同字符间隔"></a>相同字符间隔</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-09-17%2023.53.21.png" alt="截屏2022-09-17 23.53.21" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxLengthBetweenEqualCharacters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] characterMap = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        Arrays.fill(characterMap, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (characterMap[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] != -<span class="number">1</span>) &#123;</span><br><span class="line">                max = Math.max(max, i - characterMap[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                characterMap[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="格式化号码"><a href="#格式化号码" class="headerlink" title="格式化号码"></a>格式化号码</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-01%2016.59.01.png" alt="截屏2022-10-01 16.59.01" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reformatNumber</span><span class="params">(String number)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> number.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i += <span class="number">3</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (ans.length() != <span class="number">0</span>) &#123;</span><br><span class="line">               ans.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 剩下的字母数字小于等于4个</span></span><br><span class="line">           <span class="keyword">if</span> (i + <span class="number">4</span> &gt;= n) &#123;</span><br><span class="line">               <span class="comment">// 剩下的字母数字小于等于3个</span></span><br><span class="line">               <span class="keyword">if</span> (i + <span class="number">3</span> &gt;= n) &#123;</span><br><span class="line">                   ans.append(s.substring(i));</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// 剩下的字母数字为4个</span></span><br><span class="line">                   ans.append(s.substring(i, i+<span class="number">2</span>) + <span class="string">&quot;-&quot;</span> + </span><br><span class="line">                    s.substring(i+<span class="number">2</span>, i+<span class="number">4</span>));</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ans.append(s.substring(i, i+<span class="number">3</span>));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="交换字符"><a href="#交换字符" class="headerlink" title="交换字符"></a>交换字符</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-11%2015.31.27.png" alt="截屏2022-10-11 15.31.27" style="zoom:50%;" />



<p><strong>这个题很简单，但是这段代码写的极其优雅，将时空压缩以及if else 逻辑玩的很透</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">areAlmostEqual</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s1.length(), idx1 = -<span class="number">1</span>, idx2 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i) == s2.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx1 == -<span class="number">1</span>) &#123;</span><br><span class="line">                idx1 = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx2 == -<span class="number">1</span>) &#123;</span><br><span class="line">                idx2 = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx1 == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx2 == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.charAt(idx1) == s2.charAt(idx2) &amp;&amp; </span><br><span class="line">            s1.charAt(idx2) == s2.charAt(idx1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="字母大小写全排列"><a href="#字母大小写全排列" class="headerlink" title="字母大小写全排列"></a>字母大小写全排列</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-01%2015.32.21.png" alt="截屏2022-11-01 15.32.21" style="zoom:50%;" />



<p><strong>方法一：广度优先搜索</strong></p>
<p>基本思想和图的广度优先搜索差不多，借助一个缓存队列 arrayDeque，将每一位的可能性都加入到queue中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCasePermutation</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// ans list 用来存放结果</span></span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// StringBuilder 类型的queue用来存放遍历过程中每一种子串的种类</span></span><br><span class="line">        Queue&lt;StringBuilder&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>());</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> queue.peek();</span><br><span class="line">            <span class="keyword">if</span> (sb.length() == s.length()) &#123;</span><br><span class="line">                 <span class="comment">// 如果当前从queue拿出来的串长度和s相同就加入ans集合并从缓存queue中弹出</span></span><br><span class="line">                ans.add(sb.toString());</span><br><span class="line">                queue.poll();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果当前子串没遍历到最后一位</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sb.length();</span><br><span class="line">                <span class="keyword">if</span> (Character.isLetter(s.charAt(len))) &#123;</span><br><span class="line">                    <span class="comment">// 如果该子串的下一位是字母就在缓存queue中加入新的sb</span></span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">sbsb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sb);</span><br><span class="line">                    <span class="comment">// 字符和32相与会改变大小写</span></span><br><span class="line">                    sbsb.append((<span class="type">char</span>)(s.charAt(len) ^ <span class="number">32</span>));</span><br><span class="line">                    <span class="comment">// 改变了下一位的大小写后加入缓存queue</span></span><br><span class="line">                    queue.offer(sbsb);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果不是字母就直接加入到sb</span></span><br><span class="line">                sb.append(s.charAt(len));</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>方法二：回溯</strong></p>
<p>给人的感觉就是深度优先遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCasePermutation</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// ans list 用来存放结果</span></span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(s.toCharArray(), <span class="number">0</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[] arr, <span class="type">int</span> pos, List&lt;String&gt; ans)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; arr.length &amp;&amp; Character.isDigit(arr[pos])) &#123;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos == arr.length) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">String</span>(arr));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 改变大小写后递归下一位</span></span><br><span class="line">        arr[pos] ^= <span class="number">32</span>;</span><br><span class="line">        dfs(arr, pos + <span class="number">1</span>, ans);</span><br><span class="line">        <span class="comment">// 再变回来，这样就做到了不改变大小写从而去遍历下一位</span></span><br><span class="line">        arr[pos] ^= <span class="number">32</span>;</span><br><span class="line">        dfs(arr, pos + <span class="number">1</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>方法三：二进制位图</strong></p>
<h3 id="自定义字符串排序"><a href="#自定义字符串排序" class="headerlink" title="自定义字符串排序"></a>自定义字符串排序</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-13%2023.09.56.png" alt="截屏2022-11-13 23.09.56" style="zoom:50%;" />





<p><strong>自定义一个比较器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">customSortString</span><span class="params">(String order, String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 采用基数数组的形式给 order 的字符加权值</span></span><br><span class="line">        <span class="type">int</span>[] sorted = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; order.length(); i++) &#123;</span><br><span class="line">            sorted[order.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意这里只能使用Character数组，不然Arrays.sort()方法识别不了</span></span><br><span class="line">        Character[] ss = <span class="keyword">new</span> <span class="title class_">Character</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ss.length; i++) &#123;</span><br><span class="line">            ss[i] = s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义一个比较器，将权值大的放后面</span></span><br><span class="line">        Arrays.sort(ss, (a, b) -&gt; sorted[a - <span class="string">&#x27;a&#x27;</span>] - sorted[b - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ss) &#123;</span><br><span class="line">            ans.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>基数排序</strong></p>
<p>或者弄一个基数排序的方法，定义一个频率数组，用while循环去拼接SB</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">customSortString</span><span class="params">(String order, String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明一个频率数组</span></span><br><span class="line">        <span class="type">int</span>[] freq = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            freq[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; order.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(freq[order.charAt(i) - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ans.append(order.charAt(i));</span><br><span class="line">                freq[order.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (freq[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(freq[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    ans.append((<span class="type">char</span>)(i + <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">                    freq[i]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="字符串美丽值之和"><a href="#字符串美丽值之和" class="headerlink" title="字符串美丽值之和"></a>字符串美丽值之和</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-12-12%2010.22.12.png" alt="截屏2022-12-12 10.22.12" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">beautySum</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">      <span class="comment">// 双循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="comment">// 记录当前字串的字符频率</span></span><br><span class="line">            <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxFreq</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                cnt[s.charAt(j) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                maxFreq = Math.max(maxFreq, cnt[s.charAt(j) - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">minFreq</span> <span class="operator">=</span> n;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">26</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[k] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        minFreq = Math.min(minFreq, cnt[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ans += maxFreq - minFreq;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="全字母句"><a href="#全字母句" class="headerlink" title="全字母句"></a>全字母句</h3><blockquote>
<p>1832</p>
<p><strong>全字母句</strong> 指包含英语字母表中每个字母至少一次的句子。</p>
<p>给你一个仅由小写英文字母组成的字符串 <code>sentence</code> ，请你判断 <code>sentence</code>是否为 <strong>全字母句</strong> 。</p>
<p>如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
</blockquote>
<p><strong>数位法</strong></p>
<p>利用一个 32 位 int 来表示 26 个英文字母</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkIfPangram</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : sentence.toCharArray()) &#123;</span><br><span class="line">            state |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> state == (<span class="number">1</span> &lt;&lt; <span class="number">26</span>) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="字符转数字"><a href="#字符转数字" class="headerlink" title="字符转数字"></a>字符转数字</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-12-15%2010.02.57.png" alt="截屏2022-12-15 10.02.57" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLucky</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;  s.length(); i++) &#123;</span><br><span class="line">            sb.append(s.charAt(i) - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">digits</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= k &amp;&amp; digits.length() &gt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; digits.length(); j++) &#123;</span><br><span class="line">                sum += digits.charAt(j) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            digits = Integer.toString(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(digits);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="替换括号内容"><a href="#替换括号内容" class="headerlink" title="替换括号内容"></a>替换括号内容</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-01-12%2023.08.55.png" alt="截屏2023-01-12 23.08.55" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">evaluate</span><span class="params">(String s, List&lt;List&lt;String&gt;&gt; knowledge)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; dict = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; list : knowledge) &#123;</span><br><span class="line">            dict.put(list.get(<span class="number">0</span>), list.get(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">addKey</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                addKey = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dict.containsKey(key.toString())) &#123;</span><br><span class="line">                    res.append(dict.get(key.toString()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                addKey = <span class="literal">false</span>;</span><br><span class="line">                key.setLength(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (addKey) &#123;</span><br><span class="line">                    key.append(c);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="解密消息"><a href="#解密消息" class="headerlink" title="解密消息"></a>解密消息</h3><blockquote>
<p>2325</p>
<p>给你字符串 <code>key</code> 和 <code>message</code> ，分别表示一个加密密钥和一段加密消息。解密 <code>message</code> 的步骤如下：</p>
<ol>
<li>使用 <code>key</code> 中 26 个英文小写字母第一次出现的顺序作为替换表中的字母 <strong>顺序</strong> 。</li>
<li>将替换表与普通英文字母表对齐，形成对照表。</li>
<li>按照对照表 <strong>替换</strong> <code>message</code> 中的每个字母。</li>
<li>空格 <code>&#39; &#39;</code> 保持不变。</li>
</ol>
<ul>
<li>例如，<code>key = &quot;***hap***p***y*** ***bo***y&quot;</code>（实际的加密密钥会包含字母表中每个字母 <strong>至少一次</strong>），据此，可以得到部分对照表（<code>&#39;h&#39; -&gt; &#39;a&#39;</code>、<code>&#39;a&#39; -&gt; &#39;b&#39;</code>、<code>&#39;p&#39; -&gt; &#39;c&#39;</code>、<code>&#39;y&#39; -&gt; &#39;d&#39;</code>、<code>&#39;b&#39; -&gt; &#39;e&#39;</code>、<code>&#39;o&#39; -&gt; &#39;f&#39;</code>）。</li>
</ul>
<p>返回解密后的消息。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decodeMessage</span><span class="params">(String key, String message)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        Map&lt;Character, Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> key.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; !map.containsKey(c)) &#123;</span><br><span class="line">                map.put(c, cur);</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; message.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> message.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                c = map.get(c);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="隐藏个人信息"><a href="#隐藏个人信息" class="headerlink" title="隐藏个人信息"></a>隐藏个人信息</h3><blockquote>
<p>给你一条个人信息字符串 <code>s</code> ，可能表示一个 <strong>邮箱地址</strong> ，也可能表示一串 <strong>电话号码</strong> 。返回按如下规则 <strong>隐藏</strong> 个人信息后的结果：</p>
<p><em><strong>电子邮件地址：</strong></em></p>
<p>一个电子邮件地址由以下部分组成：</p>
<ul>
<li>一个 <strong>名字</strong> ，由大小写英文字母组成，后面跟着</li>
<li>一个 <code>&#39;@&#39;</code> 字符，后面跟着</li>
<li>一个 <strong>域名</strong> ，由大小写英文字母和一个位于中间的 <code>&#39;.&#39;</code> 字符组成。<code>&#39;.&#39;</code> 不会是域名的第一个或者最后一个字符。</li>
</ul>
<p>要想隐藏电子邮件地址中的个人信息：</p>
<ul>
<li><strong>名字</strong> 和 <strong>域名</strong> 部分的大写英文字母应当转换成小写英文字母。</li>
<li><strong>名字</strong> 中间的字母（即，除第一个和最后一个字母外）必须用 5 个 <code>&quot;*****&quot;</code> 替换。</li>
</ul>
<p><em><strong>电话号码：</strong></em></p>
<p>一个电话号码应当按下述格式组成：</p>
<ul>
<li>电话号码可以由 10-13 位数字组成</li>
<li>后 10 位构成 <strong>本地号码</strong></li>
<li>前面剩下的 0-3 位，构成 <strong>国家代码</strong></li>
<li>利用 <code>&#123;&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39; &#39;&#125;</code> 这些 <strong>分隔字符</strong> 按某种形式对上述数字进行分隔</li>
</ul>
<p>要想隐藏电话号码中的个人信息：</p>
<ul>
<li>移除所有 <strong>分隔字符</strong></li>
<li>隐藏个人信息后的电话号码应该遵从这种格式：<ul>
<li><code>&quot;***-***-XXXX&quot;</code> 如果国家代码为 0 位数字</li>
<li><code>&quot;+*-***-***-XXXX&quot;</code> 如果国家代码为 1 位数字</li>
<li><code>&quot;+**-***-***-XXXX&quot;</code> 如果国家代码为 2 位数字</li>
<li><code>&quot;+***-***-***-XXXX&quot;</code> 如果国家代码为 3 位数字</li>
</ul>
</li>
<li><code>&quot;XXXX&quot;</code> 是最后 4 位 <strong>本地号码</strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    String[] country = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;+*-&quot;</span>,<span class="string">&quot;+**-&quot;</span>, <span class="string">&quot;+***-&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">maskPII</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">at</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (at &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = s.toLowerCase();</span><br><span class="line">            <span class="keyword">return</span> s.charAt(<span class="number">0</span>) + <span class="string">&quot;*****&quot;</span> + s.substring(at - <span class="number">1</span>).toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">        s = s.replaceAll(<span class="string">&quot;[^0-9]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> country[s.length() - <span class="number">10</span>] + <span class="string">&quot;***-***-&quot;</span> + s.substring(s.length() - <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="动归字符"><a href="#动归字符" class="headerlink" title="动归字符"></a>动归字符</h2><h3 id="不同子序列2"><a href="#不同子序列2" class="headerlink" title="不同子序列2"></a>不同子序列2</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-14%2014.31.21.png" alt="截屏2022-10-14 14.31.21" style="zoom:50%;" />



<p><strong>思路</strong></p>
<p>当前字符串数 &#x3D; 上一个字符的字符串数  + 当前字符所加上后组成的字符数 - 重复数</p>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-10-14 14.47.53.png" alt="截屏2022-10-14 14.47.53" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distinctSubseqII</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="comment">// 用基数数组来记录上一个字符出现的次数</span></span><br><span class="line">        <span class="type">int</span>[] preAdded = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curCnt</span> <span class="operator">=</span> ans;</span><br><span class="line">            ans = ((ans + curCnt) % mod - </span><br><span class="line">                preAdded[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] % mod + mod) % mod;</span><br><span class="line">            preAdded[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = curCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后减去空字符串</span></span><br><span class="line">        <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="KMP-详解"><a href="#KMP-详解" class="headerlink" title="KMP 详解"></a>KMP 详解</h3><blockquote>
<ul>
<li>首先要了解字符串前缀和后缀的概念<ul>
<li>“aba” 的前缀是 “a”,”ab” 后缀是 “ba”,”a”，交集是 “a”</li>
</ul>
</li>
<li></li>
</ul>
</blockquote>
<h2 id="数位字符"><a href="#数位字符" class="headerlink" title="数位字符"></a>数位字符</h2><h3 id="最好英文字母"><a href="#最好英文字母" class="headerlink" title="最好英文字母"></a>最好英文字母</h3><blockquote>
<p>给你一个由英文字母组成的字符串 <code>s</code> ，请你找出并返回 <code>s</code> 中的 <strong>最好</strong>英文字母。返回的字母必须为大写形式。如果不存在满足条件的字母，则返回一个空字符串。</p>
<p><strong>最好</strong> 英文字母的大写和小写形式必须 <strong>都</strong> 在 <code>s</code> 中出现。</p>
<p>英文字母 <code>b</code> 比另一个英文字母 <code>a</code> <strong>更好</strong> 的前提是：英文字母表中，<code>b</code>在 <code>a</code> 之 <strong>后</strong> 出现。</p>
</blockquote>
<p><strong>一般可以用哈希set写的字符题目都可以用数位来写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greatestLetter</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lower</span> <span class="operator">=</span> <span class="number">0</span>, upper = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isLowerCase(c)) &#123;</span><br><span class="line">                lower |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                upper |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">25</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((lower &amp; upper &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> String.valueOf((<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span> + i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h2 id="BFS、DFS"><a href="#BFS、DFS" class="headerlink" title="BFS、DFS"></a>BFS、DFS</h2><blockquote>
<p>给你一个字符串 <code>s</code> 以及两个整数 <code>a</code> 和 <code>b</code> 。其中，字符串 <code>s</code> 的长度为偶数，且仅由数字 <code>0</code> 到 <code>9</code> 组成。</p>
<p>你可以在 <code>s</code> 上按任意顺序多次执行下面两个操作之一：</p>
<ul>
<li>累加：将 <code>a</code> 加到 <code>s</code> 中所有下标为奇数的元素上（<strong>下标从 0 开始</strong>）。数字一旦超过 <code>9</code> 就会变成 <code>0</code>，如此循环往复。例如，<code>s = &quot;3456&quot;</code> 且 <code>a = 5</code>，则执行此操作后 <code>s</code> 变成 <code>&quot;3951&quot;</code>。</li>
<li>轮转：将 <code>s</code> 向右轮转 <code>b</code> 位。例如，<code>s = &quot;3456&quot;</code> 且 <code>b = 1</code>，则执行此操作后 <code>s</code> 变成 <code>&quot;6345&quot;</code>。</li>
</ul>
<p>请你返回在 <code>s</code> 上执行上述操作任意次后可以得到的 <strong>字典序最小</strong> 的字符串。</p>
<p>如果两个字符串长度相同，那么字符串 <code>a</code> 字典序比字符串 <code>b</code> 小可以这样定义：在 <code>a</code> 和 <code>b</code> 出现不同的第一个位置上，字符串 <code>a</code> 中的字符出现在字母表中的时间早于 <code>b</code> 中的对应字符。例如，<code>&quot;0158”</code>字典序比 <code>&quot;0190&quot;</code> 小，因为不同的第一个位置是在第三个字符，显然 <code>&#39;5&#39;</code> 出现在 <code>&#39;9&#39;</code> 之前。</p>
<p>LeetCode: 1625</p>
</blockquote>
<p><strong>广度优先</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findLexSmallestString</span><span class="params">(String s, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="comment">// bfs 操作队列</span></span><br><span class="line">        Deque&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        q.offer(s);</span><br><span class="line">        Set&lt;String&gt; vis = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        vis.add(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> s;</span><br><span class="line">        <span class="comment">// 去对每一个队列里面的元素进行操作，从而枚举所有的可能性</span></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            s = q.poll();</span><br><span class="line">            <span class="comment">// 比较 ans 和当前操作字符串的 ascii 码</span></span><br><span class="line">            <span class="keyword">if</span> (ans.compareTo(s) &gt; <span class="number">0</span>) ans = s;</span><br><span class="line">            <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">            <span class="comment">// 奇数位 + a</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>) </span><br><span class="line">                cs[i] = (<span class="type">char</span>)(((cs[i] - <span class="string">&#x27;0&#x27;</span> + a) % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">t1</span> <span class="operator">=</span> String.valueOf(cs);</span><br><span class="line">            <span class="comment">// 偶数位右移 b 位，这里用截取子串的形式</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">t2</span> <span class="operator">=</span> s.substring(n - b) + s.substring(<span class="number">0</span>, n - b);</span><br><span class="line">            <span class="comment">// 将两个操作结果加到 list 中并判断是否出现过</span></span><br><span class="line">            <span class="keyword">for</span> (String t : List.of(t1, t2)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis.add(t)) &#123;</span><br><span class="line">                    q.offer(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>枚举</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findLexSmallestString</span><span class="params">(String s, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            s = s.substring(b) + s.substring(<span class="number">0</span>, b);</span><br><span class="line">            <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt; n; k += <span class="number">2</span>) &#123;</span><br><span class="line">                   cs[k] = (<span class="type">char</span>) (((cs[k] - <span class="string">&#x27;0&#x27;</span> + a) % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt; <span class="number">10</span>; ++p) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k += <span class="number">2</span>) &#123;</span><br><span class="line">                            cs[k] = (<span class="type">char</span>) (((cs[k] - <span class="string">&#x27;0&#x27;</span> + a) % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        s = String.valueOf(cs);</span><br><span class="line">                        <span class="keyword">if</span> (ans.compareTo(s) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            ans = s;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s = String.valueOf(cs);</span><br><span class="line">                    <span class="keyword">if</span> (ans.compareTo(s) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        ans = s;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h3><blockquote>
<p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p>
<p><strong>字母异位词</strong> 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</p>
<p>LeetCode(hot 100) 49</p>
</blockquote>
<p><strong>排序</strong></p>
<p>可以找到一个规律，如果几个字符串互为字母异位词，那么将他们的字符排序的结果是一样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">char</span>[] array = str.toCharArray();</span><br><span class="line">            <span class="comment">// 按字符排序字符串</span></span><br><span class="line">            Arrays.sort(array);</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">            List&lt;String&gt; list = map.getOrDefault(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line">            list.add(str);</span><br><span class="line">            map.put(key, list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>计数</strong></p>
<p>总体思想和排序类似，只不过把map的key用计数的方式得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">                cnt[str.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append((<span class="type">char</span>)(i + <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">                    <span class="comment">// 把出现频率也拼接上可以防止重复字符的问题</span></span><br><span class="line">                    sb.append(cnt[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">            List&lt;String&gt; list = map.getOrDefault(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            list.add(str);</span><br><span class="line">            map.put(key, list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="字符串-双指针"><a href="#字符串-双指针" class="headerlink" title="字符串 + 双指针"></a>字符串 + 双指针</h2><h3 id="字典序排在最后的字符串"><a href="#字典序排在最后的字符串" class="headerlink" title="字典序排在最后的字符串"></a>字典序排在最后的字符串</h3><blockquote>
<p>给你一个字符串 <code>s</code> ，找出它的所有子串并按字典序排列，返回排在最后的那个子串。</p>
<p>LeetCode 1163 (hard)</p>
</blockquote>
<p><strong>分析</strong></p>
<p>此题是一道思维题，第一遍读完题，我以为它是动态规划题，或者用回溯做，主要思路就是枚举所有子串，然后比较字典序即可，但是转念又想，以 abcd 举例子，a 开头的所有子串，都有相同的前缀 a，所以，后缀越长的子串，那么我只需要遍历字符串，然后比较每一个字符开始到字符串结尾的子串不就好了？于是我写下了如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">lastSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> s.substring(i, n);</span><br><span class="line">            <span class="keyword">if</span> (sub.compareTo(ans) &gt; <span class="number">0</span>) ans = sub;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果力扣这老小子给了我一个几千个由 a 组成的测试案例，让我代码超时，所以我的思路行不通，那么只能从 KMP 算法中借鉴一下他的思想，不采用暴力匹配的方式，将重复的子串跳过比较</p>
<p><strong>双指针</strong></p>
<p>我们可以做如下考虑：利用两个指针，i 指向当前字典序最大的字符串起始位置，循环 j 来比较，在每次比较时需要合适的策略来移动 i 可以做到减少比较次数，然后返回 i 到字符串结尾就好了。</p>
<p> 以 s &#x3D; cacacb 为例，初始 i &#x3D; 0，j &#x3D; 1，第一次不同是 a 和 c，j 的字典序较小，于是 j++，下一次循环比较不同是 k &#x3D; 3 的时候，i 是 a， j 是 b，i 的字典序较小，这时候我们需要移动 i，i &#x3D; i + k + 1，因为，在 {i, i + k} 区间内的所有子串都一定比 j 位置的字符串小，所以可以不用比较。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">lastSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>, k = <span class="number">0</span>; j + k &lt; n;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> s.charAt(i + k) - s.charAt(j + k);</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="number">0</span>) &#123;</span><br><span class="line">                k++; <span class="comment">// 相同就移动 k 来继续比较</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                i += k + <span class="number">1</span>;</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">                    j = i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j += k + <span class="number">1</span>;</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h1 id="模拟-1"><a href="#模拟-1" class="headerlink" title="模拟"></a>模拟</h1><hr>
<h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><h3 id="统计共同度过的日子"><a href="#统计共同度过的日子" class="headerlink" title="统计共同度过的日子"></a>统计共同度过的日子</h3><blockquote>
<p>Alice 和 Bob 计划分别去罗马开会。</p>
<p>给你四个字符串 <code>arriveAlice</code> ，<code>leaveAlice</code> ，<code>arriveBob</code> 和 <code>leaveBob</code> 。Alice 会在日期 <code>arriveAlice</code> 到 <code>leaveAlice</code> 之间在城市里（<strong>日期为闭区间</strong>），而 Bob 在日期 <code>arriveBob</code> 到 <code>leaveBob</code> 之间在城市里（<strong>日期为闭区间</strong>）。每个字符串都包含 5 个字符，格式为 <code>&quot;MM-DD&quot;</code> ，对应着一个日期的月和日。</p>
<p>请你返回 Alice和 Bob 同时在罗马的天数。</p>
<p>你可以假设所有日期都在 <strong>同一个</strong> 自然年，而且 <strong>不是</strong> 闰年。每个月份的天数分别为：<code>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</code> 。</p>
<p>LeetCode 2409</p>
</blockquote>
<p><strong>模拟</strong></p>
<p>将日期转换成在一年的天数中的坐标，即可通过 right - lef + 1的方式计算出边界</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟12个月份的天气，后面直接累加月份的天数即可</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] DAYS = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算某个日期在一年中的坐标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">caculateDate</span><span class="params">(String date)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] d = date.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> (d[<span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + d[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mon</span> <span class="operator">=</span> (d[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + d[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// 只需要遍历到当前月的上一个月</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mon - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            day += DAYS[i];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countDaysTogether</span><span class="params">(String arriveAlice, String leaveAlice, String arriveBob, String leaveBob)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> caculateDate(arriveAlice.compareTo(arriveBob) &gt; <span class="number">0</span> ? arriveAlice : arriveBob);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> caculateDate(leaveAlice.compareTo(leaveBob) &lt; <span class="number">0</span> ? leaveAlice : leaveBob);</span><br><span class="line">        <span class="keyword">return</span> Math.max(right - left + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="差值不同的字符串"><a href="#差值不同的字符串" class="headerlink" title="差值不同的字符串"></a>差值不同的字符串</h3><blockquote>
<p>给你一个字符串数组 <code>words</code> ，每一个字符串长度都相同，令所有字符串的长度都为 <code>n</code> 。</p>
<p>每个字符串 <code>words[i]</code> 可以被转化为一个长度为 <code>n - 1</code> 的 <strong>差值整数数组</strong> <code>difference[i]</code> ，其中对于 <code>0 &lt;= j &lt;= n - 2</code> 有 <code>difference[i][j] = words[i][j+1] - words[i][j]</code> 。注意两个字母的差值定义为它们在字母表中 <strong>位置</strong> 之差，也就是说 <code>&#39;a&#39;</code> 的位置是 <code>0</code> ，<code>&#39;b&#39;</code> 的位置是 <code>1</code> ，<code>&#39;z&#39;</code> 的位置是 <code>25</code> 。</p>
<ul>
<li>比方说，字符串 <code>&quot;acb&quot;</code> 的差值整数数组是 <code>[2 - 0, 1 - 2] = [2, -1]</code> 。</li>
</ul>
<p><code>words</code> 中所有字符串 <strong>除了一个字符串以外</strong> ，其他字符串的差值整数数组都相同。你需要找到那个不同的字符串。</p>
<p>请你返回 <code>words</code>中 <strong>差值整数数组</strong> 不同的字符串。</p>
<p>LeetCode 2451 (easy)</p>
</blockquote>
<p><strong>分析</strong></p>
<p>这题比较简单，看上去也没什么算法，无非是先写一个得到差值数组的方法，然后再循环遍历每一个字符串得到各自的差值数组后比较得出不同的那个，我的第一反应就是用一个 HashMap 去存差值数组，最后这个HashMap 里面只有两个元素，个数为 1的那个就是，但是很明显这个方法的空间复杂度和思维都不够优秀，所以记录一下官方题解，他的空间复杂度只有 O1<br>原理是先比较数组的前两个元素，如果不同，说明答案就在其中一个，再和第三个元素比较即可，如果相同就更好办了，继续遍历余下数组，不同的那个就是答案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">oddString</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] diff0 = getDiff(words[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span>[] diff1 = getDiff(words[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (Arrays.equals(diff0, diff1)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Arrays.equals(diff0, getDiff(words[i]))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> words[i];</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(diff0, getDiff(words[<span class="number">2</span>])) ? words[<span class="number">1</span>] : words[<span class="number">0</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getDiff(String s) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res[i] = s.charAt(i + <span class="number">1</span>) - s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="常规模拟"><a href="#常规模拟" class="headerlink" title="常规模拟"></a>常规模拟</h2><h3 id="链表组件"><a href="#链表组件" class="headerlink" title="链表组件"></a>链表组件</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-12%2010.50.46.png" alt="截屏2022-10-12 10.50.46" style="zoom:50%;" />



<p><strong>用一个flag表示链表上一个元素是否在nums的set中，这个点比较妙</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numComponents</span><span class="params">(ListNode head, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; numsSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            numsSet.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">inSet</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numsSet.contains(head.val)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!inSet) &#123;</span><br><span class="line">                    inSet = <span class="literal">true</span>;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                inSet = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="猜数字游戏"><a href="#猜数字游戏" class="headerlink" title="猜数字游戏"></a>猜数字游戏</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-10-17%2023.07.32.png" alt="截屏2022-10-17 23.07.32" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHint</span><span class="params">(String secret, String guess)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bulls</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] cntS = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] cntG = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; secret.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (secret.charAt(i) == guess.charAt(i)) &#123;</span><br><span class="line">                bulls++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cntS[secret.charAt(i) - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">                cntG[guess.charAt(i) - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cows</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            cows += Math.min(cntG[i], cntS[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(bulls) + <span class="string">&quot;A&quot;</span> + Integer.toString(cows) + <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="解析布尔表达式"><a href="#解析布尔表达式" class="headerlink" title="解析布尔表达式"></a>解析布尔表达式</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-06%2000.11.27.png" alt="截屏2022-11-06 00.11.27" style="zoom:50%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">parseBoolExpr</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">      <span class="comment">// 用栈来模拟</span></span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> expression.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> expression.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c != <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (stack.peek() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">cur</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="keyword">if</span> (cur == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                        f++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        t++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="type">char</span> <span class="variable">operation</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">              <span class="comment">// 这里是核心，记录 t 和 f 的个数即可判断对错</span></span><br><span class="line">                <span class="keyword">switch</span>(operation) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                        stack.push(f == <span class="number">1</span> ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                        stack.push(f == <span class="number">0</span> ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:</span><br><span class="line">                        stack.push(t &gt; <span class="number">0</span> ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.peek() == <span class="string">&#x27;t&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h3 id="模糊坐标"><a href="#模糊坐标" class="headerlink" title="模糊坐标"></a>模糊坐标</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-07%2010.42.52.png" alt="截屏2022-11-07 10.42.52" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">ambiguousCoordinates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        s = s.substring(<span class="number">1</span>, s.length() - <span class="number">1</span>); <span class="comment">// 先去掉前后括号，只保留数字部分。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) <span class="comment">// 将s划分成【x轴】和【y轴】</span></span><br><span class="line">        <span class="comment">// 获得x轴由逗号分割的【n种】可能的合法数字</span></span><br><span class="line">            <span class="keyword">for</span> (String x : genNums(s.substring(<span class="number">0</span>, i))) </span><br><span class="line">            <span class="comment">// 获得y轴由逗号分割的【m种】可能的合法数字</span></span><br><span class="line">                <span class="keyword">for</span> (String y : genNums(s.substring(i))) </span><br><span class="line">                 <span class="comment">// 拼装在最终结果【n*m种】</span></span><br><span class="line">                    result.add(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;(&quot;</span>).append(x).</span><br><span class="line">                    append(<span class="string">&quot;, &quot;</span>).append(y).append(<span class="string">&quot;)&quot;</span>).toString());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 将num用逗号分割 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">genNums</span><span class="params">(String num)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        String left, right;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= num.length()) &#123;</span><br><span class="line">            left = num.substring(<span class="number">0</span>, i); <span class="comment">// 分割【整数】部分</span></span><br><span class="line">            right = num.substring(i++); <span class="comment">// 分割【小数】部分</span></span><br><span class="line">            <span class="comment">// 对于逗号左侧【整数】，不允许以0开头，除非这个整数就是0本身</span></span><br><span class="line">            <span class="comment">// 对于逗号右侧【小数】，不允许以0作为结尾</span></span><br><span class="line">            <span class="keyword">if</span> ((!left.equals(<span class="string">&quot;0&quot;</span>) &amp;&amp; left.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) || </span><br><span class="line">                    (!right.isEmpty() &amp;&amp; right.charAt(right.length() - <span class="number">1</span>) == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span>; </span><br><span class="line">            <span class="keyword">if</span> (right.isEmpty()) list.add(left);</span><br><span class="line">            <span class="keyword">else</span> list.add(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(left).</span><br><span class="line">            append(<span class="string">&quot;.&quot;</span>).append(right).toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="使字符串平衡"><a href="#使字符串平衡" class="headerlink" title="使字符串平衡"></a>使字符串平衡</h3><blockquote>
<p>给你一个字符串 <code>s</code> ，它仅包含字符 <code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code> 。</p>
<p>你可以删除 <code>s</code> 中任意数目的字符，使得 <code>s</code> <strong>平衡</strong> 。当不存在下标对 <code>(i,j)</code> 满足 <code>i &lt; j</code> ，且 <code>s[i] = &#39;b&#39;</code> 的同时 <code>s[j]= &#39;a&#39;</code> ，此时认为 <code>s</code> 是 <strong>平衡</strong> 的。</p>
<p>请你返回使 <code>s</code> <strong>平衡</strong> 的 <strong>最少</strong> 删除次数。</p>
<p>LeetCode: 1653</p>
</blockquote>
<p><strong>模拟</strong></p>
<p>此题可以包含三种情况</p>
<ul>
<li>全是 a</li>
<li>全是 b</li>
<li>有 a 也有 b</li>
</ul>
<p>其实也就是比较三种情况的操作次数，找到最小值，从直观上来说，如果有 a 也有 b的话，操作数是最少的，所以前两种情况可以看为一种，来和情况 3 做对比。</p>
<p>所以就采用以下策略：找到一个分界点，将分界点左侧的 b 删掉，将分界点右侧的 a 删掉，我们需要找到最小的这个操作数分界点，于是从左往右遍历即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDeletions</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// leftb 是左边要删除的 b 的个数，righta 是右边要删除的 a 的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftb</span> <span class="operator">=</span> <span class="number">0</span>, righta = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="comment">// 因为待会是从左往右遍历，所以先计算右边需要删除的a的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;a&#x27;</span>) righta++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> righta;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                righta--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                leftb++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.min(res, leftb + righta);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>- </p>
<p>上述方法有两个可以继续优化的点</p>
<ol>
<li>只需要记录右 a 的个数就好了，不需要记录左 b，一开始先记录0索引下右边所有的a的个数，然后开始遍历，遇到了 a，就将操作数减1，遇到了 b，就将删除操作数加1</li>
<li>用数学运算的方式取代 if else ，cpu 在执行if分支的时候会预测程序走哪个分支，如果走错了会重新开始走，所以减少 if分支会提高效率</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDeletions</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ss = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">del</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ss) del += <span class="string">&#x27;b&#x27;</span> - c;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> del;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ss) &#123;</span><br><span class="line">            <span class="comment">// 如果是 a 就减少删除操作次数，如果是 b 就增加删除操作次数</span></span><br><span class="line">            del += (c - <span class="string">&#x27;a&#x27;</span>) * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            res = Math.min(res, del);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>动态规划</strong></p>
<p>考虑 s 的最后一个字符</p>
<ul>
<li>如果它是 b,则无需操作，问题规模缩小，变成使前 n-1 个字符平衡的最小操作数</li>
<li>如果它是 a，则<ul>
<li>删掉它，使得操作数 +1</li>
<li>保留它，将这个 a 前面的 b 全部删除，</li>
</ul>
</li>
</ul>
<p>设 cntB 是前面 b 的总数，定义 f[i] 表示使前面 i 个字符平衡的最小删除次数</p>
<ul>
<li>如果 i 是 b，则 f[i] &#x3D; fi[i - 1]</li>
<li>如果是 a，则： f[i] &#x3D; Math.min(f[i - 1] + 1, cntB)</li>
</ul>
<p>其中 dp 数组可以用一个变量 f 来代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDeletions</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cntB</span> <span class="operator">=</span> <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;b&#x27;</span>) cntB++;</span><br><span class="line">            <span class="keyword">else</span> f = Math.min(f + <span class="number">1</span>, cntB);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>











<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="困于环中的机器人"><a href="#困于环中的机器人" class="headerlink" title="困于环中的机器人"></a>困于环中的机器人</h3><blockquote>
<p>在无限的平面上，机器人最初位于 <code>(0, 0)</code> 处，面朝北方。注意:</p>
<ul>
<li><strong>北方向</strong> 是y轴的正方向。</li>
<li><strong>南方向</strong> 是y轴的负方向。</li>
<li><strong>东方向</strong> 是x轴的正方向。</li>
<li><strong>西方向</strong> 是x轴的负方向。</li>
</ul>
<p>机器人可以接受下列三条指令之一：</p>
<ul>
<li><code>&quot;G&quot;</code>：直走 1 个单位</li>
<li><code>&quot;L&quot;</code>：左转 90 度</li>
<li><code>&quot;R&quot;</code>：右转 90 度</li>
</ul>
<p>机器人按顺序执行指令 <code>instructions</code>，并一直重复它们。</p>
<p>只有在平面中存在环使得机器人永远无法离开时，返回 <code>true</code>。否则，返回 <code>false</code>。</p>
<p>LeetCode(1041)</p>
</blockquote>
<p><strong>方向模拟</strong></p>
<p>用一个二位矩阵模拟方向，然后用一个变量模拟方向<br>被困于环的条件：一次执行执行完后，坐标回到原点，或者方向不面对北</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRobotBounded</span><span class="params">(String instructions)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] directions = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;; </span><br><span class="line">        <span class="comment">// 方向标志，初始向北</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">direcIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; instructions.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> instructions.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">                x += directions[direcIndex][<span class="number">0</span>];</span><br><span class="line">                y += directions[direcIndex][<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                direcIndex += <span class="number">3</span>; <span class="comment">// 向左转意味着在原有方向基础上向西转</span></span><br><span class="line">                direcIndex %= <span class="number">4</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                direcIndex += <span class="number">1</span>;</span><br><span class="line">                direcIndex %= <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行一串指令后不在原点且方向必须为北才不会陷入循环</span></span><br><span class="line">        <span class="keyword">return</span> direcIndex != <span class="number">0</span> || (x == <span class="number">0</span> &amp;&amp; y== <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="区间子数组个数"><a href="#区间子数组个数" class="headerlink" title="区间子数组个数"></a>区间子数组个数</h3><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-11-24%2014.57.54.png" alt="截屏2022-11-24 14.57.54" style="zoom:50%;" />



<p><strong>双指针</strong></p>
<p>经分析可以发现，可以用两个变量last1 和 last2，last1指带上次出现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarrayBoundedMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last1</span> <span class="operator">=</span> -<span class="number">1</span>, last2 = -<span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= right &amp;&amp; nums[i] &gt;= left) &#123;</span><br><span class="line">                last1 = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &gt; right) &#123;</span><br><span class="line">                last2 = i;</span><br><span class="line">                last1 = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (last1 != -<span class="number">1</span>) &#123;</span><br><span class="line">                ans += last1 - last2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h3><blockquote>
<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p>
<p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<p><strong>说明：</strong>你不能倾斜容器。</p>
<p>LeetCode: 11 （hot 100）</p>
</blockquote>
<p><strong>双指针 + 贪心</strong></p>
<p>数组的每个元素相当于一个挡板，两个挡板组成的容器的面积是：(r - l) * Math.min(height[l], height[r])<br>此题使用双指针，从数组的两端开始，每次计算完当前挡板组成的面积后，移动高度较小的那个挡板<br>为什么移动高度较小的挡板是正确的？详见题解,仅从个人理解来说，高度较小的挡板是决定面积的关键性因素，移动较小的挡板是直观的，概率更大的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            ans = Math.max(ans, (r - l) * Math.min(height[r], height[l]));</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt; height[r]) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h3><blockquote>
<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p>
<p>你返回所有和为 <code>0</code> 且不重复的三元组。</p>
<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>
<p>LeetCode : 15 (hot 100)</p>
</blockquote>
<p><strong>暴力</strong></p>
<p>此题主要难点在于如何去重，去重的第一步是将数组排序,并且，每次循环之前也要判断当前遍历的元素和之前遍历的是否相同<br>否则(1, 2,3,3)这样的就会被认为是两个三元组,暴力方法会超时，仅作为抛砖引玉的作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j == i + <span class="number">1</span> || nums[j] != nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j + <span class="number">1</span>; k &lt; nums.length; k++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((k == j + <span class="number">1</span> || nums[k] != nums[k - <span class="number">1</span>])</span><br><span class="line">                            &amp;&amp; (nums[i] + nums[j] + nums[k] == <span class="number">0</span>)) &#123;</span><br><span class="line">                                List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                                cur.add(nums[i]);</span><br><span class="line">                                cur.add(nums[j]);</span><br><span class="line">                                cur.add(nums[k]);</span><br><span class="line">                                list.add(cur);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>双指针</strong></p>
<p>可以考虑固定 a、b指针，c指针从右向左遍历，这样若想 a + b + c &#x3D; 0,则只有唯一的 c 满足此等式，则 b指针在变大的过程中，c 向左遍历，当b &gt; c 时就没有遍历的必要了，重复了。<br><strong>这种固定两个找第三个的思路就是经典的双指针算法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> <span class="number">0</span>; first &lt; n; first++) &#123;</span><br><span class="line">            <span class="comment">// first 指针判定合法性</span></span><br><span class="line">            <span class="keyword">if</span> (first &gt; <span class="number">0</span> &amp;&amp; nums[first] == nums[first - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// third 指针不固定，每次从最右边来遍历</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">third</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> -nums[first];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> first + <span class="number">1</span>; second &lt; n; second++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (second &gt; first + <span class="number">1</span> &amp;&amp; nums[second] == nums[second - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证second 在 third 指针的左侧</span></span><br><span class="line">                <span class="keyword">while</span> (second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target) &#123;</span><br><span class="line">                    third--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (second == third) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nums[second] + nums[third] == target) &#123;</span><br><span class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                    list.add(nums[first]);</span><br><span class="line">                    list.add(nums[second]);</span><br><span class="line">                    list.add(nums[third]);</span><br><span class="line">                    ans.add(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="下一个排列"><a href="#下一个排列" class="headerlink" title="下一个排列"></a>下一个排列</h3><blockquote>
<p>整数数组的一个 <strong>排列</strong> 就是将其所有成员以序列或线性顺序排列。</p>
<ul>
<li>例如，<code>arr = [1,2,3]</code> ，以下这些都可以视作 <code>arr</code> 的排列：<code>[1,2,3]</code>、<code>[1,3,2]</code>、<code>[3,1,2]</code>、<code>[2,3,1]</code> 。</li>
</ul>
<p>整数数组的 <strong>下一个排列</strong> 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 <strong>下一个排列</strong> 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p>
<ul>
<li>例如，<code>arr = [1,2,3]</code> 的下一个排列是 <code>[1,3,2]</code> 。</li>
<li>类似地，<code>arr = [2,3,1]</code> 的下一个排列是 <code>[3,1,2]</code> 。</li>
<li>而 <code>arr = [3,2,1]</code> 的下一个排列是 <code>[1,2,3]</code> ，因为 <code>[3,2,1]</code> 不存在一个字典序更大的排列。</li>
</ul>
<p>给你一个整数数组 <code>nums</code> ，找出 <code>nums</code> 的下一个排列。</p>
<p>必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地 </a>**修改，只允许使用额外常数空间。</p>
<p>LeetCode 31(hot 100)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        1. 从后往前找到第一个升序数对 i，j</span></span><br><span class="line"><span class="comment">        2. 将 i 后看的排序，并找到第一个比 i 大的交换</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                Arrays.sort(nums, i, n);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[k] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i - <span class="number">1</span>];</span><br><span class="line">                        nums[i - <span class="number">1</span>] = nums[k];</span><br><span class="line">                        nums[k] = temp;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="分割两个字符串得回文串"><a href="#分割两个字符串得回文串" class="headerlink" title="分割两个字符串得回文串"></a>分割两个字符串得回文串</h3><blockquote>
<p>给你两个字符串 <code>a</code> 和 <code>b</code> ，它们长度相同。请你选择一个下标，将两个字符串都在 <strong>相同的下标</strong> 分割开。由 <code>a</code> 可以得到两个字符串： <code>aprefix</code> 和 <code>asuffix</code> ，满足 <code>a = aprefix + asuffix</code> ，同理，由 <code>b</code>可以得到两个字符串 <code>bprefix</code> 和 <code>bsuffix</code> ，满足 <code>b = bprefix + bsuffix</code> 。请你判断 <code>aprefix + bsuffix</code> 或者 <code>bprefix + asuffix</code> 能否构成回文串。</p>
<p>当你将一个字符串 <code>s</code> 分割成 <code>sprefix</code> 和 <code>ssuffix</code> 时， <code>ssuffix</code> 或者 <code>sprefix</code> 可以为空。比方说， <code>s = &quot;abc&quot;</code> 那么 <code>&quot;&quot; + &quot;abc&quot;</code> ， <code>&quot;a&quot; + &quot;bc&quot; </code>， <code>&quot;ab&quot; + &quot;c&quot;</code> 和 <code>&quot;abc&quot; + &quot;&quot;</code> 都是合法分割。</p>
<p>如果 <strong>能构成回文字符串</strong> ，那么请返回 <code>true</code>，否则返回 <code>false</code> 。</p>
<p><strong>注意</strong>， <code>x + y</code> 表示连接字符串 <code>x</code> 和 <code>y</code> 。</p>
<p>LeetCode(1616)</p>
</blockquote>
<p><strong>双指针+贪心</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-03-18%2023.41.40.png" alt="截屏2023-03-18 23.41.40" style="zoom:50%;" />



<p>由上图可以看出：</p>
<ul>
<li>a 和 b 分割后能组成回文串其实就是，找到 a 和 b前后匹配的字符的位置，然后在看中间的 a 或 b 的字符串是不是回文</li>
<li>并且由贪心算法可知，a 和 b前后匹配的字符越长，中间是回文串的概率越大</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPalindromeFormation</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(a, b) || check(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 双指针判断最长匹配</span></span><br><span class="line">    <span class="comment">// 从最长匹配开始（这里蕴含一个贪心算法，匹配的字符串越长，中间是回问串的概率越大）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = b.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; a.charAt(left) == b.charAt(right)) &#123;</span><br><span class="line">            ++left;</span><br><span class="line">            --right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isPalindrome(a, left, right) || isPalindrome(b, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否是回文串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="颜色分类"><a href="#颜色分类" class="headerlink" title="颜色分类"></a>颜色分类</h3><blockquote>
<p>给定一个包含红色、白色和蓝色、共 <code>n</code> 个元素的数组 <code>nums</code> ，**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>**对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>
<p>我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p>
<p>必须在不使用库内置的 sort 函数的情况下解决这个问题。</p>
<p>LeetCode(hot 100) 75</p>
</blockquote>
<p><strong>单指针 + 两次遍历</strong></p>
<p>使用一个指针表示当前交换元素的位置，然后遍历2次，第一次把所有的 0 换到数组前面去，第二次把 2 换到数组前面去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[idx];</span><br><span class="line">                nums[idx] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">                idx++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[idx];</span><br><span class="line">                nums[idx] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">                idx++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>双指针 + 一次遍历</strong></p>
<p>通过两个指针 p0 和 p1 来完成一次遍历的交换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p0</span> <span class="operator">=</span> <span class="number">0</span>, p1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[p1];</span><br><span class="line">                nums[p1] = temp;</span><br><span class="line">                p1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[p0];</span><br><span class="line">                nums[p0] = temp;</span><br><span class="line">                <span class="comment">// p0 &lt; p1 的话说明把 p0 换出来一定会导致 1 换出去</span></span><br><span class="line">                <span class="keyword">if</span> (p0 &lt; p1) &#123;</span><br><span class="line">                    temp = nums[i];</span><br><span class="line">                    nums[i] = nums[p1];</span><br><span class="line">                    nums[p1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                p0++;</span><br><span class="line">                p1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>双指针 + 一次遍历 优化</strong></p>
<p>很容易从方法二想到，每次交换的数组从0和1变成0和2，一头一尾<br>但是要注意几个问题，当 nums[i] 是2时，我们将其和p2交换，但是p2可能是0，也可能是2，但是如果是2，nums[i] 是交换结束后自加，再也不会考虑的，这就会导致一些问题，所以需要弄一个while循环，不断的去判断当前数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p0</span> <span class="operator">=</span> <span class="number">0</span>, p2 = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= p2; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= p2 &amp;&amp; nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[p2];</span><br><span class="line">                nums[p2] = temp;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[p0];</span><br><span class="line">                nums[p0] = temp;</span><br><span class="line">                p0++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h3><blockquote>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p>LeetCode : 3 (hot 100)</p>
</blockquote>
<p><strong>滑动窗口：</strong><br>固定左窗口，不断右移右窗口，通过一个map判断字符有没有出现过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">                left = Math.max(left, map.get(c) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(c, i);</span><br><span class="line">            max = Math.max(max, i - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















<h1 id="思维倒置"><a href="#思维倒置" class="headerlink" title="思维倒置"></a>思维倒置</h1><h2 id="反向操作"><a href="#反向操作" class="headerlink" title="反向操作"></a>反向操作</h2><h3 id="删除子文件夹"><a href="#删除子文件夹" class="headerlink" title="删除子文件夹"></a>删除子文件夹</h3><blockquote>
<p>你是一位系统管理员，手里有一份文件夹列表 <code>folder</code>，你的任务是要删除该列表中的所有 <strong>子文件夹</strong>，并以 <strong>任意顺序</strong> 返回剩下的文件夹。</p>
<p>如果文件夹 <code>folder[i]</code> 位于另一个文件夹 <code>folder[j]</code> 下，那么 <code>folder[i]</code> 就是 <code>folder[j]</code> 的 <strong>子文件夹</strong> 。</p>
<p>文件夹的「路径」是由一个或多个按以下格式串联形成的字符串：’&#x2F;‘ 后跟一个或者多个小写英文字母。</p>
<ul>
<li>例如，<code>&quot;/leetcode&quot;</code> 和 <code>&quot;/leetcode/problems&quot;</code> 都是有效的路径，而空字符串和 <code>&quot;/&quot;</code> 不是。</li>
</ul>
<p>LeetCode:1233</p>
</blockquote>
<p><strong>反向处理</strong></p>
<p>在遇到删除类的问题时，常常可以从相反的方向进行处理，比如这题如果想从正面处理，比较每个两两字符串，然后删除，难度较大，所以可以把符合条件的字符串加到新的集合中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">removeSubfolders</span><span class="params">(String[] folder)</span> &#123;</span><br><span class="line">        Arrays.sort(folder);</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ans.add(folder[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; folder.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">preStr</span> <span class="operator">=</span> ans.get(ans.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">preLength</span> <span class="operator">=</span> preStr.length();</span><br><span class="line">            <span class="keyword">if</span> (!(preLength &lt; folder[i].length() &amp;&amp; </span><br><span class="line">                preStr.equals(folder[i].substring(<span class="number">0</span>, preLength)) &amp;&amp;</span><br><span class="line">                folder[i].charAt(preLength) == <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    )) &#123;</span><br><span class="line">        ans.add(folder[i]);</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h1 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h1><hr>
<h2 id="简单数组操作"><a href="#简单数组操作" class="headerlink" title="简单数组操作"></a>简单数组操作</h2><h3 id="数组能形成多少数对"><a href="#数组能形成多少数对" class="headerlink" title="数组能形成多少数对"></a>数组能形成多少数对</h3><blockquote>
<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。在一步操作中，你可以执行以下步骤：</p>
<ul>
<li>从 <code>nums</code> 选出 <strong>两个</strong> <strong>相等的</strong> 整数</li>
<li>从 <code>nums</code> 中移除这两个整数，形成一个 <strong>数对</strong></li>
</ul>
<p>请你在 <code>nums</code> 上多次执行此操作直到无法继续执行。</p>
<p>返回一个下标从 <strong>0</strong> 开始、长度为 <code>2</code> 的整数数组 <code>answer</code> 作为答案，其中 <code>answer[0]</code> 是形成的数对数目，<code>answer[1]</code> 是对 <code>nums</code> 尽可能执行上述操作后剩下的整数数目。</p>
</blockquote>
<p><strong>哈希</strong></p>
<p>虽然我一开始也考虑过用boolean来表示数字是否有数对，但是没想到这么优雅的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] numberOfPairs(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">          <span class="comment">// true：可以成为数对</span></span><br><span class="line">            map.put(num, !map.getOrDefault(num, <span class="literal">false</span>));</span><br><span class="line">            <span class="keyword">if</span> (!map.get(num)) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;ans, n - ans * <span class="number">2</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>利用数组限制</strong></p>
<p>由于此题给定了数组元素的大小（&lt; 100）所以可以利用计数数组来做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] numberOfPairs(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">101</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            ++cnt[num];</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : cnt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ans += c / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;ans, n - ans * <span class="number">2</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="数组-排序"><a href="#数组-排序" class="headerlink" title="数组 + 排序"></a>数组 + 排序</h2><h3 id="按身高排序"><a href="#按身高排序" class="headerlink" title="按身高排序"></a>按身高排序</h3><blockquote>
<p>给你一个字符串数组 <code>names</code> ，和一个由 <strong>互不相同</strong> 的正整数组成的数组 <code>heights</code> 。两个数组的长度均为 <code>n</code> 。</p>
<p>对于每个下标 <code>i</code>，<code>names[i]</code> 和 <code>heights[i]</code> 表示第 <code>i</code> 个人的名字和身高。</p>
<p>请按身高 <strong>降序</strong> 顺序返回对应的名字数组 <code>names</code> 。</p>
<p>LeetCode 2418 (easy)</p>
</blockquote>
<p><strong>排序</strong></p>
<p>这题用 map 做是很简单的，这里提供一个小的新思路，就是用空间换时间，用一个等长数组来表示下标</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] sortPeople(String[] names, <span class="type">int</span>[] heights) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> names.length;</span><br><span class="line">       Integer[] indicates = <span class="keyword">new</span> <span class="title class_">Integer</span>[n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           indicates[i] = i;</span><br><span class="line">       &#125;</span><br><span class="line">       Arrays.sort(indicates, (a, b) -&gt; heights[b] - heights[a]);</span><br><span class="line">       String[] ans = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           ans[i] = names[indicates[i]];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a>合并区间</h3><blockquote>
<p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p>
<p>LeetCode(hot 100) 56</p>
</blockquote>
<p><strong>排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] intervals1, <span class="type">int</span>[] intervals2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> intervals1[<span class="number">0</span>] - intervals2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; merged = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[i][<span class="number">0</span>], right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 当前区间不在已有的重合区间内</span></span><br><span class="line">            <span class="keyword">if</span> (merged.size() == <span class="number">0</span> || left &gt; merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>]) &#123;</span><br><span class="line">                merged.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left, right&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>] = </span><br><span class="line">                    Math.max(right, merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[merged.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="数组原地操作"><a href="#数组原地操作" class="headerlink" title="数组原地操作"></a>数组原地操作</h2><h3 id="找到数组中消失的数字"><a href="#找到数组中消失的数字" class="headerlink" title="找到数组中消失的数字"></a>找到数组中消失的数字</h3><blockquote>
<p>给你一个含 <code>n</code> 个整数的数组 <code>nums</code> ，其中 <code>nums[i]</code>在区间 <code>[1, n]</code> 内。请你找出所有在 <code>[1, n]</code> 范围内但没有出现在 <code>nums</code> 中的数字，并以数组的形式返回结果。</p>
<p> LeetCode 448 (hot 100)</p>
</blockquote>
<p><strong>鸽笼原理</strong></p>
<p>这题我先用了 set 来做辅助去重，然后又声明了一个长度为 n 的额外数组来做辅助，最后看了官方发现可以进行原地操作，只需要把数变到范围之外即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findDisappearedNumbers</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (num - <span class="number">1</span>) % n;</span><br><span class="line">            nums[x] += n;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= n) &#123;</span><br><span class="line">                ans.add(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="数组的改变和移动"><a href="#数组的改变和移动" class="headerlink" title="数组的改变和移动"></a>数组的改变和移动</h2><h3 id="最小操作次数使相等"><a href="#最小操作次数使相等" class="headerlink" title="最小操作次数使相等"></a>最小操作次数使相等</h3><blockquote>
<p>给你一个长度为 <code>n</code> 的整数数组，每次操作将会使 <code>n - 1</code> 个元素增加 <code>1</code> 。返回让数组所有元素相等的最小操作次数。</p>
<p>LeetCode 453 (medium)</p>
</blockquote>
<p><strong>反向考虑</strong></p>
<p>把题目反过来会很好想，这题只求操作数，说明数组元素的具体大小并不影响结果，影响结果的只是相对大小，而每次将 n - 1 个元素 +1也可以理解为将最大的那个唯一的元素 -1，这样就很简单了,我们只需要将数组中所有元素减小到最小值的操作数累加起来就好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMoves</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Arrays.stream(nums).min().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            ans += num - min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="按列翻转得到最大值的等行"><a href="#按列翻转得到最大值的等行" class="headerlink" title="按列翻转得到最大值的等行"></a>按列翻转得到最大值的等行</h3><blockquote>
<p>给定 <code>m x n</code> 矩阵 <code>matrix</code> 。</p>
<p>你可以从中选出任意数量的列并翻转其上的 <strong>每个</strong> 单元格。（即翻转后，单元格的值从 <code>0</code> 变成 <code>1</code>，或者从 <code>1</code>变为 <code>0</code> 。）</p>
<p>返回 <em>经过一些翻转后，行与行之间所有值都相等的最大行数</em> 。</p>
<p>LeetCode 1072 (medium)</p>
</blockquote>
<p><strong>思路</strong></p>
<p>刚拿到这题也不知道如何考虑，感觉很难，以为是动态规划，枚举翻转所有列的可能性找到相同行的最多的数量，但是明显不可能，难度太大，看了大神的思路后恍然大悟：假设 A 列和 B 列，我们进行列的反转之后，要想 A 和 B 同时达到行同的状态，那么 A 和 B 必须满足以下两种情况的任意一种：</p>
<ul>
<li>A、 B 相同：即 A &#x3D; 1 0 0 1 ， B &#x3D; 1 0 0 1</li>
<li>A 、B互补：即 A &#x3D; 1 0 0 1， B &#x3D; 0 1 1 0</li>
</ul>
<p>这样即可做到，那么我们就可以遍历矩阵，如果行是以 0 开头的，就不反转，1 开头的就反转，并加入 map，看看相同的字符串有几个，相同的字符串就是反转后可以同时达到行同的字符串数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxEqualRowsAfterFlips</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">char</span>[] cur = <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">            Arrays.fill(cur, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                cur[j] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + (matrix[i][j] ^ matrix[i][<span class="number">0</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cur);</span><br><span class="line">            map.put(s, map.getOrDefault(s, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            max = Math.max(max, entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>下面这段代码思路相同，但是使用了 map 的 merge 方法，值得一看</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxEqualRowsAfterFlips</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> row : matrix) &#123;</span><br><span class="line">            <span class="type">char</span>[] cs = <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                cs[i] = (<span class="type">char</span>) (row[<span class="number">0</span>] ^ row[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, cnt.merge(String.valueOf(cs), <span class="number">1</span>, Integer::sum));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="二维矩阵"><a href="#二维矩阵" class="headerlink" title="二维矩阵"></a>二维矩阵</h2><h3 id="二进制矩阵最短通路"><a href="#二进制矩阵最短通路" class="headerlink" title="二进制矩阵最短通路"></a>二进制矩阵最短通路</h3><blockquote>
<p>leetcode 1091 (medium)</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-26%2009.52.32.png" style="zoom:50%;">



<p><strong>BFS</strong></p>
<p>首先我们需要弄清楚在二维矩阵搜索时什么时候用 dfs，什么时候用 bfs？</p>
<ol>
<li>如果只是要找到某一个结果是否存在，那么DFS会更高效。因为DFS会首先把一种可能的情况尝试到底，才会回溯去尝试下一种情况，只要找到一种情况，就可以返回了。但是BFS必须所有可能的情况同时尝试，在找到一种满足条件的结果的同时，也尝试了很多不必要的路径；</li>
<li>如果是要找所有可能结果中最短的，那么BFS回更高效。因为DFS是一种一种的尝试，在把所有可能情况尝试完之前，无法确定哪个是最短，所以DFS必须把所有情况都找一遍，才能确定最终答案（DFS的优化就是剪枝，不剪枝很容易超时）。而BFS从一开始就是尝试所有情况，所以只要找到第一个达到的那个点，那就是最短的路径，可以直接返回了，其他情况都可以省略了，所以这种情况下，BFS更高效。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestPathBinaryMatrix</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="keyword">if</span> (grid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> || grid[n - <span class="number">1</span>][n - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 设置为1表明已经访问过</span></span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        dq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="comment">// res记录搜索的轮数，直到找到队列为空仍没到右下角，则返回 -1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>; !dq.isEmpty(); res++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> dq.size(); k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="type">int</span>[] cur = dq.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cur[<span class="number">0</span>], j = cur[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 当前元素是右下角，就直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (i == n - <span class="number">1</span> &amp;&amp; j == n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 不是右下角元素就将当前节点八个方向不为1的元素加入队列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i - <span class="number">1</span>; x &lt;= i + <span class="number">1</span>; x++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j - <span class="number">1</span>; y &lt;= j + <span class="number">1</span>; y++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n &amp;&amp; grid[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                            grid[x][y] = <span class="number">1</span>; <span class="comment">// 加入队列意味着访问，当前轮的其他路径可以不用多访问一次了</span></span><br><span class="line">                            dq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



































<h1 id="动归-贪心"><a href="#动归-贪心" class="headerlink" title="动归+贪心"></a>动归+贪心</h1><hr>
<h2 id="范围覆盖问题"><a href="#范围覆盖问题" class="headerlink" title="范围覆盖问题"></a>范围覆盖问题</h2><h3 id="跳跃游戏2"><a href="#跳跃游戏2" class="headerlink" title="跳跃游戏2"></a>跳跃游戏2</h3><blockquote>
<p>题目描述：<br>给你一个非负整数数组 nums ，你最初位于数组的第一个位置。<br>数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>你的目标是使用最少的跳跃次数到达数组的最后一个位置。<br>假设你总是可以到达数组的最后一个位置。</p>
<p>leetcode：45</p>
</blockquote>
<p><strong>动态规划</strong></p>
<p>令 dp[i] 数组的含义是跳跃到 i 位置的最小跳跃次数<br>则，当我们在 i 时，我们可以跳到 dp[i] + i 的任意位置, 假设从 dp[i] 向前跳了 j 位置，则 dp[i + j] &#x3D; Math.min(dp[i + j], dp[i] + 1);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// dp[i] 表示走到 i 位置的最小次数</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 从头到尾遍历位置，并完成 dp 数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 每遍历到一个位置，就去比较一下该位置所能跳到的位置的 dp 数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= nums[i]; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + j &gt;= n) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">                dp[i + j] = Math.min(dp[i + j], dp[i] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>贪心1. 巧妙的贪心策略</strong></p>
<p>这个贪心策略很巧妙，就是从最后一个元素开始往回推，看哪个元素能走到这里，往回推的策略就是一个巧妙的贪心–我们认为，靠左的元素的到达最后一个元素的步数更少。但这种方案时间复杂度较高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (position &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + nums[i] &gt;= position) &#123;</span><br><span class="line">                    position = i;</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>贪心2. 正面推</strong></p>
<p>维护一个每次移动的边界以及最大距离，即可做到一次遍历得到结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 步数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 判断当前位置有没有到此次最大范围的边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDistance</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 可移动的最大距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            maxDistance = Math.max(maxDistance, i + nums[i]); <span class="comment">// 更新最大范围</span></span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123; <span class="comment">// 如果移动范围已经到了更新前的距离边界，那就 步数++且更新end</span></span><br><span class="line">                ans++;</span><br><span class="line">                end = maxDistance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="灌溉花园的最少水龙头"><a href="#灌溉花园的最少水龙头" class="headerlink" title="灌溉花园的最少水龙头"></a>灌溉花园的最少水龙头</h3><blockquote>
<p>在 x 轴上有一个一维的花园。花园长度为 <code>n</code>，从点 <code>0</code> 开始，到点 <code>n</code> 结束。</p>
<p>花园里总共有 <code>n + 1</code> 个水龙头，分别位于 <code>[0, 1, ..., n]</code> 。</p>
<p>给你一个整数 <code>n</code> 和一个长度为 <code>n + 1</code> 的整数数组 <code>ranges</code> ，其中 <code>ranges[i]</code> （下标从 0 开始）表示：如果打开点 <code>i</code> 处的水龙头，可以灌溉的区域为 <code>[i - ranges[i], i + ranges[i]]</code> 。</p>
<p>请你返回可以灌溉整个花园的 <strong>最少水龙头数目</strong> 。如果花园始终存在无法灌溉到的地方，请你返回 <strong>-1</strong> 。</p>
<p>Leetcode: 1326</p>
</blockquote>
<p><strong>动态规划</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minTaps</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] ranges)</span> &#123;</span><br><span class="line">        <span class="comment">// 将rangs的区间算出来，并截取超出 0 到 n 范围的区间的超出部分</span></span><br><span class="line">        <span class="type">int</span>[][] intervals = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, i - ranges[i]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(n, i + ranges[i]);</span><br><span class="line">            intervals[i] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;start, end&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将区间从小到大排序（注：后面的lambda是默认的从小到大排序写法，但是必须得有）</span></span><br><span class="line">        Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> interval[<span class="number">0</span>], end = interval[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (dp[start] == Integer.MAX_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                dp[i] = Math.min(dp[i], dp[start] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h3 id="视频拼接"><a href="#视频拼接" class="headerlink" title="视频拼接"></a>视频拼接</h3><blockquote>
<p>你将会获得一系列视频片段，这些片段来自于一项持续时长为 <code>time</code> 秒的体育赛事。这些片段可能有所重叠，也可能长度不一。</p>
<p>使用数组 <code>clips</code> 描述所有的视频片段，其中 <code>clips[i] = [starti, endi]</code> 表示：某个视频片段开始于 <code>starti</code> 并于 <code>endi</code> 结束。</p>
<p>甚至可以对这些片段自由地再剪辑：</p>
<ul>
<li>例如，片段 <code>[0, 7]</code> 可以剪切成 <code>[0, 1] + [1, 3] + [3, 7]</code> 三部分。</li>
</ul>
<p>我们需要将这些片段进行再剪辑，并将剪辑后的内容拼接成覆盖整个运动过程的片段（<code>[0, time]</code>）。返回所需片段的最小数目，如果无法完成该任务，则返回 <code>-1</code> 。</p>
<p>leetcode：1024</p>
</blockquote>
<p><strong>动态规划</strong></p>
<p>当前选择的视频片段会对下一个选择的片段有影响，dp 的味道就来了。<br>令 dp[i] 表示将区间 [0, i) 覆盖所需要的最少视频片段的数量，我们通过枚举给定的time时间点来确定 dp 的状态转移方程，假设当前枚举到 i，那么对于第 j 个视频片段其覆盖的区间是 [aj , bj] ，如果 aj &lt;&#x3D; i &lt; bj，那么这个视频片段就可以覆盖 [0, i) 的后半部分，而前半部分可以用 dp[aj] 的对应的最优方法进行覆盖，这样 dp[j] &#x3D; dp[aj] + 1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">videoStitching</span><span class="params">(<span class="type">int</span>[][] clips, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[time + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE - <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 枚举所有的时间点，确定 dp 方程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= time; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] clip : clips) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clip[<span class="number">0</span>] &lt; i &amp;&amp; i &lt;= clip[<span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[clip[<span class="number">0</span>]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[time] == Integer.MAX_VALUE - <span class="number">1</span> ? -<span class="number">1</span> : dp[time];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























]]></content>
  </entry>
  <entry>
    <title>SSM 框架</title>
    <url>/2022/03/22/SSM%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="x3D-x3D-一、MyBatis概述-x3D-x3D"><a href="#x3D-x3D-一、MyBatis概述-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;一、MyBatis概述&#x3D;&#x3D;"></a>&#x3D;&#x3D;一、MyBatis概述&#x3D;&#x3D;</h1><hr>
<h2 id="1-1-框架概念"><a href="#1-1-框架概念" class="headerlink" title="1.1 框架概念"></a>1.1 框架概念</h2><blockquote>
<p>框架就是软件的半成品，完成了软件开发过程中的通用操作，程序员只需要很少或者不用加工就能实现特定的功能，从而简化开发人员在软件开发中的步骤，提高开发效率</p>
</blockquote>
<h2 id="1-2-常用框架"><a href="#1-2-常用框架" class="headerlink" title="1.2 常用框架"></a>1.2 常用框架</h2><ul>
<li>MVC框架：简化了Servlet的开发步骤<ul>
<li>Struts2</li>
<li><strong>SpringMVC</strong></li>
</ul>
</li>
<li>持久层框架：完成数据库操作的框架<ul>
<li>apache DBUtils</li>
<li>Hibernate</li>
<li>SpringJPA</li>
<li><strong>MyBatis</strong></li>
</ul>
</li>
<li>胶水框架：<strong>Spring</strong></li>
</ul>
<h2 id="1-3-MyBatis介绍"><a href="#1-3-MyBatis介绍" class="headerlink" title="1.3 MyBatis介绍"></a>1.3 MyBatis介绍</h2><blockquote>
<p>MyBatis是一个<strong>半自动</strong>的<strong>ORM</strong>框架</p>
<p>ORM（Object Relational Mapping）对象关系映射，将java中的一个对象与数据表中一行记录一一对应</p>
<p>ORM框架提供了实体类与数据表的映射关系，通过映射文件的配置，实现对象的持久化</p>
</blockquote>
<ul>
<li>MyBatis特点：<ul>
<li>支持自定义sql，存储过程</li>
<li>对原有的JDBC进行了封装，几乎消除了所有JDBC代码，让开发者只需要关注sql本身</li>
<li>支持XML和注解配置方式自定完成ORM操作，实现结果映射</li>
</ul>
</li>
</ul>
<h1 id="二、MyBatis框架部署"><a href="#二、MyBatis框架部署" class="headerlink" title="二、MyBatis框架部署"></a>二、MyBatis框架部署</h1><hr>
<blockquote>
<p>框架部署就是将框架引入到我们的项目中</p>
</blockquote>
<h2 id="2-1-创建maven项目"><a href="#2-1-创建maven项目" class="headerlink" title="2.1 创建maven项目"></a>2.1 创建maven项目</h2><ul>
<li>Java工程</li>
<li>Web工程</li>
</ul>
<h2 id="2-2-添加依赖"><a href="#2-2-添加依赖" class="headerlink" title="2.2 添加依赖"></a>2.2 添加依赖</h2><ul>
<li><p>在pom.xml中添加依赖</p>
<ul>
<li><p>mybatis</p>
</li>
<li><p>mysql driver</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-3-创建mybatis配置文件"><a href="#2-3-创建mybatis配置文件" class="headerlink" title="2.3 创建mybatis配置文件"></a>2.3 创建mybatis配置文件</h2><h3 id="2-3-1-创建模版"><a href="#2-3-1-创建模版" class="headerlink" title="2.3.1 创建模版"></a>2.3.1 创建模版</h3><ul>
<li>preferences — Editor — File and code templates</li>
<li>点击+号，开始创建新模版</li>
<li>在创建页面内输入以下内容<ul>
<li>文件名name</li>
<li>文件后缀extension</li>
<li>在text区域输入文件头</li>
<li>勾选enable live templates</li>
</ul>
</li>
<li>最后点击apply</li>
</ul>
<h3 id="2-3-2-创建文件"><a href="#2-3-2-创建文件" class="headerlink" title="2.3.2 创建文件"></a>2.3.2 创建文件</h3><ul>
<li>在resoures中用模版创建名为mybatis-config.xml的文件 </li>
<li>用模版创建文件时就不用给后缀了，直接给名字就好</li>
</ul>
<h3 id="2-3-3-配置数据库信息"><a href="#2-3-3-配置数据库信息" class="headerlink" title="2.3.3 配置数据库信息"></a>2.3.3 配置数据库信息</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    在environments配置数据库连接信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    在environments标签中可以定义多个environment标签，每个environment标签可以定义一套连接配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    default属性用来指定使用哪个environment标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            transactionManager标签用于配置数据库管理方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            dataSource用来配置数据库连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;YES&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h1 id="三、MyBatis框架使用"><a href="#三、MyBatis框架使用" class="headerlink" title="三、MyBatis框架使用"></a>三、MyBatis框架使用</h1><hr>
<blockquote>
<p>案例：学生信息的数据库操作</p>
</blockquote>
<h2 id="3-1-创建数据表"><a href="#3-1-创建数据表" class="headerlink" title="3.1 创建数据表"></a>3.1 创建数据表</h2><p>db_mybatis下的i——tb_students表</p>
<h2 id="3-2-创建实体类"><a href="#3-2-创建实体类" class="headerlink" title="3.2 创建实体类"></a>3.2 创建实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stuId;</span><br><span class="line">    <span class="keyword">private</span> String stuNum;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> String stuGender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stuAge;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-3-创建DAO接口"><a href="#3-3-创建DAO接口" class="headerlink" title="3.3 创建DAO接口"></a>3.3 创建DAO接口</h2><ul>
<li>在接口内定义此实体类的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDAO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteStudent</span><span class="params">(String stuNum)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-4-创建DAO映射文件"><a href="#3-4-创建DAO映射文件" class="headerlink" title="3.4 创建DAO映射文件"></a>3.4 创建DAO映射文件</h2><ul>
<li><p>在resources目录下创建名为mappers的文件夹</p>
</li>
<li><p>在文件夹内用模版创建名为StudentMapper.xml的映射文件</p>
<ul>
<li>在此文件的namespace写接口的路径</li>
</ul>
</li>
<li><p>在映射文件中对DAO中的方法进行实现</p>
<ul>
<li>mapper中的id属性要和方法名一致</li>
<li>parameterMap指定参数的类型，由于在此文件开头namespace指定过，所以可以省略</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mapper文件相当于DAO接口的实现类，namespace属性要指定实现DAO接口的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.WL.dao.StudentDAO&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterMap</span>=<span class="string">&quot;com.WL.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-5-将映射文件添加到主配置文件"><a href="#3-5-将映射文件添加到主配置文件" class="headerlink" title="3.5 将映射文件添加到主配置文件"></a>3.5 将映射文件添加到主配置文件</h2><p>在mybatis-config.xml文件中利用mapper标签</p>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-05-23 19.58.02.png" alt="截屏2022-05-23 19.58.02" style="zoom:50%;" />







<h1 id="四、单元测试"><a href="#四、单元测试" class="headerlink" title="四、单元测试"></a>四、单元测试</h1><h2 id="4-1-添加依赖"><a href="#4-1-添加依赖" class="headerlink" title="4.1 添加依赖"></a>4.1 添加依赖</h2><p>在pom中添加JUnit依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-2-创建单元测试类"><a href="#4-2-创建单元测试类" class="headerlink" title="4.2 创建单元测试类"></a>4.2 创建单元测试类</h2><p>在被测试类名后ctl + enter选择Test</p>
<p>![截屏2022-05-23 21.30.53](&#x2F;Users&#x2F;lei&#x2F;Desktop&#x2F;Typora笔记&#x2F;图片&#x2F;截屏2022-05-23 21.30.53.png)</p>
<p>选择JUnit4，并且选中想要测试的方法</p>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-05-23 21.32.34.png" alt="截屏2022-05-23 21.32.34" style="zoom:50%;" />





<h2 id="4-3-测试代码"><a href="#4-3-测试代码" class="headerlink" title="4.3 测试代码"></a>4.3 测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDAOTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载mybatis配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="comment">//会话工厂</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">            <span class="comment">//SqlSession代表与数据库的连接，也代表数据库操作的对象</span></span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="comment">//测试里面的方法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;10001&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">21</span>));</span><br><span class="line">            <span class="comment">//需要手动提交</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="五、MyBatis的CRUD操作"><a href="#五、MyBatis的CRUD操作" class="headerlink" title="五、MyBatis的CRUD操作"></a>五、MyBatis的CRUD操作</h1><hr>
<blockquote>
<p>案例：学生信息增删改查</p>
</blockquote>
<h2 id="5-1-添加操作"><a href="#5-1-添加操作" class="headerlink" title="5.1 添加操作"></a>5.1 添加操作</h2><p>见4.3 </p>
<h2 id="5-2-删除操作"><a href="#5-2-删除操作" class="headerlink" title="5.2 删除操作"></a>5.2 删除操作</h2><ul>
<li><p>在StudentDAO种定义删除方法：根据学号删除学生信息</p>
</li>
<li><p>在StudentMapper中定义删除方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span>&gt;</span></span><br><span class="line">        delete from tb_students where stu_num = #&#123;stuNum&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在StudentDAO的测试类中添加测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.deleteStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-3-修改操作"><a href="#5-3-修改操作" class="headerlink" title="5.3 修改操作"></a>5.3 修改操作</h2><blockquote>
<p>根据学号修改其他字段信息</p>
<p>断言来测试结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.updateStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;10001&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">21</span>));</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            assertEquals(<span class="number">1</span>, i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="5-4-查询–所有数据"><a href="#5-4-查询–所有数据" class="headerlink" title="5.4 查询–所有数据"></a>5.4 查询–所有数据</h2><p><strong>方案一：</strong></p>
<ul>
<li><p>XML配置：<br><strong>这里查询语句要取别名与实体类字段名一致</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    resultType指定查询结果封装的实体类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    resultSets指定当前操作返回的集合类型（可省略）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.WL.pojo.Student&quot;</span> <span class="attr">resultSets</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">        select sid as stuId, stu_num as stuNum, stu_name as stuName, stu_gender as stuGender, stu_age as stuAge from tb_students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listStudents</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">           <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">           <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">           <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">           <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">           List&lt;Student&gt; students = studentDAO.listStudents();</span><br><span class="line">           sqlSession.commit();</span><br><span class="line">           <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">               System.out.println(student);</span><br><span class="line">           &#125;</span><br><span class="line">  </span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>方案二：</strong></p>
<ul>
<li><p>xml配置<br>采用这种方式就不需要取别名了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    resultMap标签用于定义实体类和数据表的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.WL.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_num&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuNum&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuGender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuAge&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    resultMap属性用于引用一个实体的映射关系，当配置了resultMap之后，resultType可以省略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">        select sid, stu_num, stu_name, stu_gender, stu_age from tb_students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-5-查询–单条记录"><a href="#5-5-查询–单条记录" class="headerlink" title="5.5 查询–单条记录"></a>5.5 查询–单条记录</h2><blockquote>
<p>根据学号查询一个学生信息</p>
</blockquote>
<ul>
<li><p>在DAO内创建方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Student <span class="title function_">queryStudent</span><span class="params">(String stuNum)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在映射文件内配置StudentDAO接口的方法实现–sql<br>studentMap复用上一个案例写过的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">        select sid, stu_num, stu_name, stu_gender, stu_age from tb_students</span><br><span class="line">        where stu_num = #&#123;stuNum&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> studentDAO.queryStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">            System.out.println(student1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="5-6-查询–总记录数"><a href="#5-6-查询–总记录数" class="headerlink" title="5.6 查询–总记录数"></a>5.6 查询–总记录数</h2><ul>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">       select count(1) from tb_students</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> studentDAO.getCount();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-7-查询–多参数查询"><a href="#5-7-查询–多参数查询" class="headerlink" title="5.7 查询–多参数查询"></a>5.7 查询–多参数查询</h2><blockquote>
<p>分页查询</p>
<ul>
<li>参数start，pageSize</li>
</ul>
</blockquote>
<p>在MyBatis进行操作</p>
<ol>
<li>如果操作方法只有一个简单类型或字符串类型参数，在mapper配置中可以通过#{key}获取</li>
<li>如果操作方法有一个对象类型的参数，在mapper配置中可以直接通过#{attrName}获取对象的指定属性值<br>（attrName必须是对象字段名）</li>
<li>如果操作的参数有多个：<ul>
<li>可以考虑使用Hashmap传参数，在mapper配置中可以直接通过#{key}获取key对应的value</li>
<li>如果一定要以多个参数的形式传递，可以考虑给参数编号<ul>
<li>如果用arg编号，下标从0开始：arg0, arg1…</li>
<li>如果用param编号，下标从1开始： param1, param2…</li>
</ul>
</li>
<li><strong>用的最多的方式还是加注解取别名:@Param(“name”), 然后在map中用#{name}的方式获取别名</strong></li>
</ul>
</li>
</ol>
<p><strong>以param编号</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudentsByPage2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">        select sid, stu_num, stu_name, stu_gender, stu_age from tb_students</span><br><span class="line">        limit #&#123;param1&#125;, #&#123;param2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>以arg编号</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudentsByPage2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">        select sid, stu_num, stu_name, stu_gender, stu_age from tb_students</span><br><span class="line">        limit #&#123;arg0&#125;, #&#123;arg1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>加注解取别名</strong></p>
<ul>
<li>DAO接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">listStudentsByPage3</span><span class="params">(<span class="meta">@Param(&quot;start&quot;)</span> <span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                                             <span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudentsByPage3&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">        select sid, stu_num, stu_name, stu_gender, stu_age from tb_students</span><br><span class="line">        limit #&#123;start&#125;, #&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="5-8-添加操作回填主键"><a href="#5-8-添加操作回填主键" class="headerlink" title="5.8 添加操作回填主键"></a>5.8 添加操作回填主键</h2><ul>
<li><p>xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    useGenerateKeys：设置添加操作是否需要回填生成的主键--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    keyProperty：设置回填的主键赋值到参数对象的哪个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.WL.pojo.Student&quot;</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;stuId&quot;</span>&gt;</span></span><br><span class="line">        insert into tb_students(stu_num, stu_name, stu_gender, stu_age)</span><br><span class="line">        values(#&#123;stuNum&#125;, #&#123;stuName&#125;, #&#123;stuGender&#125;, #&#123;stuAge&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="六、MyBatis工具类封装"><a href="#六、MyBatis工具类封装" class="headerlink" title="六、MyBatis工具类封装"></a>六、MyBatis工具类封装</h1><hr>
<p>MybatisUtils：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            factory = builder.build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="comment">//如果是第一次调用线程池里没有的话那就单独创建并放回线程池</span></span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = factory.openSession();</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果事务需要提交，那么必须要有SqlSession，如果不需要事务提交，就直接获得Mapper即可</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt;T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; C)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h1 id="七、事务管理"><a href="#七、事务管理" class="headerlink" title="七、事务管理"></a>七、事务管理</h1><hr>
<blockquote>
<p>SqlSession对象</p>
<ul>
<li>getMapper(DAO.class):获取mapper（DAO接口的实例）</li>
<li>事务管理</li>
</ul>
</blockquote>
<h2 id="7-1-手动事务管理"><a href="#7-1-手动事务管理" class="headerlink" title="7.1 手动事务管理"></a>7.1 手动事务管理</h2><ul>
<li>sqlSession.commit() : 事务提交</li>
<li>sqlSession.rollback() ：事务回滚</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertStudent</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1 当我们获取SqlSession对象时默认开启了事务</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> sqlSession.getMapper(StudentDAO.class);</span><br><span class="line">            <span class="comment">//测试里面的方法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.insertStudent(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;10001&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">21</span>));</span><br><span class="line">            <span class="comment">//2 需要手动提交</span></span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//3 当操作出现异常时调用rollback进行回滚</span></span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-2-自动提交事务"><a href="#7-2-自动提交事务" class="headerlink" title="7.2 自动提交事务"></a>7.2 自动提交事务</h2><blockquote>
<p>通过SqlSessionFactory调用SqlSession对象时，可以通过参数isAutoCommit设置事务是否自动提交<br>如果参数设置为true，表示自动提交事务<br>如果参数设置为false，或者不设置参数，表示手动提交</p>
<p>且一般来说如火想要手动提交，意味着这个事务由很多操作组成</p>
</blockquote>
<p>修改MybatisUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动事务管理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//此方法将不再暴露</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">(<span class="type">boolean</span> isAutoCommit)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="comment">//如果是第一次调用线程池里没有的话那就单独创建并放回线程池</span></span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//openSession（）的参数是isAutoCommit，默认是false，如果是true意味着开启自动提交</span></span><br><span class="line">            sqlSession = factory.openSession(isAutoCommit);</span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果事务需要提交，那么必须要有SqlSession，如果不需要事务提交，就直接获得Mapper即可</span></span><br><span class="line">    <span class="comment">//自动事务管理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt;T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; C)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StudentDAO</span> <span class="variable">studentDAO</span> <span class="operator">=</span> MyBatisUtil.getMapper(StudentDAO.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> studentDAO.deleteStudent(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>









<h1 id="八、Mybatis主配置文件"><a href="#八、Mybatis主配置文件" class="headerlink" title="八、Mybatis主配置文件"></a>八、Mybatis主配置文件</h1><hr>
<blockquote>
<p>mybatis-config.xml 是MtBatis框架的主配置文件，主要用于配置MyBatis数据源及属性信息</p>
</blockquote>
<p>主要属性：</p>
<ul>
<li>properties</li>
<li>settings</li>
<li>typeAliases</li>
<li>typeHandlers</li>
<li>objectFactory</li>
<li>plugins</li>
<li>encironments<ul>
<li>environment<ul>
<li>transactionManager</li>
<li>dataSource</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider</li>
<li>mappers</li>
</ul>
<h2 id="8-1-properties标签"><a href="#8-1-properties标签" class="headerlink" title="8.1 properties标签"></a>8.1 properties标签</h2><blockquote>
<p>用于设置键值对，或者加载属性文件</p>
</blockquote>
<ul>
<li><p>在resources目录下创建jdbc.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mysql_driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">mysql_url</span> = <span class="string">jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">mysql_username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">mysql_password</span> = <span class="string">YES</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在mybatis-config.xml文件中用propertis标签引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    properties标签：<span class="number">1</span> 自定义键值对 <span class="number">2</span> 引用属性文件--&gt;</span><br><span class="line">    &lt;properties resource=<span class="string">&quot;jdbc.properties&quot;</span> &gt;&lt;/properties&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mybatis-config.xml中的datasource中引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_url&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_username&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;mysql_password&#125;&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-2-settings标签"><a href="#8-2-settings标签" class="headerlink" title="8.2 settings标签"></a>8.2 settings标签</h2><h1 id="x3D-x3D-一：Spring概述-x3D-x3D"><a href="#x3D-x3D-一：Spring概述-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;一：Spring概述&#x3D;&#x3D;"></a>&#x3D;&#x3D;一：Spring概述&#x3D;&#x3D;</h1><hr>
<h2 id="1-1-web项目开发中的耦合度问题"><a href="#1-1-web项目开发中的耦合度问题" class="headerlink" title="1.1 web项目开发中的耦合度问题"></a>1.1 web项目开发中的耦合度问题</h2><ul>
<li>在Servlet中需要调用Service方法，则需要在Servlet类中通过new关键字创建Service的实例</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> List&lt;Product&gt; listProducts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl1</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询热销商品</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl2</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listProducts</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询最新商品</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">  <span class="comment">//在Servlet中使用new关键字创建ProductServiceImpl对象，增加了Servlet和Service的耦合度</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">ProductService</span> <span class="variable">productService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductServiceImpl1</span>();<span class="comment">//在一个类中使用了其他类，即侵入性</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span>&#123;</span><br><span class="line">    doPost(request,response);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span>&#123;</span><br><span class="line">    productService.listProducts();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在Service实现类中需要调用DAO中的方法，也需要在service中通过new关键字来创建DAO实现类对象</li>
<li>如果使用new关键字创建对象：</li>
<li>失去了面向接口编程的灵活性</li>
<li>代码的侵入性增强（增加了耦合度），降低了代码的灵活性</li>
</ul>
<h2 id="1-2-面向接口编程"><a href="#1-2-面向接口编程" class="headerlink" title="1.2 面向接口编程"></a>1.2 面向接口编程</h2><table>
<thead>
<tr>
<th>面向接口编程</th>
</tr>
</thead>
<tbody><tr>
<td>![Screen Shot 2022-03-22 at 17.05.20](&#x2F;Users&#x2F;lei&#x2F;Desktop&#x2F;Screen Shot 2022-03-22 at 17.05.20.png)</td>
</tr>
</tbody></table>
<ul>
<li>解决方案：在Servlet中定义Service接口的对象，不使用new关键字创建实现类对象，在Servlet实例化的时候，通过反射动态的给Service接口的对象变量赋值。 </li>
<li>如何实现：Spring可以做到</li>
</ul>
<h2 id="1-3-Spring介绍"><a href="#1-3-Spring介绍" class="headerlink" title="1.3 Spring介绍"></a>1.3 Spring介绍</h2><blockquote>
<p>Spring是一个&#x3D;&#x3D;轻量级的控制反转和面向切面的容器&#x3D;&#x3D;框架，用来解决企业项目开发的复杂度问题，也就是用来解耦的</p>
</blockquote>
<ul>
<li><p>轻量级：体积小，对代码没侵入性。</p>
</li>
<li><p>控制反转：IoC（Inverse of Control）：</p>
<p>​	把创建对象的工作交给Spring完成，Spring在创建对象的时候同时可以完成对象属性赋值（DI：依赖注入）。</p>
</li>
<li><p>面向切面：AOP（Aspect Oriented Programming）</p>
<p>​	面向切面编程：可以在不改变原有业务逻辑的情况下，实现对业务的增强。</p>
</li>
<li><p>容器：实例的容器，管理创建的对象。</p>
</li>
</ul>
<h2 id="1-4-Spring架构"><a href="#1-4-Spring架构" class="headerlink" title="1.4 Spring架构"></a>1.4 Spring架构</h2><ul>
<li>Spring架构图</li>
</ul>
<img src="/Users/lei/Desktop/Screen Shot 2022-03-22 at 18.35.00.png" alt="Screen Shot 2022-03-22 at 18.35.00" style="zoom:50%;" />

<h3 id="1-4-1-CoreContainer"><a href="#1-4-1-CoreContainer" class="headerlink" title="1.4.1 CoreContainer"></a>1.4.1 CoreContainer</h3><blockquote>
<p>Spring的容器组件，用于完成实例的创建和管理</p>
<ul>
<li>core  核心组件</li>
<li>beans  容器管理</li>
<li>context  容器上下文</li>
</ul>
</blockquote>
<h3 id="1-4-2-AOP，Aspects"><a href="#1-4-2-AOP，Aspects" class="headerlink" title="1.4.2 AOP，Aspects"></a>1.4.2 AOP，Aspects</h3><blockquote>
<p>Spring AOP组件，实现面向切面编程</p>
<ul>
<li>aop</li>
<li>aspect</li>
</ul>
</blockquote>
<h3 id="1-4-3-web"><a href="#1-4-3-web" class="headerlink" title="1.4.3 web"></a>1.4.3 web</h3><blockquote>
<p>Spring Web 组件实际指的是SpringMVC框架，实现web项目的MVC控制</p>
<ul>
<li>web (Spring对web项目的支持)</li>
<li>webmvc (SpringMVC组件)</li>
</ul>
</blockquote>
<h3 id="1-4-4-Data-Access"><a href="#1-4-4-Data-Access" class="headerlink" title="1.4.4 Data Access"></a>1.4.4 Data Access</h3><blockquote>
<p>Spring数据访问组件，也是一个基于JDBC封装的持久层框架（即使没有mybatis，spring也可以完成持久化操作）</p>
<ul>
<li>但由于mtbatis十分灵活，所以一般只使用spring的事务管理组件</li>
</ul>
</blockquote>
<h3 id="1-4-5-Test"><a href="#1-4-5-Test" class="headerlink" title="1.4.5 Test"></a>1.4.5 Test</h3><blockquote>
<p>Spring的单元测试组件，提供了Spring环境下的单元测试支持</p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="二：Spring-IoC-基于XML"><a href="#二：Spring-IoC-基于XML" class="headerlink" title="二：Spring IoC - 基于XML"></a>二：Spring IoC - 基于XML</h1><hr>
<blockquote>
<p>Spring IoC容器组件，可以完成对象的创建，对象属性赋值，对象管理</p>
</blockquote>
<h2 id="2-1-Spring框架部署（IoC）"><a href="#2-1-Spring框架部署（IoC）" class="headerlink" title="2.1 Spring框架部署（IoC）"></a>2.1 Spring框架部署（IoC）</h2><h3 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h3><h3 id="2-1-2-添加SpringIoC依赖"><a href="#2-1-2-添加SpringIoC依赖" class="headerlink" title="2.1.2 添加SpringIoC依赖"></a>2.1.2 添加SpringIoC依赖</h3><ul>
<li><p>core</p>
</li>
<li><p>beans</p>
</li>
<li><p>aop</p>
</li>
<li><p>expression</p>
</li>
<li><p>&#x3D;&#x3D;context&#x3D;&#x3D;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>spring需要导入以上几个jar包，但是spring的jar包具有传递性，导入context剩下的都可以自动导入</strong></p>
<h3 id="2-1-3-创建Spring配置文件"><a href="#2-1-3-创建Spring配置文件" class="headerlink" title="2.1.3 创建Spring配置文件"></a>2.1.3 创建Spring配置文件</h3><blockquote>
<p>通过配置文件“告诉”Spring容器创建什么对象，给对象属性赋什么值 </p>
</blockquote>
<ul>
<li><p>在resources目录下创建名为 &#x3D;&#x3D;applicationContext.xml&#x3D;&#x3D; (文件名可以自定义，大多数都用这个 ),以下是基础版模版：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对于一个xml文件，如果作为框架的配置文件，需要遵守框架的配置规则，通常一个框架为了让开发者能正确的配置，</span></span><br><span class="line"><span class="comment">都会提供xml的规范文件：(dtd/xsd)--&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-2-Spring-IoC的使用"><a href="#2-2-Spring-IoC的使用" class="headerlink" title="2.2 Spring IoC的使用"></a>2.2 Spring IoC的使用</h2><blockquote>
<p>使用Spring IoC创建并管理对象</p>
</blockquote>
<h3 id="2-2-1-创建一个实体类"><a href="#2-2-1-创建一个实体类" class="headerlink" title="2.2.1 创建一个实体类"></a>2.2.1 创建一个实体类</h3><ul>
<li><p>Main –&gt; Java –&gt; new package :com.WL.IoC</p>
</li>
<li><p>在该包下创建bean包，并创建实体类：Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String stuNum;</span><br><span class="line">        <span class="keyword">private</span> String stuName;</span><br><span class="line">        <span class="keyword">private</span> String stuGender;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> stuAge;</span><br><span class="line">        <span class="keyword">private</span> Date entranceTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：由于是在实验SpringIoC的功能，所以就没有引入lombock了，所以为了操作方便，右键generate，要选择get和set方法</p>
<p>​       并且选择toString()</p>
</li>
</ul>
<h3 id="2-2-2-在Spring配置文件中配置实体类"><a href="#2-2-2-在Spring配置文件中配置实体类" class="headerlink" title="2.2.2 在Spring配置文件中配置实体类"></a>2.2.2 在Spring配置文件中配置实体类</h3><ul>
<li>ApplicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  通过bean标签把实体类配置给Spring进行管理，id表示实体类的唯一标示  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  这里的id任意，一般是类的小写  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Lucy&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entranceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-初始化Spring对象工厂，获取对象"><a href="#2-2-3-初始化Spring对象工厂，获取对象" class="headerlink" title="2.2.3 初始化Spring对象工厂，获取对象"></a>2.2.3 初始化Spring对象工厂，获取对象</h3><ul>
<li><p>ClassPathApplicationContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过Spring容器创建Student对象</span></span><br><span class="line">        <span class="comment">//初始化Spring容器</span></span><br><span class="line">        <span class="comment">//Spring容器进行初始化的时候，就会加载并解析这个配置文件(dom4j):把配置文件中的内容读取出来存放到java对象中</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">                      <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过Spring容器获取Student对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span>(Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-3-IoC-和-DI"><a href="#2-3-IoC-和-DI" class="headerlink" title="2.3 IoC 和 DI"></a>2.3 IoC 和 DI</h2><ul>
<li>IoC（Inverse of Control）控制反转，通过Spring对象工厂完成对象的创建</li>
<li>DI （Dependency Injection）依赖注入，在Spring完成对象创建的同时依赖Spring容器完成对象属性的赋值</li>
</ul>
<h3 id="2-3-1-IoC"><a href="#2-3-1-IoC" class="headerlink" title="2.3.1 IoC"></a>2.3.1 IoC</h3><blockquote>
<p>当我们通过Spring对象工厂创建某个类的对象时，需要将这个类交给Spring管理—bean标签配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-2-DI"><a href="#2-3-2-DI" class="headerlink" title="2.3.2 DI"></a>2.3.2 DI</h3><blockquote>
<p>通过Spring容器给创建的对象属性赋值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Lucy&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entranceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="2-4依赖注入"><a href="#2-4依赖注入" class="headerlink" title="2.4依赖注入"></a>2.4依赖注入</h2><h3 id="2-4-1-依赖注入三种方式"><a href="#2-4-1-依赖注入三种方式" class="headerlink" title="2.4.1 依赖注入三种方式"></a>2.4.1 依赖注入三种方式</h3><blockquote>
<p>Spring加载配置文件后，通过反射创建类的对象，并给属性赋值</p>
<p>Spring容器通过反射实现属性注入有三种方式</p>
<ul>
<li>set方法注入</li>
<li>构造器注入</li>
<li>接口注入（不常用）</li>
</ul>
</blockquote>
<p>依赖注入的IoC底层代码模拟：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(path);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">        Field[] field = c.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field f:field) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">setMethodName</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span>+fieldName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+fieldName.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;stuNum&quot;</span>.equals(fieldName))&#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setMethod</span> <span class="operator">=</span> c.getDeclaredMethod(setMethodName,f.getType());</span><br><span class="line">                setMethod.invoke(o,<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(o);</span><br></pre></td></tr></table></figure>



<h3 id="2-4-2-set方法注入"><a href="#2-4-2-set方法注入" class="headerlink" title="2.4.2 set方法注入"></a>2.4.2 set方法注入</h3><blockquote>
<p>在bean标签中通过配置property标签给属性赋值，实际上就是通过反射调用set方法完成属性的注入</p>
</blockquote>
<p><strong>简单类型及字符串类型</strong></p>
<ul>
<li>直接通过property的value属性赋值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10002&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuGender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Lucy&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuAge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuWeight&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50.1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>日期类型</strong></p>
<ul>
<li>方式一：在property标签中通过ref引用Spring容器中的一个对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entranceTime&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式二：在property标签中添加子标签bean来指定对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entranceTime&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>自定义类</strong></p>
<ul>
<li>方式一：单property标签法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cla&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2022&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cla&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式二：双property标签法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2022&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>集合类型</strong></p>
<ul>
<li><p>List</p>
<ul>
<li>List<String>或里面是简单类型的封装类,可直接赋值，也可用list标签但没必要</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lists&quot;</span> <span class="attr">value</span>=<span class="string">&quot;list1,list2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>看书<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>List<Object> list里面是对象类型</li>
</ul>
<p>  方法一</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lists&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Book&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>		</span><br></pre></td></tr></table></figure>

<p>​       方法二</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Set</p>
<blockquote>
<p>和List用法相同，不同的是property子标签是Set</p>
</blockquote>
</li>
<li><p>Map</p>
<ul>
<li>由于key可以是任何类型，所以key的值可以由bean给也可以由value给</li>
<li>value果也是一个封装类，那也可以由bean给</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">value</span>&gt;</span>k1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>k2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>Properties</p>
<blockquote>
<p>Property是继承的哈希表理应和map一样，但由于其key和value都是String的特性</p>
<p>特地为它创建了prop的标签，即map中更便捷的形式</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-4-3-构造器注入"><a href="#2-4-3-构造器注入" class="headerlink" title="2.4.3 构造器注入"></a>2.4.3 构造器注入</h3><blockquote>
<p>使用被Spring管理的类的构造器完成属性的赋值</p>
</blockquote>
<p><strong>简单类型，字符串，以及对象类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String stuNum;</span><br><span class="line">   <span class="keyword">private</span> String stuName;</span><br><span class="line">   <span class="keyword">private</span> String stuGender;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> stuAge;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> stuWeight;</span><br><span class="line">   <span class="keyword">private</span> Date entranceTime;</span><br><span class="line">   <span class="keyword">private</span> Clazz clazz;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String stuNum, String stuName, String stuGender, <span class="type">int</span> stuAge, <span class="type">double</span> stuWeight, Date entranceTime, Clazz clazz)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.stuNum = stuNum;</span><br><span class="line">       <span class="built_in">this</span>.stuName = stuName;</span><br><span class="line">       <span class="built_in">this</span>.stuGender = stuGender;</span><br><span class="line">       <span class="built_in">this</span>.stuAge = stuAge;</span><br><span class="line">       <span class="built_in">this</span>.stuWeight = stuWeight;</span><br><span class="line">       <span class="built_in">this</span>.entranceTime = entranceTime;</span><br><span class="line">       <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;10001&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Lily&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60.1&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;5&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>集合类型属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String &gt; sets;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(List&lt;String&gt; lists, Set&lt;String&gt; sets, Map&lt;String, Object&gt; maps, Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>11<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>22<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>k1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>k2<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>v1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>v2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-5-Bean的作用域"><a href="#2-5-Bean的作用域" class="headerlink" title="2.5 Bean的作用域"></a>2.5 Bean的作用域</h2><blockquote>
<p>在bean标签中可以通过scope属性指定对象的作用域</p>
<ul>
<li>scope &#x3D; “singleton” 表示当前bean是单例模式（bean标签默认是单例模式）<ul>
<li>默认饿汉模式：Spring容器初始化阶段就会完成此对象创建，可在bean标签中用lazy-init&#x3D;”true”来指定为懒汉模式</li>
</ul>
</li>
<li>Scope &#x3D; “prototype” 表示此bean为多例模式，每次通过Spring容器获取此类对象时都会创建一个新的对象<ul>
<li>此模式下没有懒汉饿汉模式，没有意义，都是用的时候创建</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><p>单例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Book&quot;</span>  <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-6-Bean的生命周期方法"><a href="#2-6-Bean的生命周期方法" class="headerlink" title="2.6 Bean的生命周期方法"></a>2.6 Bean的生命周期方法</h2><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在bean标签中通过init-method指定当前bean的初始化方法，初始化方法在构造器执行后执行</span><br><span class="line">在bean标签中通过destory-method指定当前bean的销毁方法，销毁方法在对象销毁之前执行 </span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>bean类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//初始化方法：在创建当前类的对象时调用的方法，进行资源准备工作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------init&quot;</span>);</span><br><span class="line">        <span class="comment">//this.bookId = 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//销毁方法：Spring容器销毁对象时调用此方法，进行资源回收的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这句话打印了就说明调用了构造器创建了类&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Book&quot;</span>  <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>  <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-7-自动装配"><a href="#2-7-自动装配" class="headerlink" title="2.7 自动装配"></a>2.7 自动装配</h2><blockquote>
<p>自动装配：Spring在实例化当前bean的时候，从Spring容器中找到匹配的实例赋值给当前bean的属性</p>
<p>自动装配的策略有两种</p>
<ul>
<li>byName :根据当前bean的属性名在Spring容器中寻找匹配的对象，若根据name找到bean，但类型不匹配，会抛出异常</li>
<li>byType :根据当前bean的属性类型在Spring容器中寻找匹配的对象，如果根据类型找到了多个bean也会抛出异常</li>
</ul>
</blockquote>
<ul>
<li><p>byName</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>byType</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz11111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Clazz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.IoC.beans.bean.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-8-SpringIoC-工作原理"><a href="#2-8-SpringIoC-工作原理" class="headerlink" title="2.8 SpringIoC 工作原理"></a>2.8 SpringIoC 工作原理</h2><img src="/Users/lei/Desktop/Screen Shot 2022-03-24 at 11.39.30.png" alt="Screen Shot 2022-03-24 at 11.39.30" style="zoom:50%;" />





<h1 id="三：-SpringIoC-基于注解"><a href="#三：-SpringIoC-基于注解" class="headerlink" title="三： SpringIoC - 基于注解"></a>三： SpringIoC - 基于注解</h1><hr>
<blockquote>
<p>SpringIoC的使用，需要我们通过XML将类声明给Spring容器进行管理从而通过Spring工厂完成对象创建及属性值的注入</p>
<p>Spring除了提供基于XML的配置方式，同时提供了基于注解的配置方式：直接在实体类中添加注解声明给Spring容器管理<br>以简化开发步骤</p>
</blockquote>
<h2 id="3-1-Spring框架部署"><a href="#3-1-Spring框架部署" class="headerlink" title="3.1 Spring框架部署"></a>3.1 Spring框架部署</h2><h3 id="3-1-1-创建maven项目"><a href="#3-1-1-创建maven项目" class="headerlink" title="3.1.1 创建maven项目"></a>3.1.1 创建maven项目</h3><p>同上</p>
<h3 id="3-1-2-添加SpringIoC依赖"><a href="#3-1-2-添加SpringIoC依赖" class="headerlink" title="3.1.2 添加SpringIoC依赖"></a>3.1.2 添加SpringIoC依赖</h3><p>在基础配置上添加context链接，如3.1.3配置所示</p>
<h3 id="3-1-3创建Spring配置文件"><a href="#3-1-3创建Spring配置文件" class="headerlink" title="3.1.3创建Spring配置文件"></a>3.1.3创建Spring配置文件</h3><ul>
<li><p>因为Spring容器初始化时，只会加载applicationContext.xml文件，那么我们在实体类中添加的注解不会被Spring扫描到<br>所以我们需要在&#x3D;&#x3D;applicationContext.xml文件中声明Spring的扫描范围&#x3D;&#x3D;，以达到Spring初始化时扫描带有注解的实体类，<br>并完成初始化工作</p>
</li>
<li><p><strong>基于注解配置的框架部署的xml文件基础配置如下</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明使用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明Spring工厂注解的扫描范围--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.WL.beans&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-2-常用注解"><a href="#3-2-常用注解" class="headerlink" title="3.2 常用注解"></a>3.2 常用注解</h2><h3 id="3-2-1-Component"><a href="#3-2-1-Component" class="headerlink" title="3.2.1 @Component"></a>3.2.1 @Component</h3><ul>
<li>类注解，声明此类被Spring容器管理，相当于bean标签作用</li>
<li>&#x3D;&#x3D;Component(value&#x3D;”stu”)&#x3D;&#x3D;<ul>
<li>value指定当前bean的id，相当于bean标签id属性</li>
<li>value关键字可省略，省略的话默认当前类id为类名首字母改小写</li>
</ul>
</li>
<li>除了@Component外，@Service、@Controller、@Repository 这三个注解也可以将类声明给Spring管理<br>他们主要是语义上的区别<ul>
<li>@Controller 注解主要声明将控制器类配置给Spring管理，例如Servlet</li>
<li>@Service 注解主要说明业务处理类配置给Spring管理，例如Service接口的实现类</li>
<li>@Repository 注解主要声明持久化类配置给Spring管理，例如DAO接口</li>
<li>@Component 除了控制器，Service和DAO之外的类，一律用此注解</li>
</ul>
</li>
</ul>
<h3 id="3-2-2-Scope"><a href="#3-2-2-Scope" class="headerlink" title="3.2.2 @Scope"></a>3.2.2 @Scope</h3><ul>
<li>类注解，用于声明当前类时单例模式还是非单例模式，相当于bean标签的scope属性</li>
<li>@Scope(value &#x3D; “prototype”) 或者 @Scope(“prototype”)<br>表示声明当前类为非单例模式（默认为单例模式）</li>
</ul>
<h3 id="3-2-3-Lazy"><a href="#3-2-3-Lazy" class="headerlink" title="3.2.3 @Lazy"></a>3.2.3 @Lazy</h3><ul>
<li>类注解，用于声明一个单例模式的bean是否为懒汉模式</li>
<li>&#x3D;&#x3D;@Lazy(true)&#x3D;&#x3D; 表示声明为懒汉模式（默认为饿汉模式）</li>
</ul>
<h3 id="3-2-4-PostConstruct"><a href="#3-2-4-PostConstruct" class="headerlink" title="3.2.4 @PostConstruct"></a>3.2.4 @PostConstruct</h3><ul>
<li>方法注解，声明一个方法为当前类的初始化方法（在构造器之后）</li>
<li>相当于bean标签的init-method属性</li>
</ul>
<h3 id="3-2-5-PreDestroy"><a href="#3-2-5-PreDestroy" class="headerlink" title="3.2.5 @PreDestroy"></a>3.2.5 @PreDestroy</h3><ul>
<li>方法注解，声明一个方法为当前类的销毁方法（在对象从容器中释放之前执行）</li>
<li>相当于bean标签的destroy-method属性</li>
</ul>
<h3 id="3-2-6-Autowired"><a href="#3-2-6-Autowired" class="headerlink" title="3.2.6 @Autowired"></a>3.2.6 @Autowired</h3><ul>
<li>属性注解，同时也是set方法注解，声明当前属性自动装配， 默认为byType</li>
<li>如果想通过bean名引用就在set方法参数里面加&#x3D;&#x3D;@Qualifier&#x3D;&#x3D;注解</li>
<li>同时默认必须,如果没找到ytpe匹配的bean，则抛出异常,可通过required 属性设置当前自动装配是否为必须</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Clazz clazz;</span><br><span class="line">   <span class="meta">@Autowired</span>（required = <span class="literal">false</span>)</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(<span class="meta">@Qualifier(&quot;c1&quot;)</span> Clazz clazz)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;c1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz1</span> <span class="keyword">extends</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;c2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz2</span> <span class="keyword">extends</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-2-7-Resource"><a href="#3-2-7-Resource" class="headerlink" title="3.2.7 @Resource"></a>3.2.7 @Resource</h3><ul>
<li>属性注解，也用于声明属性自动装配</li>
<li>默认装配方式byName，若没找到，再byType，如果依然没找到或找到不止一个bean则抛出异常</li>
</ul>
<h1 id="四：-代理设计模式"><a href="#四：-代理设计模式" class="headerlink" title="四： 代理设计模式"></a>四： 代理设计模式</h1><hr>
<h2 id="4-1-代理设计模式优点"><a href="#4-1-代理设计模式优点" class="headerlink" title="4.1 代理设计模式优点"></a>4.1 代理设计模式优点</h2><ul>
<li>将通用性的工作都交由代理对象完成，被代理对象只需专注自己的核心业务</li>
</ul>
<h2 id="4-2-静态代理"><a href="#4-2-静态代理" class="headerlink" title="4.2 静态代理"></a>4.2 静态代理</h2><blockquote>
<p>静态代理：代理类只能够为特定的类生产代理对象，不能代理任意类</p>
</blockquote>
<img src="/Users/lei/Desktop/Screen Shot 2022-03-25 at 11.46.44.png" alt="Screen Shot 2022-03-25 at 11.46.44" style="zoom:50%;" />

<p><strong>使用静态代理的好处：</strong></p>
<ul>
<li>被代理类中只用关注核心业务的实现，将通用的管理型逻辑（事务管理，日志管理）和我们的业务逻辑分离</li>
<li>将通用代码放在代理类中实现，提高代码复用性</li>
<li>通过在代理类添加业务逻辑，实现对原有业务逻辑的拓展（增强）</li>
</ul>
<h2 id="5-3-动态代理"><a href="#5-3-动态代理" class="headerlink" title="5.3 动态代理"></a>5.3 动态代理</h2><blockquote>
<p>动态代理，几乎可以为所有的类产生代理对象</p>
<p>java中，动态代理实现方式有2种：</p>
<ul>
<li>JDK动态代理</li>
<li>CGLib动态代理</li>
</ul>
</blockquote>
<h3 id="5-3-1-JDK动态代理"><a href="#5-3-1-JDK动态代理" class="headerlink" title="5.3.1 JDK动态代理"></a>5.3.1 JDK动态代理</h3><blockquote>
<p>JDK动态代理:是通过被被代理对象实现的接口产生其代理对象的</p>
</blockquote>
<p>步骤：</p>
<ul>
<li>1.创建一个类，实现InvocationHandler接口，重写Invoke方法</li>
<li>2.在类中定义一个Object类型的变量，并提供这个变量的有参构造器，用于将被代理对象传递进来</li>
<li>定义getProxy方法，用于创建并返回代理对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKDynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//被代理对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDKDynamicProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//产生代理对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取被代理对象的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//2.获取被代理对象的类实现的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = obj.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.产生代理对象,通过被代理对象的类加载起及实现接口</span></span><br><span class="line">        <span class="comment">//第一个参数是被代理对象的类加载器</span></span><br><span class="line">        <span class="comment">//第二个参数是被代理对象实现的接口</span></span><br><span class="line">        <span class="comment">//第三个参数是使用产生代理对象调用方法时用于拦截方法执行的处理器</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces,<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        begin();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(obj,args);<span class="comment">//执行method，即被调用的方法</span></span><br><span class="line">        commit();</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;````````begin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;````````commit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//被代理对象</span></span><br><span class="line">        <span class="type">BookDAO</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAO</span>();</span><br><span class="line">        <span class="comment">//GeneralDAO jdkDynamicProxy = (GeneralDAO) new JDKDynamicProxy(bookDAO).getProxy();</span></span><br><span class="line">        <span class="comment">//创建动态代理对象并将被代理对象传递给代理类中赋值给obj</span></span><br><span class="line">        <span class="type">JDKDynamicProxy</span> <span class="variable">jdkDynamicProxy1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDKDynamicProxy</span>(bookDAO);</span><br><span class="line">        <span class="comment">//proxy就是产生的打击对象，可以强转成被代理对象实现的接口类型</span></span><br><span class="line">        <span class="type">GeneralDAO</span> <span class="variable">proxy</span> <span class="operator">=</span> (GeneralDAO)jdkDynamicProxy1.getProxy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用代理对象执行方法，不会直接进入到被代理类，即不会执行被调用的方法</span></span><br><span class="line">        <span class="comment">//而是进入到创建代理对象时指定的InvocationHandler类中的方法</span></span><br><span class="line">        <span class="comment">//调用的方法作为一个参数传递给invoke方法</span></span><br><span class="line">        proxy.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="4-3-2-CGLib动态代理"><a href="#4-3-2-CGLib动态代理" class="headerlink" title="4.3.2 CGLib动态代理"></a>4.3.2 CGLib动态代理</h3><blockquote>
<p>由于JDK动态代理时通过被代理类实现的接口来创建代理对象的，因此JDK只能代理实现了接口的类的对象<br>如果一个类没有实现任何借口，则用CGLib动态代理实现。</p>
<p>CGLib动态代理，是通过创建被代理类的子类来创建代理对象的，因此没有实现任何借口的类，都可以通过<br>CGLib产生代理对象。</p>
<p>CGLib动态代理不能为final类创建代理对象</p>
</blockquote>
<p>CGLib动态代理实现：</p>
<ul>
<li>添加CGLib依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个类实现MethodInterceptor接口，同时实现intercept方法</li>
<li>在类中定义一个Object型变量，并创建一个Object的有参构造器，用于传递被代理对象</li>
<li>定义getProxy方法，创建并返回代理对象（ 代理对象是通过创建被代理对象的子类来创建的）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CGLibDynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CGLibDynamicProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(obj.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        begin();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(obj,objects);<span class="comment">//通过反射调用被代理类对象</span></span><br><span class="line">        commit();</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;````````begin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;````````commit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCGLibDynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建被代理对象</span></span><br><span class="line">        <span class="type">BookDAO</span> <span class="variable">bookDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDAO</span>();</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">CGLibDynamicProxy</span> <span class="variable">cgLibDynamicProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CGLibDynamicProxy</span>(bookDAO);</span><br><span class="line">        <span class="comment">//代理对象实际上是被代理对象的子类，因此代理对象可直接强转被代理对象</span></span><br><span class="line">        <span class="type">BookDAO</span> <span class="variable">proxy</span> <span class="operator">=</span> (BookDAO) cgLibDynamicProxy.getProxy();</span><br><span class="line">        <span class="comment">//使用代理对象执行方法，实际没有执行这个方法，而是执行了代理类中的intercept方法</span></span><br><span class="line">        <span class="comment">//将当前调用的方法以及方法中的参数传递到intercept方法</span></span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="五：面向切面编程"><a href="#五：面向切面编程" class="headerlink" title="五：面向切面编程"></a>五：面向切面编程</h1><hr>
<h2 id="5-1-AOP概念"><a href="#5-1-AOP概念" class="headerlink" title="5.1 AOP概念"></a>5.1 AOP概念</h2><blockquote>
<p>Aspect Oriented Programming:面向切面编程，是一种利用“横切”的技术（底层就是实现动态代理）<br>对原有的业务逻辑进行拦截，并且可以在拦截的横切面上添加特定的业务逻辑，对原有的业务尽行<br>增强。</p>
<p>基于动态代理，在不改变原有业务的情况下对业务逻辑进行增强。</p>
</blockquote>
<img src="/Users/lei/Desktop/Screen Shot 2022-03-25 at 20.49.10.png" alt="Screen Shot 2022-03-25 at 20.49.10" style="zoom:50%;" />



<h2 id="5-2-Spring-AOP框架部署"><a href="#5-2-Spring-AOP框架部署" class="headerlink" title="5.2 Spring AOP框架部署"></a>5.2 Spring AOP框架部署</h2><h3 id="5-2-1-创建maven项目"><a href="#5-2-1-创建maven项目" class="headerlink" title="5.2.1 创建maven项目"></a>5.2.1 创建maven项目</h3><h3 id="5-2-2-添加依赖"><a href="#5-2-2-添加依赖" class="headerlink" title="5.2.2 添加依赖"></a>5.2.2 添加依赖</h3><ul>
<li>context</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>aspects</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-3-创建Spring配置文件"><a href="#5-2-3-创建Spring配置文件" class="headerlink" title="5.2.3 创建Spring配置文件"></a>5.2.3 创建Spring配置文件</h3><ul>
<li>applicationContext需要引入aop的命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-3-AOP配置–基于XML"><a href="#5-3-AOP配置–基于XML" class="headerlink" title="5.3 AOP配置–基于XML"></a>5.3 AOP配置–基于XML</h2><blockquote>
<p>在DAO的方法前后添加开启事务和提交事务的逻辑</p>
</blockquote>
<h3 id="AOP开发步骤"><a href="#AOP开发步骤" class="headerlink" title="AOP开发步骤"></a>AOP开发步骤</h3><ul>
<li>创建切面类，在切面类定义切点方法</li>
<li>将切面类配置给Spring容器</li>
<li>声明切入点</li>
<li>配置AOP通知策略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------开启事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------提交事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDAO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.DAO.BookDAO&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDAO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.DAO.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.utils.TxManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--声明切入点--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一个*代表所有返回类型，第二个*代表所有类，第三个*代表所有方法，(..)表示有没有参数都有效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book-all&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.DAO.*.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--声明txManager为切面类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;begin&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book-all&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book-all&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="5-4-切入点的声明"><a href="#5-4-切入点的声明" class="headerlink" title="5.4 切入点的声明"></a>5.4 切入点的声明</h2><h3 id="5-4-1-常见的各种切入点声明方式"><a href="#5-4-1-常见的各种切入点声明方式" class="headerlink" title="5.4.1 常见的各种切入点声明方式"></a>5.4.1 常见的各种切入点声明方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明切入点--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一个*代表所有返回类型，第二个*代表所有类，第三个*代表所有方法，(..)表示有没有参数都有效--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用aop-pointcut声明切入点，切入点可以是一个具体的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.DAO.BookDAO.insert())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--所有无参无返回值的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.WL.DAO.BookDAO.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--所有无返回值的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc3&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.WL.DAO.BookDAO.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--所有无参方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc4&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.DAO.BookDAO.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--类中所有方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc5&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.DAO.BookDAO.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--包中所有方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc6&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.DAO.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--DAO包中所有类的所有方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc7&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.DAO.*.insert(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--所有包所有类所有方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc8&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *(..))&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-4-2-面向切面使用注意事项"><a href="#5-4-2-面向切面使用注意事项" class="headerlink" title="5.4.2 面向切面使用注意事项"></a>5.4.2 面向切面使用注意事项</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果要使用Spring aop面向切面编程，调用切入掉方法的类必须交给Spring管理</span></span><br><span class="line"><span class="comment">//通过Spring容器获取BookDAO对象（实则代理对象），并调用方法</span></span><br><span class="line"><span class="comment">//一个类如果被声明为切入点且织入了切点后，通过Spring会拿到代理对象，如果没有，通过Spring会拿到真实对象</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BookDAO</span> <span class="variable">bookDAO</span> <span class="operator">=</span> (BookDAO) context.getBean(<span class="string">&quot;bookDAO&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;studentDAO&quot;</span>);</span><br><span class="line">        bookDAO.update();</span><br><span class="line">        student.update();</span><br></pre></td></tr></table></figure>





<h2 id="5-5-AOP通知策略"><a href="#5-5-AOP通知策略" class="headerlink" title="5.5 AOP通知策略"></a>5.5 AOP通知策略</h2><blockquote>
<p>AOP通知策略：就是声明将切面类中的切点方法如何织入到切入点</p>
<ul>
<li>before</li>
<li>after</li>
<li>after_throwing</li>
<li>after-returing</li>
<li>around</li>
</ul>
</blockquote>
<h3 id="5-5-1-定义切面类"><a href="#5-5-1-定义切面类" class="headerlink" title="5.5.1 定义切面类"></a>5.5.1 定义切面类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Method1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Method2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~method2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Method3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~method3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Method4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~method4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知的切点方法必须遵守以下规则：</span></span><br><span class="line">    <span class="comment">//1.此方法必须带一个参数ProceedingJoinPoint类型的参数</span></span><br><span class="line">    <span class="comment">//2.必须有Object类型的返回值</span></span><br><span class="line">    <span class="comment">//3.在前后增强的业务逻辑之间执行Object v = p.proceed();</span></span><br><span class="line">    <span class="comment">//4.方法最后返回v</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Method5</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~method5~~~~~before&quot;</span>);</span><br><span class="line">        <span class="comment">//此句代码的执行 就表示切入点方法的执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> p.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~method5~~~~~after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-5-2-配置切面类"><a href="#5-5-2-配置切面类" class="headerlink" title="5.5.2 配置切面类"></a>5.5.2 配置切面类</h3><ul>
<li>把定义好的切面类在xml文件中交给Spring管理</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.WL.utils.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>声明切点，即在哪里插入业务增强</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;book_insert&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.DAO.BookDAO.insert())&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>五种通知策略（around比较特殊）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--策略一：前置通知,切入到指定切入点之前--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;Method1&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--策略二：后置通知,切入到指定切入点之后--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;Method2&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--策略三：异常通知,切入点方法抛出异常之后执行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;Method3&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--策略四：方法返回之后执行，对于一个java方法而言，return返回值也是方法一部分，</span></span><br><span class="line"><span class="comment">            因此方法返回之后和方法执行结束是同一个时间点，所以after和after-returing是根据配置的顺序决定执行顺序--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;Method4&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;Method5&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;book_insert&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="六：Spring-AOP-注解配置"><a href="#六：Spring-AOP-注解配置" class="headerlink" title="六：Spring AOP 注解配置"></a>六：Spring AOP 注解配置</h1><hr>
<h2 id="6-1-Spring-AOP-注解配置框架部署"><a href="#6-1-Spring-AOP-注解配置框架部署" class="headerlink" title="6.1 Spring AOP 注解配置框架部署"></a>6.1 Spring AOP 注解配置框架部署</h2><h3 id="6-1-1-创建maven工程"><a href="#6-1-1-创建maven工程" class="headerlink" title="6.1.1 创建maven工程"></a>6.1.1 创建maven工程</h3><h3 id="6-1-2-添加依赖"><a href="#6-1-2-添加依赖" class="headerlink" title="6.1.2 添加依赖"></a>6.1.2 添加依赖</h3><ul>
<li>context</li>
<li>aspect</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="6-1-3-Spring-配置文件"><a href="#6-1-3-Spring-配置文件" class="headerlink" title="6.1.3 Spring 配置文件"></a>6.1.3 Spring 配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明采用注解配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.WL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--基于注解配置的AOP代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="6-2-AOP注解案例"><a href="#6-2-AOP注解案例" class="headerlink" title="6.2 AOP注解案例"></a>6.2 AOP注解案例</h2><h3 id="6-2-1-切面类注解"><a href="#6-2-1-切面类注解" class="headerlink" title="6.2.1 切面类注解"></a>6.2.1 切面类注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.WL.dao.*.*()) &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc1</span><span class="params">()</span>&#123;&#125;  <span class="comment">//必须是无参无返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~commit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printExecuteTime</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> point.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;execution time:&quot;</span>+(time2-time1));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;注解使用虽然方便，但只能在源码上添加注解，因此我们的自定义类提倡使用注解配置<br>           但如果使用到第三方提供的类，则需要通过xml配置形式，完成配置。</p>
<h1 id="七：Spring整合MyBatis"><a href="#七：Spring整合MyBatis" class="headerlink" title="七：Spring整合MyBatis"></a>七：Spring整合MyBatis</h1><hr>
<blockquote>
<p>Spring 两大核心思想：IoC和AOP —– 最终都是为了解耦</p>
<ul>
<li>IoC：控制反转，Spring容器可以完成对象的创建，属性注入，对象管理等工作</li>
<li>AOP：面向切面，在不修改原有业务逻辑的情况下实现对原有业务的增强</li>
</ul>
</blockquote>
<h2 id="7-1-Spring可以为mybatis提供哪些支持？"><a href="#7-1-Spring可以为mybatis提供哪些支持？" class="headerlink" title="7.1 Spring可以为mybatis提供哪些支持？"></a>7.1 Spring可以为mybatis提供哪些支持？</h2><p><strong>IoC支持</strong>：SpringIoC 可以为MyBatis完成DataSource、SqlSessionFactory  、SqlSession  以及DAO对象的创建</p>
<p><strong>AOP支持</strong>：使用Spring提供的事务管理切面类完成对MyBatis数据库操作中的事务管理</p>
<h2 id="7-2-Spring整合MyBatis准备工作"><a href="#7-2-Spring整合MyBatis准备工作" class="headerlink" title="7.2 Spring整合MyBatis准备工作"></a>7.2 Spring整合MyBatis准备工作</h2><h3 id="7-2-1-创建一个maven工程"><a href="#7-2-1-创建一个maven工程" class="headerlink" title="7.2.1 创建一个maven工程"></a>7.2.1 创建一个maven工程</h3><h3 id="7-2-2-部署mybatis框架"><a href="#7-2-2-部署mybatis框架" class="headerlink" title="7.2.2 部署mybatis框架"></a>7.2.2 部署mybatis框架</h3><ul>
<li>添加依赖<ul>
<li>MySql驱动</li>
<li>mybatis</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建Mybatis配置文件:mybatis-config.xml</p>
</li>
<li><p>创建文件且导入文件规范之后无需任何配置</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="7-2-3-部署Spring框架"><a href="#7-2-3-部署Spring框架" class="headerlink" title="7.2.3 部署Spring框架"></a>7.2.3 部署Spring框架</h3><ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建Spring配置文件 applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="7-2-4-添加Spring整合MyBatis的依赖"><a href="#7-2-4-添加Spring整合MyBatis的依赖" class="headerlink" title="7.2.4 添加Spring整合MyBatis的依赖"></a>7.2.4 添加Spring整合MyBatis的依赖</h3><ul>
<li>Mybatis-spring(就是mybatis提供的兼容Spring的补丁)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="7-3-Spring整合MyBatis整合配置"><a href="#7-3-Spring整合MyBatis整合配置" class="headerlink" title="7.3 Spring整合MyBatis整合配置"></a>7.3 Spring整合MyBatis整合配置</h2><h3 id="7-3-1-整合Druid连结池"><a href="#7-3-1-整合Druid连结池" class="headerlink" title="7.3.1 整合Druid连结池"></a>7.3.1 整合Druid连结池</h3><ul>
<li>添加Druid依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建druid.properties属性文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">druid.driver = com.mysql.jdbc.Driver</span><br><span class="line">druid.url = jdbc:mysql://localhost:3306/db_mybatis?characterEncoding=utf-8</span><br><span class="line">druid.username = root</span><br><span class="line">druid.password = YES</span><br><span class="line"></span><br><span class="line">## 连结池参数</span><br><span class="line">druid.pool.init = 1         ##初始化连结数量</span><br><span class="line">druid.pool.minIdle = 3      ##高峰期过后销毁连结时保留的连结最小数目</span><br><span class="line">druid.pool.maxActive = 20   ##最大连结数</span><br><span class="line">druid.pool.timeout = 30000  ##最大等待时间</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在applicationContext.xml 中配置Druid DataSource</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载Druid.properties属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖Spring容器完成数据源DataSource的创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.init&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;druid.pool.timeout&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="7-3-2-整合mybatis–创建SqlSessionFactory"><a href="#7-3-2-整合mybatis–创建SqlSessionFactory" class="headerlink" title="7.3.2 整合mybatis–创建SqlSessionFactory"></a>7.3.2 整合mybatis–创建SqlSessionFactory</h3><blockquote>
<p>依赖Spring容器创建mybatis的sqlswssionfactory对象</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖Spring容器完成MyBatis的SqlSessionFactory对象的创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置mapper文件的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置需要定义别名的实体类的包（可选）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.WL.pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置mybatis的主配置文件（可选）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-3-3-整合mybatis-创建mapper"><a href="#7-3-3-整合mybatis-创建mapper" class="headerlink" title="7.3.3 整合mybatis-创建mapper"></a>7.3.3 整合mybatis-创建mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org/DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.WL.dao.UserDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ser_pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userPwd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_realname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;realName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_img&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userImg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUsers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select user_id,user_name,user_pwd,user_realname,user_img</span><br><span class="line">        from users   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test<span class="comment">//这里需要导入junit包</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUsers</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">UserDAO</span> <span class="variable">userDAO</span> <span class="operator">=</span> (UserDAO) context.getBean(<span class="string">&quot;userDAO&quot;</span>);<span class="comment">//DAO的id默认类名小写</span></span><br><span class="line">       List&lt;User&gt; users = userDAO.queryUsers();</span><br><span class="line">       System.out.println(users);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-3-4-案例讲解"><a href="#7-3-4-案例讲解" class="headerlink" title="7.3.4 案例讲解"></a>7.3.4 案例讲解</h3><ul>
<li>创建包service</li>
<li>在包下创建接口UserService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在service包下创建接口实现类包impl，并创建实现类UserServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.queryUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryUsers</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">       UserServiceImpl userService= (UserServiceImpl) context.getBean(<span class="string">&quot;userServiceImpl&quot;</span>);<span class="comment">//DAO的id默认类名小写</span></span><br><span class="line">       List&lt;User&gt; users = userService.listUsers();</span><br><span class="line">       System.out.println(users);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h2 id="7-4-Spring整合MyBatis整合AOP配置"><a href="#7-4-Spring整合MyBatis整合AOP配置" class="headerlink" title="7.4 Spring整合MyBatis整合AOP配置"></a>7.4 Spring整合MyBatis整合AOP配置</h2><blockquote>
<p>使用Spring提供的事务管理切面类完成DAO中增删改操作的事务管理</p>
</blockquote>
<p>首先在applicationContext中加入头标签tx</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></table></figure>



<h3 id="7-4-1-事务的隔离级别"><a href="#7-4-1-事务的隔离级别" class="headerlink" title="7.4.1 事务的隔离级别"></a>7.4.1 事务的隔离级别</h3><blockquote>
<p>isolation:设置事务隔离级别：<br>READ_UNCOMMITTED,READ_COMMITTED,REPEATABLE_READ,SERIALIZABLE</p>
</blockquote>
<img src="/Users/lei/Desktop/Screen Shot 2022-03-29 at 15.21.24.png" alt="Screen Shot 2022-03-29 at 15.21.24" style="zoom:50%;" />



<h3 id="7-4-2-事务的传播机制"><a href="#7-4-2-事务的传播机制" class="headerlink" title="7.4.2 事务的传播机制"></a>7.4.2 事务的传播机制</h3><blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">propagation:设置事务的传播机制:</span><br><span class="line">            REQUIRED:如果上层方法没有事务则创建一个新事务， 如果已经存在事务则加入到事务中</span><br><span class="line">            SUPPORTS:如果上层方法没有事务则以非事务方式执行，如果已经存在事务则加入到事务中</span><br><span class="line">            REQUIRED_NEW:如果上层方法没有事务则创建一个新事务，如果已经存在事务则将当前事务挂起</span><br><span class="line">            NOT_SUPPORTED:如果上层方法没有事务则以非事务方式执行，如果已经存在事务则将当前事务挂起</span><br><span class="line">            NEVER:如果上层方法没有事务则以非事务方式执行，如果已经存在事务则抛出异常</span><br><span class="line">            MANDATORY:如果上层方法已经存在事务则加入到事务中执行，如果不存在事务则抛出异常</span><br><span class="line">            NESTED:  如果上层方法没有事务，则创建一个新事务，如果已经存在事务则嵌套到当前事务中</span><br></pre></td></tr></table></figure>





<h3 id="7-4-3-Spring-AOP事务管理配置–基于XML"><a href="#7-4-3-Spring-AOP事务管理配置–基于XML" class="headerlink" title="7.4.3 Spring AOP事务管理配置–基于XML"></a>7.4.3 Spring AOP事务管理配置–基于XML</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.将Spring提供的事务管理类提供给Spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframeork.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.通过Spring jdbc提供的tx标签声明事务管理策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.将事务管理策略以AOP配置 应用于DAO操作方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--以后尽量不要配置到dao中，配置到service包中，一个业务一个事务，而不是一个操作一个事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;crud&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.WL.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;crud&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="7-4-4-Spring-AOP事务管理配置–基于注解"><a href="#7-4-4-Spring-AOP事务管理配置–基于注解" class="headerlink" title="7.4.4 Spring AOP事务管理配置–基于注解"></a>7.4.4 Spring AOP事务管理配置–基于注解</h3><ul>
<li>在applicationContext中配置事务管理类，声明使用注解方式进行事务配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.将Spring提供的事务管理类提供给Spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframeork.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.声明采用注解形式进行配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在需要Spring进行事务管理的方法上添加@transactional注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ,propagation = Propagation.SUPPORTS)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userDAO.queryUsers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h1 id="x3D-x3D-一、Spring-MVC-概述-x3D-x3D"><a href="#x3D-x3D-一、Spring-MVC-概述-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;一、Spring MVC 概述&#x3D;&#x3D;"></a>&#x3D;&#x3D;一、Spring MVC 概述&#x3D;&#x3D;</h1><hr>
<blockquote>
<p>Spring MVC是由Spring官方提供的基于MVC设计理念的web框架</p>
<p>Spring MVC是基与Servlet封装的用于实现MVC控制的框架，实现前端和服务端的交互</p>
</blockquote>
<h2 id="1-1-Spring-MVC优势"><a href="#1-1-Spring-MVC优势" class="headerlink" title="1.1 Spring MVC优势"></a>1.1 Spring MVC优势</h2><ul>
<li>严格遵守了MVC分层思想</li>
<li>采用了松耦合、插件式结构，相比较于我们封装的BaseServlet以及其他的一些MVC框架来说更灵活<br>更具扩展性</li>
<li>Spring MVC式基于Spring的扩展，提供了一套完善的MVC注解</li>
<li>SpringMVC在进行数据绑定、数据解析都提供了多种处理方式，可灵活配置</li>
<li>SpringMVC对RESTful url设计风格提供了良好的支持</li>
</ul>
<h2 id="1-2-SpringMVC本质工作"><a href="#1-2-SpringMVC本质工作" class="headerlink" title="1.2 SpringMVC本质工作"></a>1.2 SpringMVC本质工作</h2><ul>
<li>c接受并解析请求</li>
<li>处理请求</li>
<li>数据渲染、响应请求</li>
</ul>
<h1 id="二、Spring-MVC框架部署"><a href="#二、Spring-MVC框架部署" class="headerlink" title="二、Spring MVC框架部署"></a>二、Spring MVC框架部署</h1><hr>
<h2 id="2-1-基于maven创建一个web工程"><a href="#2-1-基于maven创建一个web工程" class="headerlink" title="2.1 基于maven创建一个web工程"></a>2.1 基于maven创建一个web工程</h2><ul>
<li>创建一个maven工程</li>
<li>在pom.xml文件下添加packaging标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在main下创建directory名为webapp，且在webapp下创建directory名为WEB-INF</li>
<li>在WEb-INF下创建web.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>导入JSP和Servlet依赖</li>
<li>点击右上角配置本地tomcat</li>
</ul>
<h2 id="2-2-添加Spring-MVC依赖"><a href="#2-2-添加Spring-MVC依赖" class="headerlink" title="2.2 添加Spring MVC依赖"></a>2.2 添加Spring MVC依赖</h2><ul>
<li>spring-context</li>
<li>spring-aspects</li>
<li>spring-jdbc</li>
<li>spring-web</li>
<li>spring-webmvc</li>
<li>spring-junit(单元测试用)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">peoperties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">peoperties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加这个标签可以统一设置版本--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-3-创建SpringMVC配置文件"><a href="#2-3-创建SpringMVC配置文件" class="headerlink" title="2.3 创建SpringMVC配置文件"></a>2.3 创建SpringMVC配置文件</h2><ul>
<li>在resources目录下创建名为 spring-servlet.xml的文件</li>
<li>添加MVC的命名空间</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot; http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.WL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明mvc使用注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-4-在web-xml中配置SpringMVC的前端控制器"><a href="#2-4-在web-xml中配置SpringMVC的前端控制器" class="headerlink" title="2.4 在web.xml中配置SpringMVC的前端控制器"></a>2.4 在web.xml中配置SpringMVC的前端控制器</h2><blockquote>
<p>SpringMVC中提供了一个名为DispatcherServlet的类（SpringMVC中央处理器，也就是前端控制器）<br>用于拦截用户请求交由Spring MVC处理</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="三、SpringMVC使用"><a href="#三、SpringMVC使用" class="headerlink" title="三、SpringMVC使用"></a>三、SpringMVC使用</h1><hr>
<blockquote>
<p>在SpringMVC中，我们把接受用户请求，处理用户请求的类称之为Controler（控制器）</p>
</blockquote>
<h2 id="3-1-创建控制器"><a href="#3-1-创建控制器" class="headerlink" title="3.1 创建控制器"></a>3.1 创建控制器</h2><h3 id="3-1-1-创建控制器类"><a href="#3-1-1-创建控制器类" class="headerlink" title="3.1.1 创建控制器类"></a>3.1.1 创建控制器类</h3><ul>
<li>创建名为com.WL.controllers包（需要在Spring注解扫描范围内）</li>
<li>创建一个类（无需做任何继承和实现）</li>
<li>在类上添加@Controller注解声明此类为SpringMVC的控制器</li>
<li>在类上添加@RequestMapping（”&#x2F;。。。”）注解，声明此控制器类的请求url</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-2-在控制器类中定义处理请求的方法"><a href="#3-1-2-在控制器类中定义处理请求的方法" class="headerlink" title="3.1.2 在控制器类中定义处理请求的方法"></a>3.1.2 在控制器类中定义处理请求的方法</h3><ul>
<li>在一个控制器类中可以定义多个方法处理不同请求</li>
<li>在每个方法上添加@Requestmapping注解，用于声明当前方法请求的url</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----book add-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----book list-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-3-访问"><a href="#3-1-3-访问" class="headerlink" title="3.1.3 访问"></a>3.1.3 访问</h3><ul>
<li><a href="http://localhost:8080/springmvc_demo1/book/add">http://localhost:8080/springmvc_demo1/book/add</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web前端基础</title>
    <url>/2022/04/11/web%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="一、C-x2F-S架构与B-x2F-S架构"><a href="#一、C-x2F-S架构与B-x2F-S架构" class="headerlink" title="一、C&#x2F;S架构与B&#x2F;S架构"></a>一、C&#x2F;S架构与B&#x2F;S架构</h1><hr>
<blockquote>
<p>对于一个软件系统,用户是通过用户界面来完成与软件系统交互的,根据软件不同的架构模式,软件系统界面<br>设计的实现技术是不同的.</p>
<ul>
<li>C&#x2F;S 架构</li>
<li>B&#x2F;S 架构</li>
</ul>
</blockquote>
<h2 id="1-1-C-x2F-S架构"><a href="#1-1-C-x2F-S架构" class="headerlink" title="1.1 C&#x2F;S架构"></a>1.1 C&#x2F;S架构</h2><blockquote>
<p>C&#x2F;S Client-Server 基于客户端和服务器的架构模式</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-11 at 11.10.50.png" alt="Screen Shot 2022-04-11 at 11.10.50" style="zoom:50%;" />



<h2 id="1-2-B-x2F-S架构"><a href="#1-2-B-x2F-S架构" class="headerlink" title="1.2 B&#x2F;S架构"></a>1.2 B&#x2F;S架构</h2><blockquote>
<p>Browser-Server 基于浏览器和服务器的架构模式</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-11 at 11.19.30.png" alt="Screen Shot 2022-04-11 at 11.19.30" style="zoom:50%;" />



<h2 id="1-3-Java前端开发技术栈"><a href="#1-3-Java前端开发技术栈" class="headerlink" title="1.3 Java前端开发技术栈"></a>1.3 Java前端开发技术栈</h2><h3 id="1-3-1-C-x2F-S"><a href="#1-3-1-C-x2F-S" class="headerlink" title="1.3.1 C&#x2F;S"></a>1.3.1 C&#x2F;S</h3><blockquote>
<p>java语言可以进行C&#x2F;S架构开发,JDK提供的awt(abstract window toolkit) 可以进行窗体开发</p>
</blockquote>
<ul>
<li>awt</li>
<li>swing</li>
</ul>
<h3 id="1-3-2-B-x2F-S"><a href="#1-3-2-B-x2F-S" class="headerlink" title="1.3.2 B&#x2F;S"></a>1.3.2 B&#x2F;S</h3><blockquote>
<p>java语言主要应用于web系统的开发,web就是基于B&#x2F;S架构的,其系统界面都是通过网页实现的</p>
</blockquote>
<ul>
<li>html 超文本标记语言 网页的结构</li>
<li>css 层叠样式表 网页的样式</li>
<li>javascript 网页脚本语言 网页的行为</li>
</ul>
<h3 id="1-3-3-移动应用"><a href="#1-3-3-移动应用" class="headerlink" title="1.3.3 移动应用"></a>1.3.3 移动应用</h3><blockquote>
<p>JAVA语言还可以用于进行android 和harmonyOS应用开发</p>
</blockquote>
<ul>
<li>Android xml 及组件</li>
<li>HarmonyOS 及组件</li>
</ul>
<h1 id="二、HTML"><a href="#二、HTML" class="headerlink" title="二、HTML"></a>二、HTML</h1><hr>
<h2 id="2-1-网页的概念"><a href="#2-1-网页的概念" class="headerlink" title="2.1 网页的概念"></a>2.1 网页的概念</h2><blockquote>
<p>网页–可以在网络中传输、通过浏览器解析并显示视图的页面</p>
</blockquote>
<p>问题:一个文件通过网络传递给浏览器之后,浏览器是如何显示视图(界面) 的呢?</p>
<p>过程:</p>
<ol>
<li>用户通过浏览器发送请求</li>
<li>服务器响应请求,给浏览器发送页面文件(代码)</li>
<li>浏览器不显示代码,而是将代码转化成对应的视图显示</li>
</ol>
<p>网页设计: 就是编写网页文件,通过浏览器可以显示特定的用户界面</p>
<h2 id="2-2-HTML是什么"><a href="#2-2-HTML是什么" class="headerlink" title="2.2 HTML是什么?"></a>2.2 HTML是什么?</h2><blockquote>
<p>HTML : Hyper Text Markup Language : 超文本标记语言,以特定的标签在浏览器中呈现不同的视图</p>
<p>标签(标记): 就是由”&lt; &gt;” 和特定的单词组成的符号,可以被浏览器识别, 并显示对应的视图</p>
<p>为什么叫超文本 : 使用文本标签显示图片、视频、声音等非文本数据</p>
</blockquote>
<h2 id="2-3-HTML书写规范"><a href="#2-3-HTML书写规范" class="headerlink" title="2.3 HTML书写规范"></a>2.3 HTML书写规范</h2><blockquote>
<p>HTML需要写在一个网页文件中 ,网页文件的规则:</p>
<ul>
<li>网页文件是一个后缀名是 .html 或者 .htm 的文件</li>
<li>网页文件基本结构<ul>
<li>在网页文件第一行通过&#x3D;&#x3D;&lt;!DOCTYPE&gt;&#x3D;&#x3D;声明当前文档遵循的html规范</li>
<li>在HTML规范声明后,必须有一对根标签&#x3D;&#x3D;<html></html>&#x3D;&#x3D;(根标签:当前网页中的其他标签都在根标签里面)</li>
<li>在html根标签中有两对子标签&#x3D;&#x3D;<head></head>&#x3D;&#x3D; 和 &#x3D;&#x3D;<body></body>&#x3D;&#x3D;<ul>
<li>head : 用于定义当前网页文档的标题、字符集等属性信息(head的内容不显示在网页正文的)</li>
<li>body : 用于定义当前网页显示的主体</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>我的网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标签:<ul>
<li>双标签(围堵标签) <tag></tag></li>
<li>单标签 <tag/></li>
</ul>
</li>
<li>标签属性 : 在双标签前一个标签中或单标签的标签名后可以添加键值对,用于设置当前标签的特性</li>
<li>HTML标签不区分大小写,但建议统一小写</li>
</ul>
</blockquote>
<h3 id="2-3-1-HTML版本规范"><a href="#2-3-1-HTML版本规范" class="headerlink" title="2.3.1 HTML版本规范"></a>2.3.1 HTML版本规范</h3><blockquote>
<p>前端规范 — w3c</p>
<p>HTML4</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>XHTML : 提出了基于HTML4更多的语法规则,让html编写更规范严谨</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML5 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="2-4-前端开发工具"><a href="#2-4-前端开发工具" class="headerlink" title="2.4 前端开发工具"></a>2.4 前端开发工具</h2><blockquote>
<p>为了便于前端开发,有很多前端开发工具,可以为我们进行网页设计提供代码自动补全、代码错误提示、项目文件管理<br>等功能,常见的工具</p>
<ul>
<li>web storm</li>
<li>vscode</li>
<li>sublime</li>
<li>idea</li>
<li>&#x3D;&#x3D;HBuilder&#x3D;&#x3D;</li>
</ul>
</blockquote>
<p><strong>HBuilderX的使用</strong></p>
<ul>
<li>下载 :  <a href="http://www.dcloud.io/">www.dcloud.io</a></li>
<li>解压到存放软件的目录,免安装</li>
<li>首次运行需要对HBuilderX进行用户习惯设置(tools里设置)</li>
<li>创建web项目: new project</li>
<li>右键项目,新建html文件,创建的文件默认给出基础结构</li>
<li>在文件中的改动需要手动保存,否则左上角文件导航栏会有星号</li>
<li>保存后在左上角有绿色源泉启动按钮,可以执行文件</li>
</ul>
<h1 id="三、HTML常用标签"><a href="#三、HTML常用标签" class="headerlink" title="三、HTML常用标签"></a>三、HTML常用标签</h1><hr>
<blockquote>
<p>网页就是使用html标签构成的文档,在浏览器显示视图页面,html什么样的标签显示什么样的视图</p>
</blockquote>
<p>网页界面的作用: 显示数据、输入数据</p>
<ul>
<li>为用户提供一个界面,显示用户想要看到的界面(文本,图片,声音,视频)</li>
<li>为用户提供一个界面,可以输入数据</li>
</ul>
<blockquote>
<p>如何使用html标签在网页中显示数据和提供输入视图呢?</p>
<p>&#x3D;&#x3D;根据html标签的作用,将html标签分为以下几种:&#x3D;&#x3D;</p>
<ul>
<li>显示标签 : 就是将图片,声音,视频通过网页呈现给用户</li>
<li>表单标签 : 给用户提供输入框、按钮、单选按钮、复选框、文本域等视图供用户输入数据</li>
<li>布局标签 : 对网页中的内容进行排版</li>
<li>功能标签 : 能够提供特定用户功能的标签</li>
<li>框架标签 : 能搭建页面框架(属于布局标签)</li>
</ul>
</blockquote>
<h2 id="3-1-显示标签"><a href="#3-1-显示标签" class="headerlink" title="3.1 显示标签"></a>3.1 显示标签</h2><blockquote>
<p>就是将图片,声音,视频通过网页呈现给用户</p>
</blockquote>
<h3 id="3-1-1-显示文本"><a href="#3-1-1-显示文本" class="headerlink" title="3.1.1 显示文本"></a>3.1.1 显示文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--font标签: color设置颜色;face设置字体‘size设置大小--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--现在的html不建议使用font--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">face</span>=<span class="string">&quot;楷体&quot;</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span>&gt;</span>我的页面<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1&quot;</span>&gt;</span>卫磊<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--在h5规范中,不推荐使用font,建议使用lable来显示文本 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- lable标签没有字体属性,但可以通过设置style属性值设置字体大小颜色和样式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">&quot;color:red;font-size:30px;font-family:楷体&quot;</span>&gt;</span>网页设计<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-显示图片"><a href="#3-1-2-显示图片" class="headerlink" title="3.1.2 显示图片"></a>3.1.2 显示图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src属性:用于显示图片的路径,可以是网络图片路径,也可以是本地图片路径 </span></span><br><span class="line"><span class="comment">		width属性:设置图片宽度,height属性:设置图片高度,这两个属性同时设置可能会改变图片的比例</span></span><br><span class="line"><span class="comment">		我们可以只设置其中一个属性,另一个会自动适应</span></span><br><span class="line"><span class="comment">		alt属性: 用于指定图片无法加载值的替换文本,即图片无法加载时会显示此文本--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://t7.baidu.com/it/u=4198287529,2774471735&amp;fm=193&amp;f=GIF&quot;</span> </span></span><br><span class="line"><span class="tag">		  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 本地图片: 先在项目中创建一个目录,再将要显示的图片拷本进来</span></span><br><span class="line"><span class="comment">		由于图片和页面文件是在同一根目录下,所以直接写文件路径就好,写imgs后会提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Erics.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Erics&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-3-声音和视频"><a href="#3-1-3-声音和视频" class="headerlink" title="3.1.3 声音和视频"></a>3.1.3 声音和视频</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- audio标签:浏览器内置的音频播放器(默认隐藏的,)</span></span><br><span class="line"><span class="comment">		 src属性:指定音频的路径:网络或者本地,本地音频操作同图片</span></span><br><span class="line"><span class="comment">		 controls属性表示显示播放器,此属性不需要属性值</span></span><br><span class="line"><span class="comment">		 aoyoplay属性表示音乐自动播放,要考虑浏览器兼容性--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=</span></span><br><span class="line"><span class="tag">		<span class="string">&quot;https://haokan.baidu.com/v?vid=3117367617815114264&amp;pd=pcshare&quot;</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- vedio标签:浏览器内置的视频播放器(默认隐藏的,)</span></span><br><span class="line"><span class="comment">		 src属性:指定音频的路径:网络或者本地,本地音频操作同图片</span></span><br><span class="line"><span class="comment">		 controls属性表示显示播放器控制条,此属性不需要属性值  </span></span><br><span class="line"><span class="comment">		 aoyoplay属性表示视频自动播放,要考虑浏览器兼容性</span></span><br><span class="line"><span class="comment">		 width, height设置视频播放器的尺寸--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=</span></span><br><span class="line"><span class="tag">		<span class="string">&quot;https://www.o8tv.com/vodplay/362988-1-1.html&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="3-2-表单标签"><a href="#3-2-表单标签" class="headerlink" title="3.2 表单标签"></a>3.2 表单标签</h2><blockquote>
<p>提供输入视图供用户输入数据</p>
<ul>
<li><p>文本输入框</p>
</li>
<li><p>密码输入框</p>
</li>
<li><p>单选按钮</p>
</li>
<li><p>复选框</p>
</li>
<li><p>按钮(普通按钮,重置按钮,提交按钮,图片按钮)</p>
</li>
<li><p>文件选择框</p>
</li>
<li><p>数字输入框</p>
</li>
<li><p>日期输入框</p>
</li>
<li><p>颜色选择框</p>
</li>
<li><p>邮箱输入框、电话输入框(很多浏览器不支持)</p>
</li>
<li><p>下拉菜单</p>
</li>
<li><p>文本域(多行文本框)</p>
</li>
</ul>
</blockquote>
<h3 id="3-2-1-input标签"><a href="#3-2-1-input标签" class="headerlink" title="3.2.1 input标签"></a>3.2.1 input标签</h3><blockquote>
<p>input标签可以用来显示多种表单输入视图效果,input标签有一个type属性,不同属性表示不同视图</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果input没有type属性则默认是文本输入框 --&gt;</span></span><br><span class="line">		- 文本输入框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		- 密码输入框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">		- 单选按钮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		- 复选框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span>  </span><br><span class="line">		-文件选择框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 普通按钮没有文字的,要通过value来指定按钮文本 --&gt;</span></span><br><span class="line">		-普通按钮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我啊&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		-重置按钮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		-提交按钮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 图片按钮从功能上和提交按钮一致,需要通过src指定按钮图片 --&gt;</span></span><br><span class="line">		-图片按钮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;imgs/Screen%20Shot%202022-04-11%20at%2022.04.45.png&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 以下几个input的type是HTML5新增的效果,要考虑浏览器的兼容性,浏览器是否支持--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- type=“number”表示此输入框只能输入数字,且min设置最小值,max设置最大值 --&gt;</span></span><br><span class="line">		- 数字输入框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">min</span>=<span class="string">&quot;10&quot;</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		- 日期输入框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		- 颜色选择框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		- 邮箱输入框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		-电话输入框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		-文件搜索输入框:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-11 at 22.12.53.png" alt="Screen Shot 2022-04-11 at 22.12.53" style="zoom:50%;" />



<p><strong>单选按钮和复选框使用注意事项</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单选按钮注意事项:</span></span><br><span class="line"><span class="comment">		 1: 如果多个单选按钮是同一个主题的选项,则需要提供name属性,且name属性值必须相同(排他性)</span></span><br><span class="line"><span class="comment">		 2: 单选按钮必须提交value属性,value属性值会在当前按钮选中时提交</span></span><br><span class="line"><span class="comment">		 3: 单选按钮可以通过添加checked属性使其默认被选中,若有多个按钮添加了checked属性,则选中最后一个--&gt;</span></span><br><span class="line">		单选按钮:<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		性别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>/&gt;</span>男</span><br><span class="line">		     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>/&gt;</span>女</span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 复选框注意事项与单选相同</span></span><br><span class="line"><span class="comment">		1: 复选框页需要name属性,但不是为了排他性,而是为了方便数据提交时辨别是同一组数据</span></span><br><span class="line"><span class="comment">		2: 同样需要value属性--&gt;</span></span><br><span class="line">		爱好:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> /&gt;</span>篮球</span><br><span class="line">		    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>/&gt;</span>足球</span><br><span class="line">		    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;badmiton&quot;</span> /&gt;</span>羽毛球</span><br></pre></td></tr></table></figure>





<h3 id="3-2-2-select标签"><a href="#3-2-2-select标签" class="headerlink" title="3.2.2 select标签"></a>3.2.2 select标签</h3><blockquote>
<p>下拉菜单</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- select标签:表示下拉菜单的容器</span></span><br><span class="line"><span class="comment">					1: multiple属性,设置下拉菜单多选,但要使用control键</span></span><br><span class="line"><span class="comment">					2: size属性,设置下拉列表中可见选项的数目</span></span><br><span class="line"><span class="comment">			     option子标签:表示下拉菜单的选项</span></span><br><span class="line"><span class="comment">				   1: option标签需要提供value属性,当选择此菜单会提交到后台</span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>Wuhan<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bejing&quot;</span>&gt;</span>Beijing<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>Shenzhen<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-3-textarea标签"><a href="#3-2-3-textarea标签" class="headerlink" title="3.2.3 textarea标签"></a>3.2.3 textarea标签</h3><blockquote>
<p>文本域,多行文本框</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多行输入框:textarea标签 </span></span><br><span class="line"><span class="comment">			1.rows属性用于指定多行文本框显示的行数</span></span><br><span class="line"><span class="comment">			2.cols设置多行文本输入框每行显示的字符个数(考虑浏览器兼容性)</span></span><br><span class="line"><span class="comment">			3.输入框(文本框,密码框)是通过value属性来设置默认值的,</span></span><br><span class="line"><span class="comment">			  多行文本框使用标签文本设置默认值</span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span>&gt;</span>这是默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-4-表单共有属性"><a href="#3-2-4-表单共有属性" class="headerlink" title="3.2.4 表单共有属性"></a>3.2.4 表单共有属性</h3><blockquote>
<p>对于表单标签,有一些共有属性</p>
</blockquote>
<ul>
<li>&#x3D;&#x3D;id&#x3D;&#x3D;属性: 不仅是表单标签的共有属性,几乎所有的html标签都可以用这个标签,它表示此标签在当前网页文件的<br>唯一表示,便于我们定位进行操作.在以恶搞网页中,id这个属性值要保持唯一性</li>
<li>&#x3D;&#x3D;name&#x3D;&#x3D;属性: 用于将数据同步提交到后端时让数据有排他性,便于在后端接收数据</li>
<li>&#x3D;&#x3D;required&#x3D;&#x3D;属性: 表示限制此输入框必须输入数据,否则不能提交</li>
<li>&#x3D;&#x3D;placeholder&#x3D;&#x3D;: eg: placeholder&#x3D;”请输入用户名“: 用于设置输入框空值时提示输入信息</li>
<li>&#x3D;&#x3D;readonly&#x3D;&#x3D;属性: 设置此输入框只能显示数据,不能点击输入</li>
<li>&#x3D;&#x3D;disable&#x3D;&#x3D;属性: 设置输入组件禁用(输入框不能输入,按钮不能点击,下拉不能选择)</li>
<li>&#x3D;&#x3D;value&#x3D;&#x3D;属性: 表示当前输入框值,下拉菜单选中的选项的值</li>
</ul>
<h3 id="3-2-5-form标签"><a href="#3-2-5-form标签" class="headerlink" title="3.2.5 form标签"></a>3.2.5 form标签</h3><blockquote>
<p>form标签在页面中没有显示效果,他用于将用户在输入视图中输入的数据提交到后台</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当点击form 标签中的提交按钮时,可以将form标签中输入视图的数据提交到action指定的标签 </span></span><br><span class="line"><span class="comment">		注意:1.要想提交表单,要使用提交按钮或者图片按钮 </span></span><br><span class="line"><span class="comment">			2.form表单中的输入标签需要提供name属性,都则输入框中的值不会被提交,会在IP地址拦地址最后的问号后显示</span></span><br><span class="line"><span class="comment">			3.form标签的method属性,指定表单提交数据的方式(get:显示提交,post:隐藏提交,其他区别暂不关注)</span></span><br><span class="line"><span class="comment">			  method属性默认为显示,即如果不写method属性,就是显示提交</span></span><br><span class="line"><span class="comment">			4.enctype: 表示数据提交时的编码方式</span></span><br><span class="line"><span class="comment">			重置按钮</span></span><br><span class="line"><span class="comment">				必须在fomr中使用,用于重置表单中输入框中的值,让 输入框的值回到默认状态,不等于清空</span></span><br><span class="line"><span class="comment">			提交按钮</span></span><br><span class="line"><span class="comment">				必须用在form表单中,用于提交表单(在h5规范中,提交按钮也可以写在form外面),但是要通过form属性指定表单id</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在html5中可以把提交按钮放外面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot; form1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--好处是可以对同一个form设置多个提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆1&quot;</span> <span class="attr">form</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">formmethod</span>=<span class="string">&quot;get&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆2&quot;</span> <span class="attr">form</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;https://www.sougou.com&quot;</span> <span class="attr">formmethod</span>=<span class="string">&quot;post&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-3-布局标签"><a href="#3-3-布局标签" class="headerlink" title="3.3 布局标签"></a>3.3 布局标签</h2><blockquote>
<p>用于对网页中俄的视图组件,进行排版</p>
</blockquote>
<h3 id="3-3-1-标题"><a href="#3-3-1-标题" class="headerlink" title="3.3.1 标题"></a>3.3.1 标题</h3><blockquote>
<p>h标签提供了默认的标题样式,html中提供了h1到h6六组标签,逐级递减</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-2-段落"><a href="#3-3-2-段落" class="headerlink" title="3.3.2 段落"></a>3.3.2 段落</h3><blockquote>
<p>p标签: html可以将文档分割成多个段落</p>
<p>hr标签: 水平分割线</p>
<p>br标签: 表示换行</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>枫桥夜泊<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h5</span>&gt;</span>张继<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">		月落乌啼霜满天,<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		江枫渔火对愁眠.<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		姑苏城外寒山寺,<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		夜半钟声到客船.<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		静夜思<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		李白<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		床前明月光,<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		疑是地上霜.<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		举头望明月,<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		低头思故乡.<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-3-列表"><a href="#3-3-3-列表" class="headerlink" title="3.3.3 列表"></a>3.3.3 列表</h3><blockquote>
<p>将相关联的多条文本以列表的形式进行展示</p>
</blockquote>
<ol>
<li><strong>有序列表</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ol标签表示有序列表,li子标签表示列表项 </span></span><br><span class="line"><span class="comment">	type属性用于指定序号的类型 : 1、a、A、i和I罗马数字()</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>注册驱动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>创建连接<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>编写sql<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>加载sql<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>执行sql<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>获取结果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>关闭连接<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>无序列表</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ul标签表示无序列表</span></span><br><span class="line"><span class="comment">		type用于指定图标类型</span></span><br><span class="line"><span class="comment">		circle:空心圆</span></span><br><span class="line"><span class="comment">		square:方形实心图标</span></span><br><span class="line"><span class="comment">		disc:默认值,即实心圆</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;disc&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>注册驱动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>创建连接<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>编写sql<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>加载sql<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>执行sql<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>获取结果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>关闭连接<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>自定义列表</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">自定义列表</span><br><span class="line">	<span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dt</span>&gt;</span>分组1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dd</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dd</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dd</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dt</span>&gt;</span>分组2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dd</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="3-3-4-表格"><a href="#3-3-4-表格" class="headerlink" title="3.3.4 表格"></a>3.3.4 表格</h3><blockquote>
<p>在网页中显示一个表格,通过将页面html元素存放在表格的不同单元格,以达到设置元素布局的效果</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- table标签用于在网页定义表格,表格是由若干行组成.行被分割成多个单元格 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 表格(table) table中的属性设置的是整个表格的属性</span></span><br><span class="line"><span class="comment">		border:设置表格边框(同时设置表格的外边框和单元格的边框)</span></span><br><span class="line"><span class="comment">		cellspacing:设置单元格间隙</span></span><br><span class="line"><span class="comment">		cellpading: 设置单元格的内边距</span></span><br><span class="line"><span class="comment">		height、width:设置当前表格的宽度和高度</span></span><br><span class="line"><span class="comment">		align:用于设置当前表格在网页中的水平位置</span></span><br><span class="line"><span class="comment">		bgcolor:设置表格颜色</span></span><br><span class="line"><span class="comment">		background:设置背景图</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 行(tr table row) 一对tr标签表示表格中的一行 </span></span><br><span class="line"><span class="comment">		tr属性的设置只影响当前行,对其他行没有影响</span></span><br><span class="line"><span class="comment">		height:设置当前行的高度,如果不设置行高则平均分配</span></span><br><span class="line"><span class="comment">		bgcolor:设置当前行的背景色</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 单元格(td table data) 表示表格中的列</span></span><br><span class="line"><span class="comment">		width:设置单元格宽度,设置某一行单元格宽度,其他行同一列单元格宽度同步修改</span></span><br><span class="line"><span class="comment">		bgcolor:只设置当前单元格背景色</span></span><br><span class="line"><span class="comment">		valign:设置当前单元格的内容在当前单元格中的垂直位置(默认是midle)</span></span><br><span class="line"><span class="comment">		align:设置当前单元格内容在当前单元格的水平位置(默认center)</span></span><br><span class="line"><span class="comment">		colspan:横向合并单元格,设置当前单元格占几个单元格宽度</span></span><br><span class="line"><span class="comment">		rowspan:纵向合并单元格</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">height</span>=<span class="string">&quot;200&quot;</span><span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;bisque&quot;</span> <span class="attr">background</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;beige&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right &quot;</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="3-3-5-区块-div层"><a href="#3-3-5-区块-div层" class="headerlink" title="3.3.5 区块-div层"></a>3.3.5 区块-div层</h3><blockquote>
<p>区块元素: 在浏览器中进行显示的时候同城会有换行(例如p标签,table标签)</p>
<p>内联标签: 在浏览器中显示时,不会进行换行(例如lable,img)</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- div标签是一个层,也是一个html标签的容器</span></span><br><span class="line"><span class="comment">		 如果不设置宽度,默认宽度为父容器宽度(body就是div的父容器)</span></span><br><span class="line"><span class="comment">		 如果不设置高度,默认高度是与其中存放的元素高度相同</span></span><br><span class="line"><span class="comment">		 div中可以包含html标签,可以通过对div标签的设置实现htnk标签的堆叠</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 200px;border: 1px solid black;</span></span></span><br><span class="line"><span class="string"><span class="tag">		position: absolute;width: 0px;height: 0px;&quot;</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/Screen%20Shot%202022-04-11%20at%2022.04.45.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 200px;border: 1px solid red&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/Erics.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 200px;border: 1px solid green&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/Screen%20Shot%202022-04-11%20at%2022.04.45.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br></pre></td></tr></table></figure>



<h3 id="3-3-6-fields字段集"><a href="#3-3-6-fields字段集" class="headerlink" title="3.3.6  fields字段集"></a>3.3.6  fields字段集</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fieldset标签:网页中的视图模块,也是一个容器,默认带有边框,有内边距	</span></span><br><span class="line"><span class="comment">		legend子标签,用于设置当前模块区域的标题</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">legend</span>&gt;</span>🏀管理员登陆<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="3-4-功能标签"><a href="#3-4-功能标签" class="headerlink" title="3.4 功能标签"></a>3.4 功能标签</h2><blockquote>
<p>在网页中没有对应的视图效果,但是可以实现特定的功能</p>
<ul>
<li>form 表单,用于提交用户输入数据的</li>
<li>a 超链接</li>
</ul>
</blockquote>
<h3 id="3-4-1-form表单"><a href="#3-4-1-form表单" class="headerlink" title="3.4.1 form表单"></a>3.4.1 form表单</h3><p>参考3.2.5</p>
<h3 id="3-4-2-a-标签"><a href="#3-4-2-a-标签" class="headerlink" title="3.4.2 a 标签"></a>3.4.2 a 标签</h3><p><strong>超链接</strong>: 激活文本可点击,当点击这个特定的文本之后,链接到对应的地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a标签,超链接,:激活文本、图片链接</span></span><br><span class="line"><span class="comment">		 href:属性指定当前文本、图片的链接地址</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.qfedu.com&quot;</span>&gt;</span>我的网页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/s?wd=张韶涵&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/Erics.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>锚点</strong>:用于当前页面不同位置的跳转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转到锚点 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#1&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#3&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#4&quot;</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 定义锚点 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 1000px;background-color: bisque;&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 1000px;background-color: pink;&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 1000px;background-color: palegoldenrod;&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 1000px;background-color: peachpuff;&quot;</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-5-框架标签"><a href="#3-5-框架标签" class="headerlink" title="3.5 框架标签"></a>3.5 框架标签</h2><blockquote>
<p>实现页面的模块化</p>
<ul>
<li>frameset frame ,这一组数据因为存在session共享问题不建议使用</li>
<li>iframe</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;880&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;blanchedalmond&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>  <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;&quot;</span>&gt;</span>网址导航<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">					卫磊,欢迎你 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>[退出]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;lightgray&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">						<span class="comment">&lt;!-- 很多三方网站禁止链接 --&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.taobao.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;mainframe&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;page01-显示标签.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;mainframe&quot;</span>&gt;</span>自己的页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;mainframe&quot;</span>&gt;</span>b站<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">			    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!-- iframe表示一个页面的容器 通过name属性可以设置点击超链接以后,将页面显示到当前容器</span></span><br><span class="line"><span class="comment">					1.给iframe标签设置name属性</span></span><br><span class="line"><span class="comment">					2.给超链接a标签设置target等于iframe的那么属性值</span></span><br><span class="line"><span class="comment">					 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;mainframe&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="3-6-其他标签"><a href="#3-6-其他标签" class="headerlink" title="3.6 其他标签"></a>3.6 其他标签</h2><h3 id="3-6-1-文本修饰"><a href="#3-6-1-文本修饰" class="headerlink" title="3.6.1 文本修饰"></a>3.6.1 文本修饰</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体显示<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>加重语气<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">em</span>&gt;</span>强调<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">small</span>&gt;</span>小号文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		10<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">		10<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-6-2-计算机输出相关"><a href="#3-6-2-计算机输出相关" class="headerlink" title="3.6.2 计算机输出相关"></a>3.6.2 计算机输出相关</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 计算机输出标签,出了字体有所改变,更多的是语义上的设定 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">code</span>&gt;</span>System.out.print(&quot;计算机代码&quot;)<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">kbd</span>&gt;</span> Ctrl+L<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">var</span>&gt;</span>程序变量<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">pre</span>&gt;</span>预定义格式<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-6-3-引用"><a href="#3-6-3-引用" class="headerlink" title="3.6.3 引用"></a>3.6.3 引用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>上海市<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">address</span>&gt;</span>闵行区<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">		和我一起学<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;Java Database Conectivity&quot;</span>&gt;</span>java<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>定义文字方向<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br><span class="line">		毛泽东同志说<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>从前有座山<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>









<h1 id="四、HTML页面设计案例"><a href="#四、HTML页面设计案例" class="headerlink" title="四、HTML页面设计案例"></a>四、HTML页面设计案例</h1><hr>
<blockquote>
<p>案例: 使用HTML标签,完成华为商城的登陆页面的设计</p>
</blockquote>
<h2 id="4-1-模仿页面分析"><a href="#4-1-模仿页面分析" class="headerlink" title="4.1 模仿页面分析"></a>4.1 模仿页面分析</h2><img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-12 at 17.45.11.png" alt="Screen Shot 2022-04-12 at 17.45.11" style="zoom:50%;" />



<h2 id="4-2-按照页面进行设计"><a href="#4-2-按照页面进行设计" class="headerlink" title="4.2 按照页面进行设计"></a>4.2 按照页面进行设计</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;860&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;35&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#eeeeee&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;35&quot;</span>/&gt;</span></span><br><span class="line">					|磊哥购物</span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 35px;&quot;</span>&gt;</span>账号登陆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/baidu.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 12px;color: lightgray;&quot;</span> &gt;</span>若使用华为手机,可进入设置进行登陆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">height</span>=<span class="string">&quot;350&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;手机号、邮箱、地址、账号名&quot;</span> /&gt;</span> </span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> /&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>使用短信验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span> /&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>忘记密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>遇到问题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/Screen%20Shot%202022-04-12%20at%2018.35.49.png&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40%&quot;</span> /&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#eeeeee&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>华为账号用户协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于华为账号与隐私声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>常见问题<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Cookies<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					华为所有 版权所有 2011-2022</span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h1 id="一、-x3D-x3D-CSS基础-x3D-x3D"><a href="#一、-x3D-x3D-CSS基础-x3D-x3D" class="headerlink" title="一、&#x3D;&#x3D;CSS基础&#x3D;&#x3D;"></a>一、&#x3D;&#x3D;CSS基础&#x3D;&#x3D;</h1><hr>
<blockquote>
<p>HTML标签决定了网页的内容,CSS能对html标签显示效果进行设置</p>
</blockquote>
<h2 id="1-1-style属性"><a href="#1-1-style属性" class="headerlink" title="1.1 style属性"></a>1.1 style属性</h2><blockquote>
<p>几乎所有的HTML标签都可以添加一个&#x3D;&#x3D;style&#x3D;&#x3D;属性,在style属性值中设置&#x3D;&#x3D;样式属性&#x3D;&#x3D;来设置当前html标签显示效果</p>
</blockquote>
<ul>
<li>标签属性 : 在HTML标签中添加的键值对</li>
<li>样式属性 : HTML标签的style属性值中的键值对</li>
</ul>
<blockquote>
<p>style属性值(样式)的语法:<br>在style属性值中,可以添加多个样式属性,样式属性名与样式属性值之间以 : 隔开,两个样式属性之间用 ; 隔开</p>
</blockquote>
<h2 id="1-2-style标签"><a href="#1-2-style标签" class="headerlink" title="1.2 style标签"></a>1.2 style标签</h2><blockquote>
<p>style属性可以用来设置html样式,但如果在一个网页中有多个HTML标签需要用同样的样式,使用style属性会<br>在每个html标签中写重复的样式属性,若修改则需要修改所有,不方便维护,代码冗余度高</p>
<p>解决方案 : 我们可以将多个html标签公用的属性单独定义在style标签中</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="comment">/* css选择器:规定花括中的样式列表对哪些html标签有效 */</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">input</span>&#123;<span class="attribute">width</span>: <span class="number">270px</span>;<span class="attribute">height</span>: <span class="number">30px</span>&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">img</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">border-radius</span>: <span class="number">50%</span>;&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span>  /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/Screen%20Shot%202022-04-12%20at%2018.35.49.png&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="1-3-CSS层叠样式表"><a href="#1-3-CSS层叠样式表" class="headerlink" title="1.3 CSS层叠样式表"></a>1.3 CSS层叠样式表</h2><blockquote>
<p>CSS (Cascading Style Sheet) 层叠样式表</p>
<p>style标签中定义的,可以供网页中html标签复用的样式列表</p>
<p>层叠样式表,在style标签中定义的多个样式表,可以叠加作用在同一个html标签上</p>
</blockquote>
<p><strong>css基础语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器&#123;样式属性1: 样式属性值1;样式属性2:样式属性值2....&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-4-CSS选择器"><a href="#1-4-CSS选择器" class="headerlink" title="1.4 CSS选择器"></a>1.4 CSS选择器</h2><blockquote>
<p>作用:声明此样式列表对网页中哪些html标签有效</p>
<ul>
<li>ID选择器</li>
</ul>
</blockquote>
<h3 id="1-4-1-ID选择器"><a href="#1-4-1-ID选择器" class="headerlink" title="1.4.1 ID选择器"></a>1.4.1 ID选择器</h3><ul>
<li><p>语法 : &#x3D;&#x3D;#idValue{样式列}&#x3D;&#x3D;</p>
</li>
<li><p>作用范围 : 对当前网页中id属性值为idValue的标签有效,通常用于对某一个标签定义时使用</p>
</li>
<li><p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  /* 1.ID选择器 */</span><br><span class="line">		#img1&#123;width: 200px;height: 200px;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img2&quot;</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-2-标签选择器"><a href="#1-4-2-标签选择器" class="headerlink" title="1.4.2 标签选择器"></a>1.4.2 标签选择器</h3><ul>
<li><p>语法 : tagName{样式列表}</p>
</li>
<li><p>作用范围 : 对当前网页中所有tagName都有效</p>
</li>
<li><p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  /* 2.标签选择器 */</span><br><span class="line">		 img&#123;border: 5px pink solid;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-3-class选择器"><a href="#1-4-3-class选择器" class="headerlink" title="1.4.3 class选择器"></a>1.4.3 class选择器</h3><ul>
<li><p>语法 : .className{}</p>
</li>
<li><p>作用范围 : 对当前网页中所有class为className的标签有效</p>
</li>
<li><p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">/* 3.class选择器,以.开头 对当前网页class=&quot;borderStyle的标签有效&quot; */</span><br><span class="line">		.borderStyle&#123;border: 5px blue solid; border-radius:50%;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;borderStyle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img2&quot;</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-5-CSS文件"><a href="#1-5-CSS文件" class="headerlink" title="1.5 CSS文件"></a>1.5 CSS文件</h2><blockquote>
<p>在一个html文件中,如果有多个html标签,需要用相同的样式,可以将公用的样式定义在当前网页的style标签中,如果多个网页的<br>html标签需要使用相同的样式,则需要定义css文件来处理</p>
</blockquote>
<ul>
<li><p>在项目下创建css目录,在目录内创建css.file</p>
</li>
<li><p>在css文件内定义需要使用的样式,注意,在css文件内定义样式不需要用style标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 样式表定义在css文件,无需使用style标签 */</span><br><span class="line">.btnStyle&#123;</span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 35px;</span><br><span class="line">			border: none;</span><br><span class="line">			background-color: lightblue;</span><br><span class="line">			border-radius: 5px; </span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要引用此样式的页面内的head标签内添加link标签来引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>03<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btnStyle&quot;</span>&gt;</span>按钮1.1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btnStyle&quot;</span>&gt;</span>按钮1.2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在一个网页文件汇总可以用link引用多个css文件,同时可以添加style标签,定义当前网页专属样式表</p>
</li>
</ul>
<h1 id="二、CSS常用样式设置"><a href="#二、CSS常用样式设置" class="headerlink" title="二、CSS常用样式设置"></a>二、CSS常用样式设置</h1><hr>
<blockquote>
<p>css可以用于设置HTML标签的显示效果,那么HTML标签可以设置哪些显示效果呢?</p>
</blockquote>
<h2 id="2-1-CSS盒子模型"><a href="#2-1-CSS盒子模型" class="headerlink" title="2.1 CSS盒子模型"></a>2.1 CSS盒子模型</h2><blockquote>
<p>基于html标签的嵌套和并列关系,我们可以用形象的盒子的嵌套和堆放关系来理解常见css样式模型</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-13 at 10.30.41.png" alt="Screen Shot 2022-04-13 at 10.30.41" style="zoom: 67%;" />



<h2 id="2-2-尺寸样式"><a href="#2-2-尺寸样式" class="headerlink" title="2.2 尺寸样式"></a>2.2 尺寸样式</h2><ul>
<li>width </li>
<li>height</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="comment">/* 尺寸样式</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		1.css样式中设置尺寸值需要带上单位: px像素 ,html标签属性值是不需要px的</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		2.如果同时设置宽度和高度可能会导致比例失调,所以只用设置其中之一,另一个等比缩放*/</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.sizeStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="2-3-边框样式"><a href="#2-3-边框样式" class="headerlink" title="2.3 边框样式"></a>2.3 边框样式</h2><ul>
<li>border-color</li>
<li>border-style</li>
<li>border-width</li>
<li>&#x3D;&#x3D;border 同时设置以上三种样式(顺序不限,以空格分割)&#x3D;&#x3D;</li>
<li>border-top<ul>
<li>border-top-style</li>
<li>border-top-coloe</li>
<li>….</li>
</ul>
</li>
<li>border-bottom</li>
<li>border-left</li>
<li>border-right</li>
</ul>
<ol>
<li>任何一个html组件,边框分为上下左右四个边框, 我们也可以单独设置</li>
<li>组件的上下左右边框也可以单独设置样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">&lt;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.borderStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 边框颜色,可以是颜色名,也可以是RGB(#ffffff),</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			还可以是GRB或rgba函数:rgba(num,num,num,num)a代表透明度*/</span></span></span><br><span class="line"><span class="language-css">			<span class="comment">/* border-color:rgba(238,162,164,0.7); */</span></span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 常用边框样式:solid实线,dotted点状虚线,dashed段状虚线,</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			double双实线但至少边框3像素*/</span></span></span><br><span class="line"><span class="language-css">			<span class="comment">/* border-style: solid; */</span></span></span><br><span class="line"><span class="language-css">			<span class="comment">/* border-width: 2px; */</span></span></span><br><span class="line"><span class="language-css">			<span class="comment">/* border:rgba(238,162,164,0.7) solid 2px;*/</span></span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-top</span>:<span class="number">#0000ff</span> double <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">  /style&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="2-4-边框圆角及阴影"><a href="#2-4-边框圆角及阴影" class="headerlink" title="2.4 边框圆角及阴影"></a>2.4 边框圆角及阴影</h2><ul>
<li>border-radius : 置边框圆角:可以给像素,也可以给百分比总而言之都是看多少像素的矩形内做内切圆</li>
<li>box-shadow  : 设置阴影,四个参数:阴影颜色、x轴偏移、y轴偏移、渲染</li>
</ul>
<ol>
<li>如果border-radius设置边框圆角,有以下三种设置值方式<ol>
<li>border-radius:10px 同时设置四个圆角</li>
<li>border-radius: 0px,10px;分别设置左上和右下角</li>
<li>border-radius: 0px,50px,100px,150px; 同时设置四个角</li>
</ol>
</li>
<li>区域性显示的元素都可以设置阴影</li>
</ol>
<h2 id="2-5-背景样式设置"><a href="#2-5-背景样式设置" class="headerlink" title="2.5 背景样式设置"></a>2.5 背景样式设置</h2><ul>
<li>background-color</li>
<li>background-image</li>
<li>&#x3D;&#x3D;background&#x3D;&#x3D;</li>
<li>background-position</li>
<li>background-repeat</li>
</ul>
<ol>
<li>当我们设置背景颜色的时候,区域的所有范围都是设置定的颜色</li>
<li>当我们设置背景图时,图片可能和区域范围不匹配<ol>
<li>图片过大我们可以进行偏移设置</li>
<li>图片过小我们可以设置平铺方式</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.backgroundStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* background-color: rgba(196,203,207,0.8);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				background-image: url(imgs/水滴.jpeg); */</span></span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 设置背景颜色或图片 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">imgs/logo.jpeg</span>);</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 设置图片偏移 */</span></span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 同时设置图片在水平和方向上的位移 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">				负数表示向左、向上移动</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				*/</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-position</span>: -<span class="number">150px</span> -<span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* background-repeat: repeat;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				background-repeat: repeat-x;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				background-repeat: repeat-x; */</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h2 id="2-6-外边距"><a href="#2-6-外边距" class="headerlink" title="2.6 外边距"></a>2.6 外边距</h2><blockquote>
<p>html标签与富容器边框的距离,如果存在同级标签,也指与同级标签的距离</p>
</blockquote>
<p>以左和上为准</p>
<ul>
<li>margin可以设置1,2,4个参数,一个参数设置4个方向外边距,两个参数分别设置上下和左右外边距<br>四个参数同时设置4个方向外边距(上右下左)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">&lt;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 外边距:上外边距和左外边距*/</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.marginSytle</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin-left</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin-top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin-right</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">  /style&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="2-7-内边距"><a href="#2-7-内边距" class="headerlink" title="2.7 内边距"></a>2.7 内边距</h2><blockquote>
<p>内边距:设置当前容器标签中的内容距离当前容器边框的距离</p>
</blockquote>
<p>内边距和外边距一样,可以分开设置,也可以通过padding属性一起设置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 内边距不会占据内容宽度,会增加元素整体大小,但增加的那那内边距不能塞内容 */</span><br><span class="line">			.paddingStyle&#123;</span><br><span class="line">				/* padding-left:100px;</span><br><span class="line">				padding-top: 50px;</span><br><span class="line">				padding-right: 100px;</span><br><span class="line">				padding-bottom: 50px; */</span><br><span class="line">				/* 上下左右 */</span><br><span class="line">				padding: 50px;</span><br><span class="line">				/* 上下,左右 */</span><br><span class="line">				padding: 50px 100px;</span><br><span class="line">				/* 上右下左 */</span><br><span class="line">				padding: 0px 50px 100px 200px ;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2-8-字体样式"><a href="#2-8-字体样式" class="headerlink" title="2.8 字体样式"></a>2.8 字体样式</h2><blockquote>
<p>设置网页中的文本的显示样式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 自定义字体</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			  1.下载字体文件(ttf格式)</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			   2.在目录下创建font文件,将ttf文件粘贴进来</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			   3.根据字体文件自定义字体</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			*/</span></span></span><br><span class="line"><span class="language-css">			<span class="keyword">@font</span>-<span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-family</span>:磊哥专用字体;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">font/梅干手写体.ttf</span>);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.fontStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-family</span>: 磊哥专用字体;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="2-9-文本样式"><a href="#2-9-文本样式" class="headerlink" title="2.9 文本样式"></a>2.9 文本样式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 文本样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.textStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 设置文本水平对其方式 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-align</span>: center; </span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 文本装饰 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* text-underline-color: #FFC0CB; */</span></span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 设置文本阴影 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-shadow</span>: <span class="number">#00FFFF</span> <span class="number">2px</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="2-10-列表样式"><a href="#2-10-列表样式" class="headerlink" title="2.10 列表样式"></a>2.10 列表样式</h2><blockquote>
<p>主要针对有序列表、无序列表、自定义类表等样式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.listStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置列表前图标样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">list-style-type</span>: somali;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置列表项图标位置 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">list-style-position</span>: outside;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">list-style-image</span>:  ;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;listStyle&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>pears<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-11-分列显示"><a href="#2-11-分列显示" class="headerlink" title="2.11 分列显示"></a>2.11 分列显示</h2><blockquote>
<p>将一个容器下的html标签分列显示,在容器中会分成多列,高度会保持基本一致—瀑布模型</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">3000px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ADD8E6</span> solid;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置div容器的外边距,上下100px,左右居中 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>:<span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置容器分列的列数 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">column-count</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置分列后列与列间的分割线样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">column-rule</span>: blue <span class="number">3px</span> dashed;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置每一列的宽度(默认列宽等于容器宽度➗列数)*/</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">column-width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置列与列之间的空隙 (默认0)*/</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">column-gap</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/水滴.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/水滴.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/水滴.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/水滴.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="2-12-超链接-伪类"><a href="#2-12-超链接-伪类" class="headerlink" title="2.12 超链接(伪类)"></a>2.12 超链接(伪类)</h2><blockquote>
<p>超链接伪类为了设置超链接在不同状态下的样式</p>
<p>以超链接展开伪类的用法,以下展示超链接及按钮的伪类用法</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 未激活(访问)的超链接是蓝色的</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				鼠标点击下去是红色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				激活后的超链接是紫色的</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				如何修改不同状态下的超链接的颜色呢?--使用超链接伪类</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				*/</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 如果使用color设置超链接颜色,三种状态都是同一个颜色 */</span></span></span><br><span class="line"><span class="language-css">				<span class="comment">/* color: gray; */</span></span></span><br><span class="line"><span class="language-css">				</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* a:link 表示超链接的初始状态 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 鼠标悬停样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: <span class="number">#ADD8E6</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 超链接鼠标点下去的样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 激活后的超链接样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: <span class="number">#00FFFF</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.btnStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: cyan <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: <span class="number">#008000</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.btnStyle</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background</span>:gold;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: <span class="number">#00FFFF</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span> Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btnStyle&quot;</span>&gt;</span></span><br><span class="line">			测试</span><br><span class="line">		<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="2-13-CSS布局"><a href="#2-13-CSS布局" class="headerlink" title="2.13 CSS布局"></a>2.13 CSS布局</h2><blockquote>
<p>DIV层h是html标签容器,我们可以将HTML标签放到div容器中,通过css改变div的排列方式<br>可以实现对html元素的布局,DIV+CSS布局:</p>
<ul>
<li>绝对布局</li>
<li>相对布局</li>
<li>浮动布局</li>
</ul>
</blockquote>
<h3 id="2-13-1-绝对布局"><a href="#2-13-1-绝对布局" class="headerlink" title="2.13.1 绝对布局"></a>2.13.1 绝对布局</h3><p><strong>使用 position &#x3D; absolute 设置绝对布局</strong></p>
<blockquote>
<p>​      使用position&#x3D;absolute设置div为绝对布局<br>            1. 如果div标签直接写在body中,设置为绝对布局,div的位置参考的是浏览器边框<br>            2. 如果div标签写在父容器内,设置为绝对布局,div的不是参考父容器,而是参考浏览器边框<br>            3. 只要父容器div设置了position,父容器里面的div布局就是参考父容器边框</p>
</blockquote>
<p><strong>使用 position &#x3D; fixed 设置绝对布局</strong></p>
<blockquote>
<p>使用fixed设置绝对布局:则任何时候,div的位置都是参考浏览器</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="comment">/* body标签在浏览器中默认是有边距的,为了让body元素紧挨着浏览器边缘</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		 我们通常对padding和margin进行设置0px来消除边距*/</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* div块级元素默认换行,高度默认和内容一样高,宽度默认和父容器一样宽 */</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="comment">/* div+css布局*/</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 设置div布局方式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">position</span>: fixed;<span class="comment">/*绝对布局*/</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">left</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">top</span>:<span class="number">200px</span>;			</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">left</span>: <span class="number">450px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">left</span>: <span class="number">275px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">top</span>: <span class="number">375px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background-color</span>: <span class="number">#ADD8E6</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 使用position=absolute设置div为绝对布局</span></span><br><span class="line"><span class="comment">		1.如果div标签直接写在body中,设置为绝对布局,div的位置参考的是浏览器边框</span></span><br><span class="line"><span class="comment">		 2.如果div标签写在父容器内,设置为绝对布局,div的不是参考父容器,而是参考浏览器边框</span></span><br><span class="line"><span class="comment">		 3.只要父容器div设置了position,父容器里面的div布局就是参考父容器边框</span></span><br><span class="line"><span class="comment">		 我们也可以使用fixed设置绝对布局:</span></span><br><span class="line"><span class="comment">		 则任何时候,div的位置都是参考浏览器</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/水滴.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-13-2-相对布局"><a href="#2-13-2-相对布局" class="headerlink" title="2.13.2 相对布局"></a>2.13.2 相对布局</h3><blockquote>
<p>相对布局,就是设置html标签(div)相对于自己原来位置的偏移量</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border</span>:<span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="comment">/* div有相对位置: 相对布局就是参考相对位置的偏移量*/</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background-color</span>: <span class="number">#ADD8E6</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/水滴.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="2-13-3-浮动布局"><a href="#2-13-3-浮动布局" class="headerlink" title="2.13.3 浮动布局"></a>2.13.3 浮动布局</h3><blockquote>
<p>float样式属性,使div在当前容器中浮动起来,浮动方式有两种:left|right</p>
<p>clear样式属性可以终止浮动布局</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border</span>: <span class="number">1px</span> solid orange;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="comment">/* css复合选择器: id=container里面的标签选择器 */</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#container</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 浮动 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background</span>:green;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background</span>:blue;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div4</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background</span>: purple;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div5</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">clear</span>: both;	</span></span><br><span class="line"><span class="language-css">           &#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div4&quot;</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div5&quot;</span>&gt;</span>div5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="2-14-2D-amp-3D"><a href="#2-14-2D-amp-3D" class="headerlink" title="2.14 2D&amp;3D"></a>2.14 2D&amp;3D</h2><blockquote>
<p>CSS3中提供了一些关于jtml标签视图的2D及3D的视角转换</p>
<ul>
<li>偏移</li>
<li>旋转</li>
<li>缩放</li>
<li>拉伸</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background</span>:lemonchiffon;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* display: inline; */</span></span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="comment">/* transfor样式属性用于对html标签进行2D和3D转换</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		 样式属性值为一个函数,不同的函数实现不同的转换</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		 1.translate 偏移 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">			1.tanslate()双参数:同时设置横向和纵向偏移</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			2.translateX() translateY()*/</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="comment">/* rotate旋转</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		transform: rotate()</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		transform: rotateZ()和totate效果一样,沿z轴旋转</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		transform: rotateX()</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		transform: rotateY()</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		 */</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		<span class="comment">/* 缩放 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">		scale(0.5)高度和宽度同时变为原来一半</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		也可以给两个参数,设置宽和高</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		scaleX() scaleY()</span></span></span><br><span class="line"><span class="comment"><span class="language-css">		*/</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		<span class="comment">/* 拉伸skew,参数是角度scale*/</span></span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#div4</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">30deg</span> );</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-15动画自定义"><a href="#2-15动画自定义" class="headerlink" title="2.15动画自定义"></a>2.15动画自定义</h2><blockquote>
<p>可以借助CSS实现HTML元素的动画</p>
</blockquote>
<h3 id="2-15-1-过渡"><a href="#2-15-1-过渡" class="headerlink" title="2.15.1 过渡"></a>2.15.1 过渡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 样式过度</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			参数1:过度的样式名(样式属性名)</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			参数2:过度时间</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			参数3:设置过度效果(ease:慢快慢 ease-in:慢快 ease-out:快 linear:匀速)</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			参数4:延迟时间</span></span></span><br><span class="line"><span class="comment"><span class="language-css">			*/</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">transition</span>: transform <span class="number">3s</span> linear <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-15-2-动画"><a href="#2-15-2-动画" class="headerlink" title="2.15.2 动画"></a>2.15.2 动画</h3><blockquote>
<p>动画就是由一帧一帧的画面连续播放形成的</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> xuanzhuan&#123;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 元素原始状态 可以用from也可以用0% */</span></span></span><br><span class="line"><span class="language-css">			<span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 还可以有中间状态 */</span></span></span><br><span class="line"><span class="language-css">			<span class="number">50%</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 元素目标状态 ,可以用to,也可以用100%*/</span></span></span><br><span class="line"><span class="language-css">			<span class="number">25%</span>,<span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-id">#img2</span>&#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">animation</span>:xuanzhuan <span class="number">3s</span> linear <span class="number">2</span> ;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img2&quot;</span> <span class="attr">src</span>=<span class="string">&quot;imgs/龙猫单独.jpeg&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="三、用户界面设计"><a href="#三、用户界面设计" class="headerlink" title="三、用户界面设计"></a>三、用户界面设计</h1><blockquote>
<p>如果同一个网页用不同设备打开(pc,手机)打开网页,如何保证页面显示的美观和完整性</p>
</blockquote>
<h2 id="3-1-媒体查询"><a href="#3-1-媒体查询" class="headerlink" title="3.1 媒体查询"></a>3.1 媒体查询</h2><blockquote>
<p>使用css设置网页根据不同的显示设备,动态显示不同css样式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			*&#123;<span class="attribute">padding</span>: <span class="number">0px</span>;<span class="attribute">margin</span>: <span class="number">0px</span>;&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 当屏幕最小尺寸为1200显示如下样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: <span class="number">#ADD8E6</span>; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 当屏幕尺寸大于1000px且小于1200px时显示下列样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1000px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>)  &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: <span class="number">#FFC0CB</span>; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: darkgray; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">600px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: darkcyan; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="3-2-响应式布局"><a href="#3-2-响应式布局" class="headerlink" title="3.2 响应式布局"></a>3.2 响应式布局</h2><blockquote>
<p>不设置每行显示几个图片,当每行显示的图片个数随着父容器的宽度而动态变化</p>
</blockquote>
<h3 id="3-2-1-浮动布局"><a href="#3-2-1-浮动布局" class="headerlink" title="3.2.1 浮动布局"></a>3.2.1 浮动布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			*&#123;<span class="attribute">padding</span>: <span class="number">0px</span>;<span class="attribute">margin</span>: <span class="number">0px</span>;&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 当屏幕最小尺寸为1200显示如下样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: <span class="number">#ADD8E6</span>; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 当屏幕尺寸大于1000px且小于1200px时显示下列样式 */</span></span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1000px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>)  &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: <span class="number">#FFC0CB</span>; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: darkgray; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">600px</span>) &#123;</span></span><br><span class="line"><span class="language-css">				<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">background</span>: darkcyan; </span></span><br><span class="line"><span class="language-css">					<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#div1</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">210px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">box-shadow</span>: gray <span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">5px</span>; </span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-2-2-弹性盒子"><a href="#3-2-2-弹性盒子" class="headerlink" title="3.2.2 弹性盒子"></a>3.2.2 弹性盒子</h3><blockquote>
<p>父容器中的子标签不设置宽度&#x2F;高度的具体值,只设置在父容器中占据的宽度的比例,当父容器宽度发生变化时,<br>子表亲啊宽度对应发生变化</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			*&#123;<span class="attribute">padding</span>: <span class="number">0px</span>;<span class="attribute">margin</span>: <span class="number">0px</span>;&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.row</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">1350px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background</span>: lightblue; </span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#FFC0CB</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">				</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: flex;<span class="comment">/* 将父容器的div设置为弹性盒子 ,此容器相当于一个行,容器中的标签相当于行的列*/</span></span></span><br><span class="line"><span class="language-css">				<span class="comment">/*设置t弹性盒子主轴方向</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				row:左到右</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				row-reverse:右到左</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				column:上到下</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				column-reverse:下到上</span></span></span><br><span class="line"><span class="comment"><span class="language-css">				*/</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.row</span> <span class="selector-tag">div</span> &#123; </span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">box-shadow</span>: gray <span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">5px</span>; </span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* flex用于设置弹性盒中元素的标签所占比例 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#d1</span>&#123;<span class="attribute">flex</span>: <span class="number">1</span>;&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#d2</span>&#123;<span class="attribute">flex</span>: <span class="number">2</span>;&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#d3</span>&#123;<span class="attribute">flex</span>: <span class="number">2</span>;&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#d4</span>&#123;<span class="attribute">flex</span>: <span class="number">2</span>;&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#d5</span>&#123;<span class="attribute">flex</span>: <span class="number">1</span>;&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#d6</span>&#123;<span class="attribute">flex</span>: <span class="number">1</span>;&#125;	</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="x3D-x3D-一、JavaScript介绍-x3D-x3D"><a href="#x3D-x3D-一、JavaScript介绍-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;一、JavaScript介绍&#x3D;&#x3D;"></a>&#x3D;&#x3D;一、JavaScript介绍&#x3D;&#x3D;</h1><hr>
<blockquote>
<p>决定了网页标签的功能</p>
</blockquote>
<h2 id="1-1-JavaScript简介"><a href="#1-1-JavaScript简介" class="headerlink" title="1.1 JavaScript简介"></a>1.1 JavaScript简介</h2><blockquote>
<p>javascript是一种基于对象的、事件驱动型、解释型的脚本语言</p>
</blockquote>
<ul>
<li>基于对象(区别于面向对象) : Java和JavaScript语言一样可以通过对象调用方法</li>
<li>事件驱动: 网页文档中的html标签事件触发代码执行</li>
<li>解释型: 边解释边执行(不会先对网页文件进行编译生成中间文件)</li>
<li>脚本语言: JS不会独立运行,依赖于网页文件存在,即js要写在网页文件中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.btnStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btnStyle&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="1-2-JS发展史"><a href="#1-2-JS发展史" class="headerlink" title="1.2 JS发展史"></a>1.2 JS发展史</h2><blockquote>
<p>JS是一种嵌入在网页中的脚本语言,网页是通过浏览器加载并显示的,因此JS的执行是在浏览器中完成的<br>对于浏览器而言,他能执行JS语言,在浏览器中内嵌了JS的解释器(JS引擎)</p>
</blockquote>
<p>JavaScript的设计是为了网页文件的交互功能</p>
<p>JS是基于ECMAScript标准设计的,目前大部分浏览器兼容ES6,但为了保证浏览器对JS的普遍支持,在学习JS过程中<br>更多使用ES5的标准语法</p>
<h2 id="1-3-JavaScript作用"><a href="#1-3-JavaScript作用" class="headerlink" title="1.3 JavaScript作用"></a>1.3 JavaScript作用</h2><h3 id="1-3-1-JS可以做什么"><a href="#1-3-1-JS可以做什么" class="headerlink" title="1.3.1 JS可以做什么"></a>1.3.1 JS可以做什么</h3><ul>
<li>可以动态改变网页中HTML标签属性</li>
<li>可以动态改变网页中HTML标签的样式</li>
<li>可以对用户输入的数据进行合法性校验</li>
<li>可以动态操作(新增、删除、修改html标签)网页中的HTML标签</li>
<li>实现页面数据的异步通信</li>
</ul>
<h3 id="1-3-2-JS不可以做什么"><a href="#1-3-2-JS不可以做什么" class="headerlink" title="1.3.2 JS不可以做什么"></a>1.3.2 JS不可以做什么</h3><ul>
<li>JS不能访问用户的本地文件(虽然JS在用户的浏览器执行)</li>
<li>JS不能操作来自于不同服务器的网页文档</li>
</ul>
<h1 id="二、第一个JS程序"><a href="#二、第一个JS程序" class="headerlink" title="二、第一个JS程序"></a>二、第一个JS程序</h1><hr>
<h2 id="2-1-JavaScript写在哪里"><a href="#2-1-JavaScript写在哪里" class="headerlink" title="2.1 JavaScript写在哪里?"></a>2.1 JavaScript写在哪里?</h2><ul>
<li><p>JS代码写在html文档的script标签中,script标签可以写在html网页的任何位置<br>通常写在body标签的下面或body标签中的最后,并且一个html文档支持多个script标签<br>script的type属性可以不写，因为默认也是它</p>
</li>
<li><p>可以写在JS文件中,然后通过script标签去调用,且script必须为双标签,script标签用来引用文件后,则当前标签中不能<br>再自定义js代码了,如果要写代码,需要重新写一个js标签</p>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-15 at 11.47.47.png" alt="Screen Shot 2022-04-15 at 11.47.47" style="zoom:50%;" /></li>
</ul>
<h2 id="2-2-JS函数-方法-定义"><a href="#2-2-JS函数-方法-定义" class="headerlink" title="2.2 JS函数(方法)定义"></a>2.2 JS函数(方法)定义</h2><ul>
<li><p>我们将核心功能的JS代码,定义在一个函数中</p>
<ul>
<li><p>函数的定义语法:</p>
</li>
<li><pre><code class="javascript">function functionname(参数)&#123;
  //代码
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 示例</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    function()&#123;</span><br><span class="line">    	console.log(&quot;hello&quot;);//相当于System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="2-3-JS函数如何运行"><a href="#2-3-JS函数如何运行" class="headerlink" title="2.3 JS函数如何运行"></a>2.3 JS函数如何运行</h2><ul>
<li><p>通过HTML文档中的事件出发</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;test/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS/js01.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-4-查看浏览器的控制台输出"><a href="#2-4-查看浏览器的控制台输出" class="headerlink" title="2.4 查看浏览器的控制台输出"></a>2.4 查看浏览器的控制台输出</h2><ul>
<li>在谷歌浏览器下:command + option + j 打开控制台</li>
<li>在控制台console内查看结果</li>
</ul>
<h1 id="三、javascript语法"><a href="#三、javascript语法" class="headerlink" title="三、javascript语法"></a>三、javascript语法</h1><hr>
<h2 id="3-1-变量与数据类型"><a href="#3-1-变量与数据类型" class="headerlink" title="3.1 变量与数据类型"></a>3.1 变量与数据类型</h2><h3 id="3-1-1-数据类型"><a href="#3-1-1-数据类型" class="headerlink" title="3.1.1 数据类型"></a>3.1.1 数据类型</h3><blockquote>
<ul>
<li><p>java是强类型语言,存储不同类型的数据时要声明不同的数据类型</p>
</li>
<li><p>js是弱类型语言: </p>
<ul>
<li>变量无论存储神恶魔类型的数据一律用var声明</li>
<li>一个变量可以赋不同类型的数值</li>
<li>变量声明使用同一类型,但变量中存储的值是有类型的</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="3-1-2-变量"><a href="#3-1-2-变量" class="headerlink" title="3.1.2 变量"></a>3.1.2 变量</h3><ul>
<li><p>在js代码中,如果要使用变量,需要先声明</p>
</li>
<li><p>声明变量需要指定其类型,所有变量都可以使用var来声明</p>
</li>
<li><p>如果一个变量只完成了声明而没有初始化(赋值),则会输出undefine</p>
</li>
</ul>
<h3 id="3-1-3-不同变量的初始化"><a href="#3-1-3-不同变量的初始化" class="headerlink" title="3.1.3 不同变量的初始化"></a>3.1.3 不同变量的初始化</h3><ol>
<li><p>字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hello &quot;world&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10e5</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>布尔</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js中&#123;&#125;就表示对象类型,js对象的属性名可以直接定义,并且对象的属性支持扩展</span></span><br><span class="line"><span class="keyword">var</span> stu = &#123;<span class="attr">stuNum</span>:<span class="string">&#x27;10001&#x27;</span>,<span class="attr">stuName</span>:<span class="string">&#x27;lily&#x27;</span>&#125;</span><br><span class="line">stu.<span class="property">stuGender</span>=<span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>undefined 和 null</p>
<ul>
<li>如果一个对象只声明,没有初始化,输出undefined,标示变量没有值</li>
<li>通过将一个变量的值赋为mull来清空一个变量的值</li>
</ul>
</li>
</ol>
<h2 id="3-2-表达式"><a href="#3-2-表达式" class="headerlink" title="3.2 表达式"></a>3.2 表达式</h2><blockquote>
<p>就是由变量和运算符组合而成的代码</p>
</blockquote>
<ul>
<li>一个字符串和数字相加表示字符串拼接</li>
<li>&#x3D;&#x3D;&#x3D;() 绝对等于,值和类型都相同</li>
<li>switch语句执行步骤:先找到匹配的case,然后执行语句,然后寻找break,一直执行到有break为止;</li>
</ul>
<h2 id="3-3-循环"><a href="#3-3-循环" class="headerlink" title="3.3 循环"></a>3.3 循环</h2><ul>
<li><p>for循环,同java</p>
</li>
<li><p>in循环: 遍历JS对象和数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test2()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 40px;&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> stu = &#123;<span class="attr">stuName</span>:<span class="string">&#x27;Lily&#x27;</span>,<span class="attr">stuAge</span>:<span class="number">20</span>,<span class="attr">stuGender</span>:<span class="string">&quot;male&quot;</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">for</span>(v <span class="keyword">in</span> stu)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(v+<span class="string">&#x27;:&#x27;</span>+stu[v]);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">for</span>(i <span class="keyword">in</span> arr)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>While 和do while: 区别是do while不管符不符合条件一定会执行一次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function testWhile()&#123;</span><br><span class="line">			var i = 0;</span><br><span class="line">			while(i&lt;10)&#123;</span><br><span class="line">				console.log(i+&quot;⭐️&quot;);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			var j = 10;</span><br><span class="line">			do&#123;</span><br><span class="line">				console.log(j+&quot;🧜‍&quot;);</span><br><span class="line">			&#125;while(j&lt;10);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>continue 和 break的区别: continue跳出本次循环进入下一次循环,break,跳出所有循环</p>
</li>
</ul>
<h2 id="3-4-JS异常处理"><a href="#3-4-JS异常处理" class="headerlink" title="3.4 JS异常处理"></a>3.4 JS异常处理</h2><blockquote>
<p>js代码运行中,因为代码错误,数据错误,系统资源等原因都可能导致js执行过程的异常</p>
</blockquote>
<p>JS中的异常处理机制</p>
<ul>
<li>try : 检查包含的js代码是否出现错误</li>
<li>catch : 处理js中的错误</li>
<li>throw : 用于自定义错误</li>
<li>finally : 无论代码有误异常,里面的代码总会运行.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">testError</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> j = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">var</span> k = i/j;<span class="comment">//js中变量提升,将变量的声名提升至最前面</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">throw</span> <span class="string">&quot;分母不能为0&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(k);</span></span><br><span class="line"><span class="language-javascript">			&#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="四、JavaScript对象"><a href="#四、JavaScript对象" class="headerlink" title="四、JavaScript对象"></a>四、JavaScript对象</h1><hr>
<blockquote>
<p>基于对象: 通过对象完成属性、方法的调用</p>
</blockquote>
<h2 id="4-1-创建JS对象"><a href="#4-1-创建JS对象" class="headerlink" title="4.1 创建JS对象"></a>4.1 创建JS对象</h2><blockquote>
<p>在java中,先定义类,通过类的构造器创建对象,创建的这个对象具有类中的属性,并且能够调用这个类中定义的方法</p>
<p>在JS中对象创建:</p>
<ul>
<li>通过{ }创建</li>
<li>通过构造器创建对象</li>
</ul>
</blockquote>
<h3 id="4-1-1-直接创建"><a href="#4-1-1-直接创建" class="headerlink" title="4.1.1 直接创建"></a>4.1.1 直接创建</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">testObj</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&quot;Lily&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">test1</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;;</span></span><br><span class="line"><span class="language-javascript">			obj.<span class="title function_">test1</span>();</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-1-2-使用js构造器创建"><a href="#4-1-2-使用js构造器创建" class="headerlink" title="4.1.2 使用js构造器创建"></a>4.1.2 使用js构造器创建</h3><blockquote>
<p>在js中没有类的概念,但可以定义构造器</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">num,name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">stuNum</span> = num;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">stuName</span> = name;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 定义函数方式一</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">method1</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//定义函数方式二</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">method2</span> = myMethod2;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">myMethod2</span>(<span class="params">a</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">testObj2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;Lily&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;Jack&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(s2);</span></span><br><span class="line"><span class="language-javascript">			s1.<span class="title function_">method1</span>();</span></span><br><span class="line"><span class="language-javascript">			s2.<span class="title function_">method2</span>(<span class="string">&quot;hahahah&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="4-2-JavsScript扩展属性"><a href="#4-2-JavsScript扩展属性" class="headerlink" title="4.2 JavsScript扩展属性"></a>4.2 JavsScript扩展属性</h2><blockquote>
<p>扩展属性—对象本没有某个属性,但我们可以对其新增</p>
</blockquote>
<h3 id="4-2-1-对象扩展属性"><a href="#4-2-1-对象扩展属性" class="headerlink" title="4.2.1 对象扩展属性"></a>4.2.1 对象扩展属性</h3><p>对象创建好后,我们可以通过 &#x3D;&#x3D;对象.新属性&#x3D;属性值&#x3D;&#x3D;这种方式给当前对象新增属性,这个新增的对象只有当前对象<br>可以使用,即使通过相同构造器创建的另一个对象,也不可以使用.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&quot;Lily&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">test1</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;;</span></span><br><span class="line"><span class="language-javascript">			obj.<span class="property">age</span> = <span class="number">21</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-2-构造函数扩展属性"><a href="#4-2-2-构造函数扩展属性" class="headerlink" title="4.2.2 构造函数扩展属性"></a>4.2.2 构造函数扩展属性</h3><p>针对构造器方式创建js对象,我们可以扩展构造器的属性,当扩展构造器属性之后,此构造器的所有对象都有这个属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">num,name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">stuNum</span> = num;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">stuName</span> = name;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">testObj2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;Lily&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;Jack&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//拓展构造器属性</span></span></span><br><span class="line"><span class="language-javascript">			<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">stuGender</span>=<span class="string">&quot;男&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="五、JavaScript内置对象"><a href="#五、JavaScript内置对象" class="headerlink" title="五、JavaScript内置对象"></a>五、JavaScript内置对象</h1><hr>
<h2 id="5-2-内置对象介绍"><a href="#5-2-内置对象介绍" class="headerlink" title="5.2 内置对象介绍"></a>5.2 内置对象介绍</h2><h3 id="5-1-1-什么是JS内置对象"><a href="#5-1-1-什么是JS内置对象" class="headerlink" title="5.1.1 什么是JS内置对象"></a>5.1.1 什么是JS内置对象</h3><blockquote>
<p>JavaScript引擎预定义了一些构造器,并且在构造器中定义了一些能够完成特定功能的函数,通过这些构造器我们可以直接创建对象<br>创建的对象就可以调用函数完成功能</p>
<p>js内置对象,通过javascript预定义构造器创建的对象</p>
</blockquote>
<h3 id="5-1-2-JS提供了哪些构造器"><a href="#5-1-2-JS提供了哪些构造器" class="headerlink" title="5.1.2 JS提供了哪些构造器?"></a>5.1.2 JS提供了哪些构造器?</h3><table>
<thead>
<tr>
<th>构造器名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Array</strong></td>
<td>数组集合,在此构造器中定义了可以对数组进行操作的函数</td>
</tr>
<tr>
<td><strong>String</strong></td>
<td>字符串,其中定义了对字符串进行截取、分割、正则校验操作的函数</td>
</tr>
<tr>
<td><strong>Date</strong></td>
<td>对日期操作</td>
</tr>
<tr>
<td><strong>Math</strong></td>
<td>数学,定义了数学运算:绝对值、三角函数、四舍五入等</td>
</tr>
<tr>
<td>Number</td>
<td>数值,包含对数值进行操作的函数</td>
</tr>
<tr>
<td>RegExp</td>
<td>正则表达式,用于对字符串进行正则校验</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔</td>
</tr>
<tr>
<td>Object</td>
<td>公用对象</td>
</tr>
<tr>
<td>Error</td>
<td>用于异常处理</td>
</tr>
<tr>
<td><strong>Functions</strong></td>
<td>顶层对象,Functions–全局属性, Functions函数称为全局函数</td>
</tr>
<tr>
<td>Events</td>
<td>事件对象 例如按钮发生了点击事件</td>
</tr>
</tbody></table>
<h2 id="5-2-String对象"><a href="#5-2-String对象" class="headerlink" title="5.2 String对象"></a>5.2 String对象</h2><blockquote>
<p>String构造器创建的对象</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">testString</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> str1 = <span class="string">&quot;www.baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;www.baidu.com&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> len = str1.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> c = str1.<span class="title function_">charAt</span>(<span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i = str1.<span class="title function_">indexOf</span>(<span class="string">&quot;edu&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> j = str2.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;o&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr = str1.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s1 = str1.<span class="title function_">substring</span>(<span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 从第四个(包含)截取到第九个(不包含)</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s2 = str2.<span class="title function_">substring</span>(<span class="number">4</span>,<span class="number">9</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 从第四个开始截取5个</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s3 = str1.<span class="title function_">substr</span>(<span class="number">4</span>,<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s4 = str2.<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s5 = str2.<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> str3 = <span class="string">&quot;18837782201&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 正则表达式以^开头,$结尾,中括号表示第二个数字只能是括号内的数字,\是转义字符,其实</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 只需要一个\,第一个\是为了转义转义字符,d&#123;&#125;代表循环,花括号内的数字代表循环次数</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> reg = <span class="string">&quot;^1[3,5,7,8]\\d[9]$&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// match:判断格式是否符合reg规则,匹配则返回字符串本身,不匹配则返回null</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> b = str3.<span class="title function_">match</span>(reg);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="5-3-正则表达式RegExp"><a href="#5-3-正则表达式RegExp" class="headerlink" title="5.3 正则表达式RegExp"></a>5.3 正则表达式RegExp</h2><blockquote>
<p>专门用于对字符串的格式进行规则的检查(规则:通过正则表达式来体现)</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testErgExp()&quot;</span>&gt;</span>test RegExp<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">testErgExp</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//以下两种方式都可以进行正则校验</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> str3 = <span class="string">&quot;18837782201&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> reg = <span class="string">&quot;^1[3,5,7,8]\\d&#123;9&#125;$&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> a = str3.<span class="title function_">match</span>(reg);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//-----------------------------------</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//使用REgExp对象的test方法进行校验</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> tel = <span class="string">&quot;18805603241&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 一个RegExp对象就是一个正则的规则</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^1[3,5,7,8]\\d&#123;9&#125;$&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 这个返回true和false</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> b = reg.<span class="title function_">test</span>(tel);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式:"></a>正则表达式:</h3><ol>
<li><p>特殊符号</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>任意数字,相当于[0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>空白字符</td>
</tr>
<tr>
<td>\b</td>
<td>单词便捷</td>
</tr>
<tr>
<td>\u????</td>
<td>匹配unicode字符</td>
</tr>
</tbody></table>
</li>
<li><p>区间</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>[0-9]</td>
<td>任意一个数字</td>
</tr>
<tr>
<td>[1357]或[1,3,5,7]</td>
<td>区间的任意一个数字</td>
</tr>
<tr>
<td>[a-z]</td>
<td>任意一个小写字母</td>
</tr>
<tr>
<td>[A-Z]</td>
<td>任意一个大写字母</td>
</tr>
<tr>
<td>[a-zA-Z]</td>
<td>任意一个字母</td>
</tr>
<tr>
<td>[0-9a-zA-Z]</td>
<td>任意字母和数字</td>
</tr>
</tbody></table>
</li>
<li><p>量词</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>a+</td>
<td>至少一个a</td>
</tr>
<tr>
<td>a*</td>
<td>0到n个a</td>
</tr>
<tr>
<td>a?</td>
<td>0或1个a</td>
</tr>
<tr>
<td>a[m]</td>
<td>m个a</td>
</tr>
<tr>
<td>a[m,n]</td>
<td>m到n个a</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="5-4-Math"><a href="#5-4-Math" class="headerlink" title="5.4 Math"></a>5.4 Math</h2><blockquote>
<p>Math中提供的函数可以直接调用,无需创造对象</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testMath</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 常量</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 自然底数</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> e = <span class="title class_">Math</span>.<span class="property">E</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 圆周率</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> p = <span class="title class_">Math</span>.<span class="property">PI</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//random:在0到1之间产生一个随机数</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> num1 = <span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 四舍五入</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> num2 = <span class="title class_">Math</span>.<span class="title function_">round</span>(num1);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 只舍不入</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>(num2);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 只入不舍</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> j2 = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(num2);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 绝对值</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> j3 = <span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 平方根</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> j4 = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-5-Array对象"><a href="#5-5-Array对象" class="headerlink" title="5.5 Array对象"></a>5.5 Array对象</h2><blockquote>
<p>数组: 存放一组相同数据类型的数据结构</p>
<p>在js中,同一个数组可以岑房多种不同类型的数据,相当于java等强类型语言中的结合</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//创建数组:1.构造器;2.静态初始化</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//数组元素添加:索引可以不连续,数组长度=最大索引+1</span></span></span><br><span class="line"><span class="language-javascript">				arr1[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">				arr1[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">				arr1[<span class="number">5</span>] = <span class="string">&#x27;c&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//遍历</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr1.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[i]);</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">for</span>(v <span class="keyword">in</span> arr1)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[v]);</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//Array中的方法</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//将数组中所有的元素用字符拼接</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s1 = arr1.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//截取操作,第一个参数是起点(包含),第二个参数是重点(不包含)</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s2 = arr1.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//反转数组</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr4 = arr3.<span class="title function_">reverse</span>();</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-6-日期对象"><a href="#5-6-日期对象" class="headerlink" title="5.6 日期对象"></a>5.6 日期对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testDate()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//设置当前日期对象</span></span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setFullYear</span>(<span class="number">2022</span>);</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setMonth</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setDate</span>(<span class="number">28</span>)</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 获取年份:相对于1900年的迁移年份</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i1 = date.<span class="title function_">getYear</span>()+<span class="number">1900</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 获取公元年</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//获取的是0到11,所以一般加1</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i2 = date.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i3 = date.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//24小时制</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i4 = date.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//获取星期</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i5 = date.<span class="title function_">getDay</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i6 = date.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i7 = date.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i8 = date.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> i9 = date.<span class="title function_">getMilliseconds</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(year);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> str = year+i2+i3;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-7-Functions对象"><a href="#5-7-Functions对象" class="headerlink" title="5.7 Functions对象"></a>5.7 Functions对象</h2><blockquote>
<p>全剧对象: 全局对象是一个预定义的对象, 作为js的中全局函数的占位符,通过全局对象<br>可以访问所有js中的全局函数,全局属性</p>
<p>全局对象不是任何对象的属性,所以没有名称,可以直接调用.</p>
<p>我们将全局函数归纳到Functions对象,但functions并不是真正存在的对象,在js中,window对象作为顶层对象,<br>在语法上可以通过window对象调用全局函数 例如 window,eval();</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testFunction()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">testFunction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//通过全局对象funtions调用全局函数,但functions没有对象名,因此可以直接调用</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s1 = <span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> i1 = <span class="built_in">parseInt</span>(s1);</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s2 = <span class="string">&quot;3.14&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> i2 = <span class="built_in">parseFloat</span>(s2);</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s3 = <span class="string">&quot;www.baidu.com?param=你好 &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//对网址参数部分进行编码(特殊符号、中文)</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s5 = <span class="built_in">encodeURI</span>(s3);</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//编码后的网址解码解码</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s4 = <span class="built_in">decodeURI</span>(s3);</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//对普通字符串进行编码</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> str1 = <span class="string">&quot;my name is 卫磊&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s6 = <span class="built_in">escape</span>(str1);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(s6);</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//解码</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s7 = <span class="built_in">unescape</span>(str1);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(s7);</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//当一个字符串满足JS中的对象格式(JSON对象),我们可以通过eval转换成对象格式</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> jsonStr = <span class="string">&quot;&#123;stuName:&#x27;Lily&#x27;,stuGender:&#x27;Lily&#x27;,stuAge:20&#125;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> stu = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span>+jsonStr+<span class="string">&quot;)&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">stuName</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h1 id="六、BOM浏览器对象模型"><a href="#六、BOM浏览器对象模型" class="headerlink" title="六、BOM浏览器对象模型"></a>六、BOM浏览器对象模型</h1><hr>
<h2 id="6-1-BOM介绍"><a href="#6-1-BOM介绍" class="headerlink" title="6.1 BOM介绍"></a>6.1 BOM介绍</h2><blockquote>
<p>Browser Object Model 浏览器对象模型</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-16 at 10.55.43.png" alt="Screen Shot 2022-04-16 at 10.55.43" style="zoom:50%;" />

<p>JS编写在网页文档(document)中,网页文档运行在浏览器窗口(window)中,像document以及window这样的对象也称为js宿主对象</p>
<h2 id="6-2-window对象"><a href="#6-2-window对象" class="headerlink" title="6.2 window对象"></a>6.2 window对象</h2><blockquote>
<p>window对象是BOM模型中的顶层容器,表示打开的浏览器窗口</p>
</blockquote>
<h3 id="6-2-1-获取window对象"><a href="#6-2-1-获取window对象" class="headerlink" title="6.2.1 获取window对象"></a>6.2.1 获取window对象</h3><blockquote>
<p>window对象是所有浏览器都支持的,是浏览器内置的对象,在js代码中可以直接使用</p>
<p>哪怕是同一段代码打开的两个不同窗口,他们的window对象也是不一样的</p>
</blockquote>
<h3 id="6-2-2-window对象属性"><a href="#6-2-2-window对象属性" class="headerlink" title="6.2.2 window对象属性"></a>6.2.2 window对象属性</h3><ol>
<li><p>BOM对象属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testWindow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//BOM对象属性</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> v = <span class="variable language_">window</span>.<span class="property">navigator</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s = <span class="variable language_">window</span>.<span class="property">screen</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> l = <span class="variable language_">window</span>.<span class="property">location</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> h = <span class="variable language_">window</span>.<span class="property">history</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> d = <span class="variable language_">window</span>.<span class="property">document</span>;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器窗口属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testWindow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//获取当前浏览器窗口的名字</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> name = <span class="variable language_">window</span>.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//获取、设置当前浏览器窗口的状态栏</span></span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="property">status</span> = <span class="string">&quot;⭐️&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 当前窗口是否关闭</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> s = <span class="variable language_">window</span>.<span class="property">closed</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 获取浏览器内部宽度、高度</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> oh = <span class="variable language_">window</span>.<span class="property">outerHeight</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> ow = <span class="variable language_">window</span>.<span class="property">outerWidth</span>;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>窗口对象属性</p>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-16 at 11.26.44.png" alt="Screen Shot 2022-04-16 at 11.26.44" style="zoom:50%;" />

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testWindow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// self就是当前窗口本身,等价于windows对象</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="property">self</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//如果当前网页是显示在令另一个网页的iframe中,parednt就表示获取当前窗口的上一级窗口</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> p = <span class="variable language_">window</span>.<span class="property">parent</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//获取当前窗口的顶层容器</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> t = <span class="variable language_">window</span>.<span class="property">top</span>;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-2-3-window对象函数"><a href="#6-2-3-window对象函数" class="headerlink" title="6.2.3 window对象函数"></a>6.2.3 window对象函数</h3><ol>
<li><strong>弹窗函数</strong></li>
</ol>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testWindow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 弹窗函数</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// alert:警告提示框,无返回值</span></span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;你好&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//消息确认框,当用户进行不可逆且影响数据的操作,有返回值,用户点击确定,返回true,其他时候返回false</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> v = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;请问你确定删除信息嘛&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//用户交互输入框,参数一:弹窗问题提示信息,参数二:输入框的默认值</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> userName = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;please input you name&quot;</span>,<span class="string">&quot;name is &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(userName);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>打开</strong>、<strong>关闭窗口操作</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 弹窗函数</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// alert:警告提示框,无返回值</span></span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;你好&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//消息确认框,当用户进行不可逆且影响数据的操作,有返回值,用户点击确定,返回true,其他时候返回false</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> v = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;请问你确定删除信息嘛&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//用户交互输入框,参数一:弹窗问题提示信息,参数二:输入框的默认值</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> userName = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;please input you name&quot;</span>,<span class="string">&quot;name is &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//关闭当前窗口</span></span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 打开新窗口(url,name,features,replace)</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数一:表示新打开的窗口显示的网址</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数二:新打开窗口的名字</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 参数三:新打开窗口的属性</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数四:是否替换当前窗口</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//返回值:打开的窗口对象</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> url = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> features = <span class="string">&quot;width=400,height=300,location=0,top=300,left=500&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>(url,<span class="string">&quot;baidu&quot;</span>,features,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(w);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>channelmode&#x3D;yes|no|1|0</th>
<th>是否使用剧院模式显示窗口,默认为no</th>
</tr>
</thead>
<tbody><tr>
<td>directores&#x3D;yes|no|1|0</td>
<td>是否添加目录按钮,目录为yes</td>
</tr>
<tr>
<td>fullscreen&#x3D;yes|no|1|0</td>
<td>是否使用全屏模式显示浏览器,默认是no,处于全屏模式的窗口必须同时处于剧院模式</td>
</tr>
<tr>
<td>height&#x3D;pixels</td>
<td>窗口文档显示区的高度,以像素计</td>
</tr>
<tr>
<td>left&#x3D;pixels</td>
<td>窗口的x坐标以像素计</td>
</tr>
<tr>
<td>location&#x3D;yes|no|1|0</td>
<td>是否显示地址字段,默认是yes</td>
</tr>
<tr>
<td>menubar&#x3D;yes|no|1|0</td>
<td>是否显示菜单栏,默认是yes</td>
</tr>
<tr>
<td>resizable&#x3D;yes|no|1|0</td>
<td>窗口是否可调节尺寸,默认是yes</td>
</tr>
<tr>
<td>scrollbar&#x3D;yes|no|1|0</td>
<td>是否显示滚动条,默认是yes</td>
</tr>
<tr>
<td>status&#x3D;yes|no|1|0</td>
<td>是否添加状态栏,默认yes</td>
</tr>
<tr>
<td>titlebar&#x3D;yes|no|1|0</td>
<td>是否显示标题栏,默认yes</td>
</tr>
<tr>
<td>toolbar&#x3D;yes|no|1|0</td>
<td>是否显示浏览器工具栏,默认yes</td>
</tr>
<tr>
<td>top&#x3D;pixels</td>
<td>窗口的y坐标</td>
</tr>
<tr>
<td>width&#x3D;pixels</td>
<td>窗口的文档显示区域宽度,以像素计</td>
</tr>
</tbody></table>
</li>
<li><p><strong>串口操作函数</strong></p>
<blockquote>
<p>对浏览器进行尺寸设置、位置设置、滚动条操作等的函数</p>
</blockquote>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testWindow</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//打开新窗口,返回值w就是新打开的窗口,即w本身就是一个window对象</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://www.qfedu.com&quot;</span>,<span class="string">&quot;千峰&quot;</span>,<span class="string">&quot;width=400,height=300&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//1.修改窗口尺寸</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//将w窗口尺寸修改为*,*</span></span></span><br><span class="line"><span class="language-javascript">				w.<span class="title function_">resizeTo</span>(<span class="number">800</span>,<span class="number">600</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//在原有的长宽基础上,增加*,*</span></span></span><br><span class="line"><span class="language-javascript">				w.<span class="title function_">resizeBy</span>(<span class="number">800</span>,<span class="number">600</span>);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//2.改变窗口的位置</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 将窗口移动到指定的位置</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数1:窗口距离屏幕左边的距离</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数2:表示窗口与屏幕顶端的距离</span></span></span><br><span class="line"><span class="language-javascript">				w.<span class="title function_">moveTo</span>(<span class="number">200</span>,<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="title function_">moveBy</span>(<span class="number">200</span>,<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//3.滚动滚动条(针对当前窗口的操作,对子窗口不太行)</span></span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">500</span>,<span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(-<span class="number">100</span>,-<span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>延时&#x2F;循环任务</strong></li>
</ol>
<p><strong>延时任务</strong>:延迟指定时间后再调用任务</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test1()&quot;</span>&gt;</span>打开延时<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test2()&quot;</span>&gt;</span>关闭延时<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> task1 ;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//setTimeOut:延时调用指定方法</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数一:调用的方法</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数二:延迟的时间,单位毫秒</span></span></span><br><span class="line"><span class="language-javascript">				task1 = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;showDate()&quot;</span>,<span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">showDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setFullYear</span>(<span class="number">2022</span>);</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setMonth</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setDate</span>(<span class="number">28</span>)</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setHours</span>(<span class="number">14</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> datee = date.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> hours = date.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> min = date.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> seconds = date.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> str = year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+datee+<span class="string">&quot; &quot;</span>+hours+<span class="string">&quot;:&quot;</span>+min+<span class="string">&quot;:&quot;</span>+seconds;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//关闭未执行的任务</span></span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(task1);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>循环任务</strong>:间隔指定的时间,循环调用指定任务</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test1()&quot;</span>&gt;</span>打开循环任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test2()&quot;</span>&gt;</span>关闭循环任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> task2 ;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//setInterval:启动循环任务</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数一:调用的方法</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//参数二:指定间隔的时间</span></span></span><br><span class="line"><span class="language-javascript">				task2 = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="string">&quot;showDate()&quot;</span>,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">showDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setFullYear</span>(<span class="number">2022</span>);</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setMonth</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setDate</span>(<span class="number">28</span>)</span></span><br><span class="line"><span class="language-javascript">				date.<span class="title function_">setHours</span>(<span class="number">14</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> datee = date.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> hours = date.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> min = date.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> seconds = date.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> str = year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+datee+<span class="string">&quot; &quot;</span>+hours+<span class="string">&quot;:&quot;</span>+min+<span class="string">&quot;:&quot;</span>+seconds;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//关闭正在进行的循环任务</span></span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(task2);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="6-3-screen对象"><a href="#6-3-screen对象" class="headerlink" title="6.3 screen对象"></a>6.3 screen对象</h2><blockquote>
<p>screen 对象,表示网页显示的硬件设备的屏幕</p>
<p>screen对象是一个只读对象,它收集硬件屏幕的相关参数,我们可以通过此对象获取当前屏幕终端的相关参数</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testScreen</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//1 获取屏幕的宽度和高度,和分辨率相关</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> w = screen.<span class="property">width</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> h = screen.<span class="property">height</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//2 获取屏幕的可见宽度、高度,即除去状态栏的大小</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> aw = screen.<span class="property">availWidth</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> ah = screen.<span class="property">availHeight</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//3 获取屏幕一英寸的物理像素点</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> xdpi = screen.<span class="property">deviceXDPI</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> ydpi = screen.<span class="property">deviceYDPI</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(xdpi+<span class="string">&quot;,&quot;</span>+ydpi);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;	</span></span><br><span class="line"><span class="language-javascript">			</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-4-navigator对象"><a href="#6-4-navigator对象" class="headerlink" title="6.4 navigator对象"></a>6.4 navigator对象</h2><blockquote>
<p>navigator对象包含了浏览器相关的信息</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//返回浏览器的名称,只不过现在的浏览器内核大多统一了,是NetScape</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> name = navigator.<span class="property">appName</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> code = navigator.<span class="property">appCodeName</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> version = navigator.<span class="property">appVersion</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> language = navigator.<span class="property">browserLanguage</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//检查当前浏览器是否使用cookie</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> b = navigator.<span class="property">cookieEnabled</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(b);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;	</span></span><br><span class="line"><span class="language-javascript">			</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-5-location对象"><a href="#6-5-location对象" class="headerlink" title="6.5 location对象"></a>6.5 location对象</h2><blockquote>
<p>location 对象表示表示当前浏览器窗口的地址信息,通过此对象可以获取地址栏信息,以及设置地址栏信息</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 获取地址栏完成的网址 http://addr:port/aa?key=value</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//                   协议   地址  端口  路径 参数</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s1 = location.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s2 = location.<span class="property">protocol</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s3 = location.<span class="property">port</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s4 = location.<span class="property">host</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s5 = location.<span class="property">hostname</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> s6 = location.<span class="property">pathname</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//⭐️修改地址栏完整网址,进行跳转</span></span></span><br><span class="line"><span class="language-javascript">			location.<span class="property">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//location对象的函数</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//重新载入当前网页</span></span></span><br><span class="line"><span class="language-javascript">			location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 使用指定的网址替换当前网址,实现跳转</span></span></span><br><span class="line"><span class="language-javascript">			location.<span class="title function_">replace</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>);	</span></span><br><span class="line"><span class="language-javascript">			&#125;	</span></span><br><span class="line"><span class="language-javascript">			</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-6-history对象"><a href="#6-6-history对象" class="headerlink" title="6.6 history对象"></a>6.6 history对象</h2><blockquote>
<p>history对象包含了用户在当前浏览器窗口中访问过的url</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-16 at 18.59.33.png" alt="Screen Shot 2022-04-16 at 18.59.33" style="zoom:50%;" />

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		This is page a</span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;b.html&quot;</span>&gt;</span>go to page b<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test1()&quot;</span>&gt;</span>👈<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test2()&quot;</span>&gt;</span>👉<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test3()&quot;</span>&gt;</span>历史记录数量<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 返回上一个页面</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// history.back();</span></span></span><br><span class="line"><span class="language-javascript">				histoty.<span class="title function_">go</span>(-<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 切换到下一个页面</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// history.forward();</span></span></span><br><span class="line"><span class="language-javascript">				history.<span class="title function_">go</span>(+<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> len = history.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(len);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>













<h1 id="七、DOM文档对象模型"><a href="#七、DOM文档对象模型" class="headerlink" title="七、DOM文档对象模型"></a>七、DOM文档对象模型</h1><hr>
<h2 id="7-1-文档对象模型介绍"><a href="#7-1-文档对象模型介绍" class="headerlink" title="7.1 文档对象模型介绍"></a>7.1 文档对象模型介绍</h2><blockquote>
<p>DOM树—对于一个网页文件来说,我们可以类比为一棵树,根标签HTML看作树根,文档中所有的标签都可以理解为<br>这棵树上的树枝或叶子</p>
<p>通过DOM树结构,我们可以有序的获取或操作文档中任何一个子标签</p>
</blockquote>
<h3 id="7-1-1-DOM树模型"><a href="#7-1-1-DOM树模型" class="headerlink" title="7.1.1 DOM树模型"></a>7.1.1 DOM树模型</h3><img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-16 at 21.45.36.png" alt="Screen Shot 2022-04-16 at 21.45.36" style="zoom:50%;" />



<h3 id="7-1-2-相关术语"><a href="#7-1-2-相关术语" class="headerlink" title="7.1.2 相关术语"></a>7.1.2 相关术语</h3><p>元素 : 标签以及标签所包含的内容</p>
<p>元素属性 : 标签的属性</p>
<p>节点 : 元素、属性、文本统称为节点(元素–标签节点、属性–属性节点、文本–文本节点)</p>
<p>节点名称 : 标签节点节点名标签名、属性节点的节点名就是属性名,文本节点的节点名是text</p>
<h2 id="7-2-document对象"><a href="#7-2-document对象" class="headerlink" title="7.2 document对象"></a>7.2 document对象</h2><p>document对象指代的就是一个网页文档,document对象提供的属性、函数大多都是获取网页文档中的元素</p>
<h3 id="7-2-1-集合属性"><a href="#7-2-1-集合属性" class="headerlink" title="7.2.1 集合属性"></a>7.2.1 集合属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">testDocument</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr = <span class="variable language_">document</span>.<span class="property">all</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 获取网页标签中的所有images</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr2 = <span class="variable language_">document</span>.<span class="property">images</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 获取当前网页文档中所有的连接</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr3 = <span class="variable language_">document</span>.<span class="property">links</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//获取当前网页文档中的form元素</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr4 = <span class="variable language_">document</span>.<span class="property">forms</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-其他属性"><a href="#7-2-2-其他属性" class="headerlink" title="7.2.2 其他属性"></a>7.2.2 其他属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前网页中的body标签</span></span><br><span class="line">				<span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">				<span class="keyword">var</span> title = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line">				<span class="keyword">var</span> url = <span class="variable language_">document</span>.<span class="property">URL</span>;</span><br><span class="line">				<span class="keyword">var</span> cs = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line">				<span class="comment">//向cookie添加新数据</span></span><br><span class="line">				<span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="string">&quot;key=value&quot;</span>;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br></pre></td></tr></table></figure>



<h3 id="7-2-3-函数"><a href="#7-2-3-函数" class="headerlink" title="7.2.3 函数"></a>7.2.3 函数</h3><ul>
<li>流操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//write:打开一个输出流,并通过输出流将数据展示到网页中,会覆盖原网页内容</span></span><br><span class="line">				<span class="comment">//如果这个流不关闭,则这个流输出的内容会追加到网页中</span></span><br><span class="line">				<span class="comment">//close()关闭当前网页输出流</span></span><br><span class="line">				<span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">				<span class="variable language_">document</span>.<span class="title function_">close</span>();</span><br><span class="line">				<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">				<span class="comment">// 打开并使用一个新的流</span></span><br><span class="line">				<span class="variable language_">document</span>.<span class="title function_">open</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>获取网页元素的函数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 根据标签的属性id获取元素</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 根据name获取元素</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;22&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 根据class获取一组标签</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;cc&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//根据标签名获取元素</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> arr3 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="7-3-对HTML标签的操作"><a href="#7-3-对HTML标签的操作" class="headerlink" title="7.3 对HTML标签的操作"></a>7.3 对HTML标签的操作</h2><p>对html标签的操作主要指的是标签属性操作和标签样式操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.imgStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">200px</span>;      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img2&quot;</span> <span class="attr">src</span>=<span class="string">&quot;imgs/龙猫单独.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img3&quot;</span> <span class="attr">src</span>=<span class="string">&quot;imgs/可达鸭.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test1()&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test2()&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			 <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				 <span class="keyword">var</span> img3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img3&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				 <span class="comment">//获取属性值(标签对象.标签属性名)</span></span></span><br><span class="line"><span class="language-javascript">				 <span class="keyword">var</span> s = img3.<span class="property">src</span>;</span></span><br><span class="line"><span class="language-javascript">				 <span class="comment">//设置属性值</span></span></span><br><span class="line"><span class="language-javascript">				 img3.<span class="property">src</span> = <span class="string">&quot;imgs/龙猫单独.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			 &#125;</span></span><br><span class="line"><span class="language-javascript">			 <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				 <span class="keyword">var</span> img2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				 <span class="comment">// 操作标签样式(标签.style.标签样式名),样式属性名是以-分割多个单词</span></span></span><br><span class="line"><span class="language-javascript">				 <span class="keyword">var</span> m = img2.<span class="property">style</span>.<span class="property">border</span>;</span></span><br><span class="line"><span class="language-javascript">				 <span class="comment">//设置标签样式属性</span></span></span><br><span class="line"><span class="language-javascript">				 img2.<span class="property">style</span>.<span class="property">border</span>=<span class="string">&quot;5px rgba(255,0,0,0.5) solid&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				  <span class="comment">//在js中操作要使用驼峰命名</span></span></span><br><span class="line"><span class="language-javascript">				 img2.<span class="property">style</span>.<span class="property">borderRadius</span>=<span class="string">&quot;50%&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			 &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//**标签对象的class属性要以className进行操作**</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">className</span>=<span class="string">&quot;imgStyle&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="7-4-案例-表单数据校验"><a href="#7-4-案例-表单数据校验" class="headerlink" title="7.4 案例: 表单数据校验"></a>7.4 案例: 表单数据校验</h2><h3 id="7-4-1-案例说明"><a href="#7-4-1-案例说明" class="headerlink" title="7.4.1 案例说明"></a>7.4.1 案例说明</h3><blockquote>
<p>在网页中的数据提交时,如果必须填写的数据没有填写完整或者填写信息不符合要求,表单不允许提交</p>
<p>在网页中通过js进行数据完整性及合法性校</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/Screen Shot 2022-04-17 at 10.17.27.png" alt="Screen Shot 2022-04-17 at 10.17.27" style="zoom:50%;" />

<p><strong>检验规则:</strong></p>
<ul>
<li>账号:不能为空;长度8~20之间;只能包含数字和字母</li>
<li>密码 : 不能为空;长度8~16之间;</li>
<li>确认密码 : 要与密码一致</li>
<li>手机号 : 不能为空;满足手机号规则</li>
<li>邮箱 : 不能为空;满足邮箱格式</li>
</ul>
<h3 id="7-4-2-实现"><a href="#7-4-2-实现" class="headerlink" title="7.4.2 实现"></a>7.4.2 实现</h3><ol>
<li><p>js文件:form_validate</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doValidate</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始校验&quot;</span>);</span><br><span class="line">	<span class="comment">//校验用户名</span></span><br><span class="line">	<span class="comment">// var userNameInputTag = document.getElementById(&quot;userNameInput&quot;);</span></span><br><span class="line">	<span class="comment">// var userName = userNameInputTag.value;</span></span><br><span class="line">	<span class="keyword">var</span> userName = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userNameInput&quot;</span>).<span class="property">value</span>;</span><br><span class="line">	<span class="keyword">var</span> label1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userNameTipsLabel&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(userName==<span class="literal">null</span> || userName==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">		<span class="comment">//进行提示</span></span><br><span class="line">		<span class="comment">//通过innerHTML属性修改标签对象</span></span><br><span class="line">		label1.<span class="property">innerHTML</span> = <span class="string">&quot;请输入用户名!&quot;</span>;</span><br><span class="line">		label1.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(userName.<span class="property">length</span>&lt;<span class="number">8</span>||userName.<span class="property">length</span>&gt;<span class="number">20</span>)&#123;</span><br><span class="line">		label1.<span class="property">innerHTML</span> = <span class="string">&quot;长度在8到20个字符之间!&quot;</span>;</span><br><span class="line">		label1.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^[0-9a-zA-Z]*$&quot;</span>).<span class="title function_">test</span>(userName))&#123;</span><br><span class="line">		label1.<span class="property">innerHTML</span> = <span class="string">&quot;用户名只允许包含数字和字母!&quot;</span>;</span><br><span class="line">		label1.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//进入else表示用户名合法</span></span><br><span class="line">		label1.<span class="property">innerHTML</span>=<span class="string">&quot;用户名输入无误!&quot;</span>;</span><br><span class="line">		label1.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//校验密码</span></span><br><span class="line">	<span class="keyword">var</span> userPwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwd&quot;</span>).<span class="property">value</span>;</span><br><span class="line">	<span class="keyword">var</span> label2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userPwdTipsLabel&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(userPwd==<span class="literal">null</span> || userPwd==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">		label2.<span class="property">innerHTML</span>=<span class="string">&quot;请输入密码!&quot;</span>;</span><br><span class="line">		label2.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(userPwd.<span class="property">length</span>&lt;<span class="number">8</span>||userPwd.<span class="property">length</span>&gt;<span class="number">16</span>)&#123;</span><br><span class="line">		label2.<span class="property">innerHTML</span> = <span class="string">&quot;密码长度为8到16字符!&quot;</span>;</span><br><span class="line">		label2.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		label2.<span class="property">innerHTML</span>=<span class="string">&quot;密码输入正确!&quot;</span>;</span><br><span class="line">		label2.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//校验确认密码</span></span><br><span class="line">	<span class="keyword">var</span> rePwd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwd&quot;</span>).<span class="property">value</span>;</span><br><span class="line">	<span class="keyword">var</span> label3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;reUserPwdTipsLabel&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(rePwd==<span class="literal">null</span> || rePwd==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">		label3.<span class="property">innerHTML</span>=<span class="string">&quot;请输入密码!&quot;</span>;</span><br><span class="line">		label3.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(rePwd!=userPwd)&#123;</span><br><span class="line">		label3.<span class="property">innerHTML</span>=<span class="string">&quot;两次密码输入不一致!&quot;</span>;</span><br><span class="line">		label3.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		label3.<span class="property">innerHTML</span>=<span class="string">&quot;密码一致!&quot;</span>;</span><br><span class="line">		label3.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//校验手机</span></span><br><span class="line">	<span class="keyword">var</span> userTel = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userTel&quot;</span>).<span class="property">value</span>;</span><br><span class="line">	<span class="keyword">var</span> label4 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userTelTipsLabel&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(userTel==<span class="string">&quot;&quot;</span>||userTel==<span class="literal">null</span>)&#123;</span><br><span class="line">		label4.<span class="property">innerHTML</span>=<span class="string">&quot;请输入手机号!&quot;</span>;</span><br><span class="line">		label4.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^1[3,5,7,8]\\d&#123;9&#125;$&quot;</span>).<span class="title function_">test</span>(userTel))&#123;</span><br><span class="line">		label4.<span class="property">innerHTML</span>=<span class="string">&quot;请输入正确格式手机号!&quot;</span>;</span><br><span class="line">		label4.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		label4.<span class="property">innerHTML</span>=<span class="string">&quot;手机号格式正确!&quot;</span>;</span><br><span class="line">		label4.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//校验邮箱</span></span><br><span class="line">	<span class="keyword">var</span> userMail = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userMail&quot;</span>).<span class="property">value</span>;</span><br><span class="line">	<span class="keyword">var</span> label5 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userMailTipsLabel&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(userMail==<span class="literal">null</span>||userMail==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">		label5.<span class="property">innerHTML</span>=<span class="string">&quot;请输入邮箱!&quot;</span>;</span><br><span class="line">		label5.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;^[A-Za-z0-9-._]+@[A-Za-z0-9-]+(.[A-Za-z0-9]+)*(.[A-Za-z]&#123;2,6&#125;)$&quot;</span>).<span class="title function_">test</span>(userMail))&#123;</span><br><span class="line">				  label5.<span class="property">innerHTML</span>=<span class="string">&quot;请输入正确的邮箱!&quot;</span>;</span><br><span class="line">				  label5.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">				  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				  <span class="string">&quot;邮箱格式正确!&quot;</span>;</span><br><span class="line">				  label5.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">			  &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>regist.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/form_validate.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- onsubmit:表单提交事件,如果函数返回false,不提交,返回true,提交 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://baidu.com&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return doValidate()&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登陆-数据校验<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					账号:<span class="comment">&lt;!-- 对于输入框对象而言,value属性就是输入框的值 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;userNameInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;userNameTipsLabel&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					密码:</span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">&quot;userPwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;userPwdTipsLabel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					确认密码:</span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码&quot;</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;reUserPwdTipsLabel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					手机号:</span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;userTel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;userTelTipsLabel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					邮箱:</span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;userMail&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱账号&quot;</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;userMailTipsLabel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7-5-节点操作"><a href="#7-5-节点操作" class="headerlink" title="7.5 节点操作"></a>7.5 节点操作</h2><blockquote>
<p>元素、元素属性及文本都称之为节点</p>
<p>节点操作—使用js完成节点创建、插入节点、修改节点、删除节点等操作</p>
</blockquote>
<h3 id="7-5-1-节点属性"><a href="#7-5-1-节点属性" class="headerlink" title="7.5.1 节点属性"></a>7.5.1 节点属性</h3><table>
<thead>
<tr>
<th>节点类型</th>
<th>nodeType</th>
<th>nodeName</th>
<th>nodeValue</th>
</tr>
</thead>
<tbody><tr>
<td>标签节点</td>
<td>1</td>
<td>标签名</td>
<td>null</td>
</tr>
<tr>
<td>属性节点</td>
<td>2</td>
<td>属性名</td>
<td>属性值</td>
</tr>
<tr>
<td>文本节点</td>
<td>3</td>
<td>#text</td>
<td>文本内容</td>
</tr>
</tbody></table>
<p>对于html元素对象:</p>
<ul>
<li>tag.attributes ; 获取标签属性</li>
<li>tag.childNodes: 获取子标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 所有的标签对象都可以调用attributes属性获取当前标签的属性列</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 此数组中存放color和bgcolor两个属性</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> attrArray = body.<span class="property">attributes</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//属性节点</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> attrNode =  attrArray[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeName</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeValue</span>);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 所有的标签对象都可以通过childNodes属性获取当前标签子节点,包括标签节点和文本节点  </span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> nodesArr = body.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(nodesArr.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-5-2-创建新节点"><a href="#7-5-2-创建新节点" class="headerlink" title="7.5.2 创建新节点"></a>7.5.2 创建新节点</h3><blockquote>
<p>网页中原本没有此节点,通过js代码新建节点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> tagNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(tagNode.<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(tagNode.<span class="property">nodeName</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(tagNode.<span class="property">nodeValue</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeName</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(textNode.<span class="property">nodeValue</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> attrNode = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeName</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(attrNode.<span class="property">nodeValue</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-5-3-插入节点"><a href="#7-5-3-插入节点" class="headerlink" title="7.5.3 插入节点"></a>7.5.3 插入节点</h3><blockquote>
<p>将创建的节点载入到网页文档中</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 1 创建节点</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> imgTag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//-------------begin</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//2 创建属性节点</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// var srcAttr = document.createAttribute(&quot;src&quot;);</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// srcAttr.nodeValue = &quot;imgs/可达鸭,jpeg&quot;;</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//3 将属性节点添加到标签节点中</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// imgTag.setAttributeNode(srcAttr);</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//-------------end</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//4 一句话搞定</span></span></span><br><span class="line"><span class="language-javascript">				imgTag.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;imgs/可达鸭.jpeg&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				imgTag.<span class="title function_">setAttribute</span>(<span class="string">&quot;width&quot;</span>,<span class="string">&quot;200&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//也可以打点直接设置</span></span></span><br><span class="line"><span class="language-javascript">				imgTag.<span class="property">alt</span>=<span class="string">&quot;图片无法显示&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//5 移除属性</span></span></span><br><span class="line"><span class="language-javascript">				imgTag.<span class="title function_">removeAttribute</span>(<span class="string">&quot;alt&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//6 显示标签,appendChild:将标签节点拼接到body标签里面的最后面</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">				body.<span class="title function_">appendChild</span>(imgTag);</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//7 插入节点</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> btnTag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				body.<span class="title function_">insertBefore</span>(imgTag,btnTag);	</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-5-4-替换子节点"><a href="#7-5-4-替换子节点" class="headerlink" title="7.5.4 替换子节点"></a>7.5.4 替换子节点</h3><blockquote>
<p>如果使用新创建的节点去替换某个父节点的子节点,则直接替换</p>
<p>如果用已经存在的标签A去替换标签B,A会发生移动,并不是copy过去</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: aquamarine <span class="number">2px</span> solid;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span>&gt;</span>我是一个图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img3&quot;</span> <span class="attr">src</span>=<span class="string">&quot;imgs/logo.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn_test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>  /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//使用一个图片标签替换div中的p标签</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> imgTag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				imgTag.<span class="property">src</span> = <span class="string">&quot;imgs/龙猫单独.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				imgTag.<span class="property">width</span>=<span class="string">&quot;200&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//replaceTag(new,old) 替换子节点</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> parentTag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> oldChild = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				parentTag.<span class="title function_">replaceChild</span>(imgTag,oldChild);</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//替换节点 currentTag.replace(new tag);很多浏览器不支持</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// oldChild.replaceNode(imgTag);</span></span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//用已经存在的标签替换,用来替换的标签会移动</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> imgTag2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img3&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				parentTag.<span class="title function_">replaceChild</span>(imgTag2,oldChild);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-5-5-删除节点"><a href="#7-5-5-删除节点" class="headerlink" title="7.5.5 删除节点"></a>7.5.5 删除节点</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>);</span><br><span class="line">				<span class="keyword">var</span> p =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">				<span class="comment">//removeNode删除当前节点,但只被ie支持</span></span><br><span class="line">				<span class="comment">// p.removeNode(true);</span></span><br><span class="line">				<span class="comment">//删除子节点</span></span><br><span class="line">				div.<span class="title function_">removeChild</span>(p); </span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>







<h1 id="八、javascript事件"><a href="#八、javascript事件" class="headerlink" title="八、javascript事件"></a>八、javascript事件</h1><hr>
<blockquote>
<p>事件: 在网页文档中发生的行为(事件可以是网页文档加载过程中产生,也可以是用户认为操作)</p>
</blockquote>
<h2 id="8-1-JS事件绑定"><a href="#8-1-JS事件绑定" class="headerlink" title="8.1 JS事件绑定"></a>8.1 JS事件绑定</h2><blockquote>
<p>JS函数是痛殴网页事件驱动的,驱动的方式有两种: 内联方式和外联方式</p>
</blockquote>
<h3 id="8-1-1-HTML标签内联绑定"><a href="#8-1-1-HTML标签内联绑定" class="headerlink" title="8.1.1 HTML标签内联绑定"></a>8.1.1 HTML标签内联绑定</h3><p>在html标签上添加事件属性,绑定对应的js函数:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test1()&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="8-1-2-js脚本外联绑定"><a href="#8-1-2-js脚本外联绑定" class="headerlink" title="8.1.2 js脚本外联绑定"></a>8.1.2 js脚本外联绑定</h3><p>不再html标签上写事件属性,而是通过js获取html元素,调用事件属性来绑定js函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> &gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			btn2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="8-2-html常用事件"><a href="#8-2-html常用事件" class="headerlink" title="8.2 html常用事件"></a>8.2 html常用事件</h2><blockquote>
<ul>
<li>鼠标事件</li>
<li>键盘事件(表单标签)</li>
<li>窗体事件</li>
<li>表单事件</li>
</ul>
</blockquote>
<h3 id="8-2-1-鼠标事件"><a href="#8-2-1-鼠标事件" class="headerlink" title="8.2.1 鼠标事件"></a>8.2.1 鼠标事件</h3><blockquote>
<p>用户的鼠标在html标签上产生的点击、双击、移动、离开等动作</p>
</blockquote>
<ul>
<li><p>onclick 单机事件</p>
</li>
<li><p>ondblclick 双击事件</p>
</li>
<li><p>onmouseover 鼠标悬停事件</p>
</li>
<li><p>onmouseout 鼠标挪开事件</p>
</li>
<li><p>onmousemove 鼠标移动事件</p>
</li>
<li><p>onmousedown 鼠标点击下去事件</p>
</li>
<li><p>onmouseup 鼠标弹上来事件</p>
</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;imgs/可达鸭.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;test1()&quot;</span> </span></span><br><span class="line"><span class="tag">		      <span class="attr">ondblclick</span>=<span class="string">&quot;test2()&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;test3()&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;test4()&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;test5()&quot;</span></span></span><br><span class="line"><span class="tag">			  <span class="attr">onmousedown</span>=<span class="string">&quot;test6()&quot;</span> <span class="attr">onmouseup</span>=<span class="string">&quot;test7()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="8-2-2-键盘事件"><a href="#8-2-2-键盘事件" class="headerlink" title="8.2.2 键盘事件"></a>8.2.2 键盘事件</h3><blockquote>
<p>键盘事件主要针对于表单中的输入标签</p>
</blockquote>
<ul>
<li>onkeydown 键盘按下去,如果按下去不放,则一直触发</li>
<li>onkeyup 键盘松开</li>
<li>onkeypress 按键按下,只支持字符键,不支持其他键</li>
</ul>
<h3 id="8-2-3-window-窗口-事件"><a href="#8-2-3-window-窗口-事件" class="headerlink" title="8.2.3 window(窗口)事件"></a>8.2.3 window(窗口)事件</h3><blockquote>
<p>window对象触发的事件,window对象并不是一个HTML标签,window对象的事件通常使用js脚本绑定</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//当前网页body标签全部加载完毕时触发</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----load&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 当前网页关闭或刷新时执行,多用于回收资源</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">window</span>.<span class="property">onunload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//屏幕滚动时触发</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;scrolling&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//擦窗口尺寸发生变化时触发,考虑兼容性</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>&#x3D;&#x3D;案例: 如果在html的head标签中通过js绑定事件,必须卸载window.onload &#x3D; function(){}里面&#x3D;&#x3D;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">				btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h3 id="8-2-4-表单事件"><a href="#8-2-4-表单事件" class="headerlink" title="8.2.4 表单事件"></a>8.2.4 表单事件</h3><blockquote>
<p>上面讲到的键盘事件,通常绑定在表单输入标签,但是表单输入标签支持的事件不止键盘事件</p>
</blockquote>
<ul>
<li>onfocus: 当表单标签获得焦点时触发</li>
<li>onblur : 失去焦点时触发</li>
<li>onchange : 表单标签中的值发生变化时触发(输入框失去焦点后才判断)–下拉菜单</li>
<li>onselect : 当输入框中的内容被选中时触发</li>
<li>onsubmit : 绑定在form标签上,当表单被提交时触发</li>
<li>onreset : 当表单被重置时触发</li>
</ul>
<h2 id="8-3-Event事件对象"><a href="#8-3-Event事件对象" class="headerlink" title="8.3 Event事件对象"></a>8.3 Event事件对象</h2><blockquote>
<p>js将标签发生的动作,抽象为事件</p>
<p>一个event对象表示某个具体的html标签与发生的动作的组合</p>
<ul>
<li>一个按钮发生了点击事件—event对象</li>
<li>一个图片发生了鼠标移动事件—event对象</li>
<li>一个图片发生了点击事件—event对象</li>
</ul>
</blockquote>
<h3 id="8-3-1-获取event对象"><a href="#8-3-1-获取event对象" class="headerlink" title="8.3.1 获取event对象"></a>8.3.1 获取event对象</h3><p>方式一: 在js函数中,使用window对象调用event属性获取触发当前js函数的event对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ev = <span class="variable language_">window</span>.<span class="property">event</span>;</span><br></pre></td></tr></table></figure>

<p>方式二: 如果使用JS脚本绑定函数,也可以使用函数的参数直接调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img&quot;</span>)l</span><br><span class="line">img.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span><br><span class="line">  <span class="comment">//参数ev即为event对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="8-3-2-event对象属性"><a href="#8-3-2-event对象属性" class="headerlink" title="8.3.2 event对象属性"></a>8.3.2 event对象属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//event对象可以调用srcElement属性,可以获取触发此事件的标签</span></span><br><span class="line"><span class="keyword">var</span> tag = event.<span class="property">srcElement</span>;</span><br><span class="line"><span class="comment">//event对象调用type属性,可以获取事件类型</span></span><br><span class="line"><span class="keyword">var</span> type = event.<span class="property">type</span>;</span><br></pre></td></tr></table></figure>



<h2 id="8-4-阻止事件冒泡"><a href="#8-4-阻止事件冒泡" class="headerlink" title="8.4 阻止事件冒泡"></a>8.4 阻止事件冒泡</h2><blockquote>
<p>事件冒泡: 当在子标签发生的事件触发了当前标签上层父标签绑定的函数</p>
<p>解决方案:</p>
<ul>
<li>event.cancelBubble &#x3D; true;</li>
<li>event.stopPropagation();</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 50px; width: 100px; height: 100px;background-color: antiquewhite;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">//事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// event.cancelBubble = true;</span></span></span><br><span class="line"><span class="language-javascript">				event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>如果div里有很多标签,组织冒泡可以用循环</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = div.<span class="property">childNodes</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++ )&#123;</span><br><span class="line">  <span class="keyword">var</span> node = arr[i];</span><br><span class="line">  <span class="keyword">if</span>(node.<span class="property">nodeType</span>==<span class="number">1</span>)&#123;</span><br><span class="line">    node.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">      event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>java大全</title>
    <url>/2022/05/16/Java%20%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h1><h2 id="HashCode-和-equals"><a href="#HashCode-和-equals" class="headerlink" title="HashCode 和 equals"></a>HashCode 和 equals</h2><blockquote>
<ul>
<li>hashCode 方法是属于 Obejct 父类，JVM提供给每个对象生成一个 hashCode 值（整数类型）<br>支持该方法是为哈希表提供一些优点</li>
<li>hashCode 的常规协定是：<br><strong>在 Java 应用程序运行期间，在同一对象上调用 hashCode 方法时，必须一致的返回相同整数</strong></li>
<li>hashCode 的存在主要是为了查找的快捷性，如 HashTable、HashMap 等<br><strong>hashCode 是用来在散列存储结构中确定对象的存储地址的</strong></li>
<li>如果 equals 方法相等，那么 hashCode 一定相等，如果 hashCode 值相等<strong>不代表 equals 方法一定相等</strong></li>
<li>如果类中重写了 equals 方法，那么必须也要重写 hashCode 方法</li>
</ul>
</blockquote>
<h3 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote>
<p>HashCode 值的生成规则是对象的堆内存地址转化为整数类型</p>
</blockquote>
<p><strong>父类 hashCode 的调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> o1;</span><br><span class="line"><span class="type">Object</span> <span class="variable">o3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">System.out.println(o1.hashCode());</span><br><span class="line">System.out.println(o2.hashCode());</span><br><span class="line">System.out.println(o3.hashCode());</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 692404036</span></span><br><span class="line"><span class="comment">// 692404036</span></span><br><span class="line"><span class="comment">// 1554874502</span></span><br></pre></td></tr></table></figure>



<h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><blockquote>
<p>两个对象 HashCode 值相同不代表这两个对象是相同的</p>
<p>如果两个对象的哈希值相同，但是值不同，称之为<strong>哈希冲突</strong></p>
</blockquote>
<p><strong>相同的 String 值的 HashCode</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;ss&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ss&quot;</span>;</span><br><span class="line">System.out.println(s1.hashCode());</span><br><span class="line">System.out.println(s2.hashCode());</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 3680</span></span><br><span class="line"><span class="comment">// 3680</span></span><br></pre></td></tr></table></figure>



<p><strong>整数类型的 HashCode 就是该数值, 以下是经典哈希冲突案例</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-31%2023.21.10.png" style="zoom: 50%">





<h4 id="重写-hashCode-和-equals"><a href="#重写-hashCode-和-equals" class="headerlink" title="重写 hashCode 和 equals"></a>重写 hashCode 和 equals</h4><blockquote>
<p>重写 equals 方法就必须重写 hashCode 方法</p>
<p>因为不能违背 hashCode 不同两个对象一定不同的设计准则</p>
</blockquote>
<p><strong>声明一个 Student 类，重写 equals 方法但是没重写 hashCode 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 先判断地址，相同返回 true</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="comment">// 下面这个比较蕴含很多知识</span></span><br><span class="line">        <span class="comment">// String 重写了 equals 所以我们可以直接用，而整数类型包装类的 hashCode 就是其值本身，所以直接用 ==</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.name.equals(s.name) &amp;&amp; <span class="built_in">this</span>.age == s.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用类及输出如下</strong><br>由于我们重写的 equals 方法只判断了成员属性，没有重写 hashCode 方法，导致了equals 相同但是 hashCode 不同<br>是不符合设计规范的，所以应该重写 hashCode</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-31%2023.33.46.png">



<p><strong>重写hashCode</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 先判断地址，相同返回 true</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.name.equals(s.name) &amp;&amp; <span class="built_in">this</span>.age == s.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-31%2023.38.54.png">







<h2 id="栈帧链"><a href="#栈帧链" class="headerlink" title="栈帧链"></a>栈帧链</h2><h2 id="Objec"><a href="#Objec" class="headerlink" title="Objec"></a>Objec</h2><blockquote>
<ul>
<li>Object 是类的结构根</li>
<li>如果我们写的类在没有继承其他类的情况下，默认间接继承了 Object 类</li>
</ul>
</blockquote>
<h3 id="Object-主要方法"><a href="#Object-主要方法" class="headerlink" title="Object 主要方法"></a>Object 主要方法</h3><blockquote>
<ul>
<li>无参构造方法（Object 类的代码中没有写，是默认的）<br>Object 没有有参构造方法</li>
<li>clone ：复制对象</li>
<li>equals</li>
<li>finalize ：JVM垃圾回收机制会用到</li>
<li>getClass：获得该对象的class</li>
<li>hashCode：</li>
<li>notify、notifyAll、wait：多线程之间的通信</li>
<li>toString ：返回对象的字符串表示形式</li>
</ul>
</blockquote>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类和和对象的特点"><a href="#类和和对象的特点" class="headerlink" title="类和和对象的特点"></a>类和和对象的特点</h2><h3 id="对象的内存"><a href="#对象的内存" class="headerlink" title="对象的内存"></a>对象的内存</h3><p>运行如下代码，在内存中会发生什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// 0</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(); <span class="comment">// 1</span></span><br><span class="line">        student.name = <span class="string">&quot;Erics&quot;</span>; <span class="comment">// 2</span></span><br><span class="line">        student.age = <span class="number">20</span>; <span class="comment">// 2</span></span><br><span class="line">        student.selfIntroduction(); <span class="comment">//3 </span></span><br><span class="line">&#125; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<ol start="0">
<li>main 方法运行时会压入栈内存</li>
<li>new 出来的对象会存放在堆内存并返回一个内存地址，该对象的属性都会给默认值<br>而 student 存在于栈内存，存放的是对象在堆内存的地址（即引用）</li>
<li>student 指向堆内存地址，当调用它时就会直接找到堆内存并对对象的属性进行赋值操作</li>
<li>将 selfIntroduction() 方法压栈，进行操作，结束后出栈</li>
<li>main 方法出栈，程序运行结束</li>
</ol>
<h4 id="成员变量访问内存图"><a href="#成员变量访问内存图" class="headerlink" title="成员变量访问内存图"></a>成员变量访问内存图</h4><blockquote>
<p>如下图所示(借鉴了黑马教程的图)</p>
<ul>
<li>首先内存中会出现一个Java的JVM</li>
<li>然后加载java文件时首先将Student这个类以.class形式加载到方法区，方法区中会有一个静态区域是存放static修饰的成员</li>
<li>main方法也在静态区，但比较特殊，main方法会被提取到方法栈中，之后开始执行main方法</li>
<li>main方法的前两句是调用类的静态成员变量，会直接到静态区去拿值</li>
<li>声明对象时，会在堆内存中创建对象主题，为成员变量赋默认值，并给出地址，注意，static修饰的变量不在当中<br>并且在方法栈中会有一个空间存放堆内存中对象的引用，也就是地址</li>
<li>通过对象调用成员变量时会通过方法栈中的对象引用找到堆内存的具体地址，然后调用</li>
<li>如果是通过对象调用静态变量，那么会首先去堆内存中找，找不到再去方法区中的静态区中找</li>
</ul>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-16%2012.35.51.png">





<h4 id="成员方法访问内存图"><a href="#成员方法访问内存图" class="headerlink" title="成员方法访问内存图"></a>成员方法访问内存图</h4><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-06-16%2013.02.33.png">













<h3 id="类的成分"><a href="#类的成分" class="headerlink" title="类的成分"></a>类的成分</h3><blockquote>
<p>类中有且<strong>仅有</strong>五大成分</p>
<ul>
<li><strong>成员变量（Field）</strong><br>描述类和对象的属性信息的</li>
<li><strong>成员方法（Method）</strong><br>描述类或者对象的行为信息</li>
<li><strong>构造器（Construct）</strong><br>初始化一个类的对象并返回引用</li>
<li><strong>代码块</strong></li>
<li><strong>内部类</strong></li>
</ul>
</blockquote>
<h2 id="权限和方法"><a href="#权限和方法" class="headerlink" title="权限和方法"></a>权限和方法</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote>
<ol>
<li>如果没有定义构造方法，系统将提供一个默认的<strong>无参构造方法</strong></li>
<li>如果提供了构造方法，系统将不再提供默认的构造方法<br>所以如果定义了有参构造方法，但是还会用到无参构造方法，就需要自己定义一下</li>
</ol>
</blockquote>
<h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><blockquote>
<p>private 修饰的成员变量只能在该对象内被访问<br>即要想对 private 变量进行操作，需要提供 get 和 set 方法</p>
</blockquote>
<p>这句话应该大家都不陌生，但是很多时候不是特别理解，比如 private 和 public 修饰的成员变量在赋值时的不同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public 修饰</span></span><br><span class="line">student.name = <span class="string">&quot;Erics&quot;</span>;</span><br><span class="line"><span class="comment">// private 修饰</span></span><br><span class="line">student.setName(<span class="string">&quot;Erics&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>初看上述对比并不是特别理解真正的区别在哪，感觉上不都是写一行代码提供一个字符串然后给对象赋值<br>其实，这两个点的不同就体现在 set 方法上，例如我可以对 set 方法进行如下改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">120</span> || age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;age is wrong&quot;</span>);        </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该 set 方法对 age 进行了判断，这样用户在输入 age 时就不可以输入小于0 或大于120的明显错误年龄</p>
<p>这就体现了 private 的作用了，private 并不是许多老师口中的 “看不见” 或者简简单单说一句 “私有” 就可以理解的，要进一步解释私有的含义：<strong>即对象外不可以随意的对对象的私有属性赋值</strong>，必须满足 set 方法也就是该对象对于其私有属性的规定即可赋值，而不是说对象不想从对象外进行赋值</p>
<p>这种中间添加一层的思想广泛应用于各种设计模式。</p>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote>
<p>this 用于指代当前被调用的类的对象<br>如果当前类的方法的形参（局部变量）没有和类的成员变量相同的，那么可以不用加 this 区分，默认指向的就是成员变量，如果有相同的，则默认指向形参，如果想调用成员变量，需要加 this 区分。</p>
<p><strong>this 存放的就是被调用对象的地址</strong></p>
</blockquote>
<p>this 的使用细节：<br>this 可以在构造方法中调用：this(参数列表)，只能在构造器中这么用，即只能在一个构造器中访问另外一个构造器<br>且 this 必须放在第一行：</p>
<p><strong>正确：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-25%2023.27.41.png">

<p><strong>错误</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-25%2023.31.19.png">





<h3 id="super-和继承"><a href="#super-和继承" class="headerlink" title="super 和继承"></a>super 和继承</h3><blockquote>
<p>和 this 相似，不过代表的是父类存储空间的标识（可以理解为父类对象的引用）</p>
</blockquote>
<h4 id="super-访问父类的成员变量"><a href="#super-访问父类的成员变量" class="headerlink" title="super 访问父类的成员变量"></a>super 访问父类的成员变量</h4><ul>
<li><p>父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问本方法内的 age &quot;</span> + age); <span class="comment">// 22</span></span><br><span class="line">        System.out.println(<span class="string">&quot;访问当前类的 age&quot;</span> + <span class="built_in">this</span>.age); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">&quot;访问父类的 age&quot;</span> + <span class="built_in">super</span>.age); <span class="comment">// 18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="super-访问父类的构造方法"><a href="#super-访问父类的构造方法" class="headerlink" title="super 访问父类的构造方法"></a>super 访问父类的构造方法</h4><ul>
<li><p>父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在 main 方法中分别调用 student 类的无参和有参构造方法，结果如下：</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-27%2000.12.51.png">



<blockquote>
<p>所以可以得结论：</p>
<ol>
<li>子类中的所有构造方法默认都会访问父类中的无参构造方法</li>
<li>因为子类会继承父类中的数据，可能还会使用父类的数据，所以在子类初始化之前需要对父类进行初始化</li>
<li>每个子类的构造方法第一行默认都是 super()</li>
</ol>
<p>所以如果父类没有无参构造方法且只有有参构造方法，子类就会报错，因为子类如果没有用 super 显示调用父类的构造方法，默认都是调用父类的无参构造方法，而父类如果只有有参构造方法，便不会默认生成无参构造方法，所以就会报错。以此类推，父类如果啥也没，一片空白，那么子类初始化就不会报错，因为父类会默认生成无参构造方法。如下图：</p>
</blockquote>
<p><strong>父类只有有参构造方法</strong></p>
<ul>
<li><p>父类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类不用 super 关键字会报错</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-27%2000.27.43.png">

<ul>
<li>子类用 super 关键字显示调用父类构造方法则不会报错</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-27%2000.29.44.png">



<p><strong>父类什么构造方法也没有</strong></p>
<ul>
<li><p>父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类不用 super 也不会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="super-访问父类成员方法"><a href="#super-访问父类成员方法" class="headerlink" title="super 访问父类成员方法"></a>super 访问父类成员方法</h4><blockquote>
<ol>
<li>先查找子类中的成员方法</li>
<li>如果子类没有，才会去父类中调用方法</li>
</ol>
</blockquote>
<ul>
<li>父类</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是父类的show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是子类的show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用子类的 show 输出：</span></span><br><span class="line"><span class="comment">//我是父类的show</span></span><br><span class="line"><span class="comment">//我是子类的show</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><blockquote>
<p>子类出现了和父类一模一样的方法就是重写</p>
<p>重写存在的意义就是父类功能的延续，在原有基础上功能的拓展</p>
</blockquote>
<h4 id="重写的意义"><a href="#重写的意义" class="headerlink" title="重写的意义"></a>重写的意义</h4><ul>
<li><p>父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的功能是语音电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.func();</span><br><span class="line">        System.out.println(<span class="string">&quot;我的新功能是视频电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Override-及重写的注意事项"><a href="#Override-及重写的注意事项" class="headerlink" title="@Override 及重写的注意事项"></a>@Override 及重写的注意事项</h4><blockquote>
<ul>
<li>重写的方法的方法名和参数列表必须和父类一致</li>
<li>父类中的私有方法子类是没有办法重写的</li>
<li>子类的方法访问权限不能比父类低（public &gt; default &gt; private)<br>但是可以高</li>
</ul>
</blockquote>
<p><strong>重写的方法的方法名和参数列表必须和父类一致</strong></p>
<ul>
<li><p>父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的功能是语音电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-27%2000.53.08.png" style="zoom:70%">





<p><strong>父类中的私有方法子类是没有办法重写的</strong></p>
<p><strong>子类的方法访问权限不能比父类低（public &gt; default &gt; private)</strong></p>
<h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><table>
<thead>
<tr>
<th>权限修饰符</th>
<th>同一个类</th>
<th>同一个包</th>
<th>不同包子类</th>
<th>不同包非子类</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>&amp;check;</td>
<td>&amp;cross;</td>
<td>&amp;cross;</td>
<td>&amp;cross;</td>
</tr>
<tr>
<td>default</td>
<td>&amp;check;</td>
<td>&amp;check;</td>
<td>&amp;cross;</td>
<td>&amp;cross;</td>
</tr>
<tr>
<td>protected</td>
<td>&amp;check;</td>
<td>&amp;check;</td>
<td>&amp;check;</td>
<td>&amp;cross;</td>
</tr>
<tr>
<td>public</td>
<td>&amp;check;</td>
<td>&amp;check;</td>
<td>&amp;check;</td>
<td>&amp;check;</td>
</tr>
</tbody></table>
<h3 id="package-、import"><a href="#package-、import" class="headerlink" title="package 、import"></a>package 、import</h3><blockquote>
<p>包的作用是实现对类的分类管理</p>
<p>类的名称如何组成：包的名称 + 类的名称组合 – 保证唯一不允许重复（类的全限定名）</p>
<p>如果直接在 src 目录下创建的类是没有任何包的名称的</p>
</blockquote>
<p>使用不同包的类的时候需要使用该类的全限定名，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.Erics.test.<span class="type">Parent</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.Erics.test.Parent();</span><br></pre></td></tr></table></figure>

<p>这明显是麻烦的，代码冗余，所以可以使用 import 将该类导入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.Erics.test.Parent;</span><br></pre></td></tr></table></figure>

<p>如果该包下大多类都用到了，那么也可以把整个包都导入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.Erics.test.*;</span><br></pre></td></tr></table></figure>

<p>如果导入的包的类名和当前包的类名是一样的，java会优先使用当前包的类名，要使用其他包的相同名的类，需要在类名面前加上包名</p>
<h3 id="fianl-和-static"><a href="#fianl-和-static" class="headerlink" title="fianl 和 static"></a>fianl 和 static</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><blockquote>
<p><strong>fianl（最终态）</strong></p>
<ul>
<li>fianl 定义的变量是常量，是不能被修改的</li>
<li>被 final 修饰的类是无法被继承的</li>
<li>被 fianl 修饰的成员方法是无法被重写的</li>
<li>被 final 修饰的成员变量是无法被修改的，必须被初始化（手动赋值）</li>
</ul>
</blockquote>
<p>使用 final 修饰局部变量，如果该变量是基本数据类型，则不能被修改<br>但是如果 final 修饰的是一个引用类型（对象），那么引用地址的值是不能被修改的，但是里面的属性可以修改</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-27%2012.13.21.png" style="zoom:60%">





<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><blockquote>
<p><strong>static（静态）</strong></p>
<p>可以修饰成员方法、成员变量，其特点是 static 修饰的会被类的所有对象共享访问</p>
<p><strong>static 访问特点</strong></p>
<p>非静态成员方法</p>
<ol>
<li>能够访问静态的成员变量</li>
<li>能够访问非静态的成员变量</li>
<li>能访问静态的成员方法</li>
<li>能访问非静态的成员方法</li>
</ol>
<p>静态的成员方法</p>
<ol>
<li>能访问静态的成员变量，但是不能直接访问成员变量</li>
<li>能访问静态成员方法，但是不能直接访问成员方法</li>
</ol>
<p><strong>static 使用场景</strong></p>
<p>一句话描述： 方便在没有对象的情况下进行调用（方法、变量）<br>被 static 修饰的成员或方法不需要依赖对象进行访问，只要类被加载了就可以通过类名去进行访问</p>
<p>另外也可以通过编写 static 代码块来优化程序性能</p>
</blockquote>
<p><strong>Child 类继承 Parent 类，父类中 name 属性是 public 修饰，School 属性是 static 修饰，看如下代码输出</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryOfObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        child1.name = <span class="string">&quot;c1&quot;</span>;</span><br><span class="line">        child1.school = <span class="string">&quot;school1&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Child</span> <span class="variable">child2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        child2.name = <span class="string">&quot;c2&quot;</span>;</span><br><span class="line">        child2.school = <span class="string">&quot;school2&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(child1.name + <span class="string">&quot; &quot;</span> + child1.school);</span><br><span class="line">        System.out.println(child2.name + <span class="string">&quot; &quot;</span> + child2.school);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// c1 school2</span></span><br><span class="line"><span class="comment">// c2 school2</span></span><br></pre></td></tr></table></figure>

<p>上图可以清晰的反映出 static 修饰的变量的访问特点，且也表达了 static 变量的一个重要作用，就是将多个对象的共同属性只进行一次赋值即可，不用多次赋值，比如对同一所大学的学生赋学校名称时只需要对类赋一次就好，其作用和 final 很相似，但是又有不同，final 进行一次初始化之后就无法更改，但是 static 是可以灵活赋值的，更适合初始化不同大学的学生信息这一场景。</p>
<h3 id="main-方法"><a href="#main-方法" class="headerlink" title="main 方法"></a>main 方法</h3><blockquote>
<ul>
<li>main 方法是JVM 调用的</li>
<li>JVM 需要调用 main 方法，所以该方法必须是 public 修饰，因为调用的时候 JVM 和 main 方法不在同一个类</li>
<li>JVM 执行 main 方法的时候不必创建对象，所以该方法必须是 static</li>
<li>main 方法接受 String 类型的数组参数，该数组中保存执行 java 命令时传递给所执行类的参数</li>
</ul>
<p><strong>main 方法使用细节</strong></p>
<ul>
<li>因为 main 方法是 static 的，所以可以i直接访问本类的静态成员</li>
<li>访问本类的非静态成员需要先创建对象再调用</li>
</ul>
</blockquote>
<p><strong>解析 public static void main（String[] args）中 args是什么</strong></p>
<ul>
<li><p>被调用类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>终端进入该类的目录执行 (注意该类不要带包名，否则 java 命令失效)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -encoding UTF-8 Parent.java</span><br></pre></td></tr></table></figure>

<p>目录会出现该类同名的 class 文件</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-28%2000.09.03.png">

<ul>
<li><p>再执行 java 命令并加入参数运行该类</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java Parent // 不带参数</span><br><span class="line">java Parent arg1 arg2 arg3 // 带参数</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-28%2000.21.26.png">



<p> <strong>如何在 idea 中添加运行类时的 main 方法参数注入</strong></p>
<ol>
<li>先运行类，运行后在右上角运行标识旁边会出现该类的启动配置</li>
<li>进入启动配置，在 Program Arguments 那一栏添加参数即可</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-28%2000.34.39.png" style="zoom: 50%">





















<h2 id="面向对象特征"><a href="#面向对象特征" class="headerlink" title="面向对象特征"></a>面向对象特征</h2><blockquote>
<p>面向对象（oop）三大基本特征：封装、继承、多态</p>
<ul>
<li><p>封装<br>把客观事物封装成抽象的类，并且可以把自己的数据和方法只让可信的类或对象操作<br>而一般来说，给成员变量添加权限修饰符，添加 get set 方法就是封装的流程</p>
</li>
<li><p>继承<br>子类继承父类的属性和方法</p>
</li>
<li><p>多态</p>
<p>同一个对象在不同时刻表现出来的不同形态</p>
</li>
</ul>
</blockquote>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote>
<p><strong>封装的作用</strong>：</p>
<ol>
<li>提高安全性</li>
<li>实现组件化（例如用get和set两个体系操作成员变量）</li>
</ol>
<p><strong>封装的规范</strong>：</p>
<ol>
<li>建议成员变量私有（private修饰）<br>private修饰的方法、成员变量、构造器等，只能在本类直接访问</li>
<li>提供成套的getter + setter方法暴露成员变量的取值和赋值（public修饰）<br>public修饰符是公开的意思</li>
</ol>
<p><strong>小结</strong>：<br>封装的核心思想：合理隐藏、合理暴露<br>封装已经成为Java代码的风格，即使代码毫无意义，还是要按照封装的规范去写</p>
</blockquote>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote>
<p><strong>优点</strong></p>
<ul>
<li>提高了代码的复用性</li>
<li>提高了代码的维护性</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>继承让类与类之间产生了关系，耦合度增加，当父类变化时子类也要变，降低了子类的独立性</li>
</ul>
<p><strong>继承中的变量访问特点</strong></p>
<ul>
<li>当在子类方法中访问一个变量：<ol>
<li>首先会访问当前方法局部</li>
<li>其次在当前子类的成员属性范围查找</li>
<li>最后在父类成员属性中查找</li>
</ol>
</li>
</ul>
<p><strong>继承的注意事项</strong></p>
<ul>
<li>java 中的类只支持单继承，不支持多继承（一个子类不能有两个父类）</li>
<li>java 支持多层继承（孙子类可以直接继承使用爷爷类的public 方法的）</li>
</ul>
</blockquote>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote>
<p><strong>多态的前提和体现</strong></p>
<ol>
<li>有继承(abstract)、实现(implments)关系，所以多态一定发生在两个或两个类以上的场景</li>
<li>方法重写</li>
<li>有父类引用指向子类对象</li>
</ol>
<p><strong>多态的访问特点</strong></p>
<ul>
<li>成员变量：编译看左边，执行看左边</li>
<li>成员方法：编译看左边，执行看右边</li>
<li>这是因为成员方法有重写的概念，而成员变量没有</li>
</ul>
<p><strong>多态的优点</strong></p>
<ul>
<li>提高了程序的扩展性</li>
</ul>
<p><strong>多态的缺点</strong></p>
<ul>
<li>不能使用子类的独有功能</li>
</ul>
</blockquote>
<p><strong>一个例子体现多态，即一个方法在不同场景实现不同功能，且能体现其访问特点</strong></p>
<ul>
<li><p>父类 Animal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal 都有吃的能力&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类 Cat 和 Dog 继承自 Animal，分别重写父类的 eat 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalDog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog 有吃的能力&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalCat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat 有吃的能力&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在调用时，new 子类的时候用父类去接，并调用 eat 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryOfObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalDog</span>();</span><br><span class="line">        animal1.eat();</span><br><span class="line">        System.out.println(animal1.name);</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalCat</span>();</span><br><span class="line">        animal2.eat();</span><br><span class="line">        System.out.println(animal2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出如下</span></span><br><span class="line"><span class="comment">// dog 有吃的能力</span></span><br><span class="line"><span class="comment">// dog</span></span><br><span class="line"><span class="comment">// animal</span></span><br><span class="line"><span class="comment">// cat 有吃的能力</span></span><br><span class="line"><span class="comment">// cat</span></span><br><span class="line"><span class="comment">// animal</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="多态的优缺点"><a href="#多态的优缺点" class="headerlink" title="多态的优缺点"></a>多态的优缺点</h4><ul>
<li><p>父类 Animal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i am animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>两个子类,重写父类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalDog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i am dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalCat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i am cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作类，用父类作为接受参数，并调用 eat 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalOperate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userAnimal</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用操作类的方法，看返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryOfObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnimalOperate</span> <span class="variable">operate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalOperate</span>();</span><br><span class="line">        operate.userAnimal(<span class="keyword">new</span> <span class="title class_">AnimalDog</span>());</span><br><span class="line">        operate.userAnimal(<span class="keyword">new</span> <span class="title class_">AnimalCat</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// i am dog</span></span><br><span class="line"><span class="comment">// i am cat</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>上述例子体现了多态的优势，在 operate 类中我们利用多态只用一个方法就完成了调用不同子类的各自的方法，如果不用多态，想实现类似的功能，需要编写的代码如下，然后每次添加新的子类的时候还需要添加新的代码，代码冗余。但是这也不能万能的，比如如果子类 dog 有一个自己独有的功能，那么通过多态是无法调用的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalOperate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dog</span><span class="params">(AnimalDog dog)</span> &#123;</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dog</span><span class="params">(AnimalCat cat)</span> &#123;</span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="多态的转型"><a href="#多态的转型" class="headerlink" title="多态的转型"></a>多态的转型</h4><blockquote>
<ol>
<li>向上转型（多态的机制）<br>从子到父<br>父类引用指向子类对象<br>向上转型就是基本的多态的使用方法，new 出来的对象由父类去接受，父类指向子类</li>
<li>向下转型（强转）<br>从父到子<br>父类引用转为子类对象</li>
</ol>
</blockquote>
<p><strong>一张图解释什么是向上、向下转型</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-28%2010.19.09.png">









<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><h3 id="abstarct-抽象类"><a href="#abstarct-抽象类" class="headerlink" title="abstarct 抽象类"></a>abstarct 抽象类</h3><blockquote>
<p><strong>问题引入</strong></p>
<p>在学习多态的时候我们使用的是 Animal、Cat、Dog 的例子，那个例子是有一点不好的，那就是父类 Animal 中的 eat 方法我们是实现了的，并且我们可以直接通过 new Animal 的方式去调用这个 eat 方法，而从逻辑上，Animal 类在未声明是什么具体的种类的时候，是不应该能被声明出来且调用 eat 方法的，这个时候引入抽象类可以解决该问题。</p>
</blockquote>
<blockquote>
<p><strong>抽象类特点</strong></p>
<ul>
<li>在 Java 中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类<br>(没有方法体的意思是连大括号都没有)</li>
<li>抽象类中不一定要有抽象方法，但是有抽象方法的类必须是抽象类</li>
<li>抽象类不能被实例化</li>
<li>子类必须对父类（抽象类）中的所有抽象方法进行重写</li>
<li>抽象类中可以定义非抽象方法</li>
<li>子类如果不重写抽象类中的方法，则该类还是抽象类</li>
<li>抽象类中可以有初始化方法，用于子类访问父类时的数据初始化</li>
</ul>
</blockquote>
<p><strong>抽象类声明及调用</strong></p>
<ul>
<li><p>抽象类父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;no args construction&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String N)</span> &#123;</span><br><span class="line">        name = N;</span><br><span class="line">        System.out.println(<span class="string">&quot;args construction&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类非抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dogs like eating bonds&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类如果是抽象类则不必重写父类的抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p><strong>abstract 关键字不能和哪些关键字共存</strong></p>
<ol>
<li><strong>private</strong><br>如果父类的抽象方法是 private，那么就不能被继承，那子类就没办法被重写</li>
<li><strong>final</strong><br>static 修饰的方法、变量都不能被修改，也就不能被重写</li>
<li><strong>static</strong><br>无意义，static 是静态的，abstract 方法无方法体，无法调用</li>
</ol>
</blockquote>
<h3 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h3><blockquote>
<ul>
<li>接口就是一种公共规范标准，只要符合规范标准，大家都可以通用</li>
<li>Java 中的接口更多的体现在对行为的抽象</li>
</ul>
</blockquote>
<blockquote>
<p><strong>接口定义及实现的特点</strong></p>
<ul>
<li>和抽象类一样，接口的实现类也要实现接口的所有方法</li>
<li>如果实现类用 abstract 修饰就不用实现接口的方法啊<br>且该抽象类可以继续被继承</li>
</ul>
</blockquote>
<ul>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnimalCat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类的子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JiaFeiCat</span> <span class="keyword">extends</span> <span class="title class_">AnimalCat</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;jiafei cat eats fish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">app</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JiaFeiCat</span>();</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>以上实例生成的类图</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-28%2012.27.58.png">



<blockquote>
<p><strong>接口成员变量访问特点</strong></p>
<ul>
<li>成员变量只能是常量<br>默认修饰符：public static final</li>
<li>成员方法只能是抽象方法<br>默认修饰符：public abstract</li>
<li>接口没有构造方法<br>因为接库主要是对行为进行抽象，没有具体存在<br>一个类如果没有父类默认继承自 Object 类，所以实现类的无参构造方法第一行的默认的那个 super 会先调用 Object 的无参构造方法</li>
<li>jdk 8 开始可以在接口中定义非抽象方法，需要使用 default 关键字修饰,且默认加上 public 修饰</li>
</ul>
</blockquote>
<p><strong>在 idea 中，如果重复写了默认修饰符就会显示灰色，提示多余</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-28%2012.53.08.png" style="zoom: 80%">



<p><strong>接口中定义非抽象方法</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-28%2012.59.00.png" style="zoom: 80%">







<h3 id="抽象类和接口案例"><a href="#抽象类和接口案例" class="headerlink" title="抽象类和接口案例"></a>抽象类和接口案例</h3><blockquote>
<p>需求：<br>对猫和狗进行训练他们就可以跳高了，使用接口和抽象类实现</p>
<p>分析：<br>抓住抽象类的整体抽象功能和接口的行为抽象功能，将行为跳高声明在接口中，然后抽象类去实现跳高接口，并定义好 animal 的抽象特征，拥有无参和有参构造器，最后再声明具体的类</p>
</blockquote>
<p><strong>接口定义跳这个行为</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Jump</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>抽象类实现接口并定义动物自己的方法和成员变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Jump</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">selfIntro</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>子类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpDog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JumpDog</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JumpDog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =  name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog can jump 2 meter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selfIntro</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;my name is &quot;</span> + name + <span class="string">&quot; my age is &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">app</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jump</span> <span class="variable">jump</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JumpCat</span>(<span class="string">&quot;cat&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        jump.jump();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JumpDog</span>(<span class="string">&quot;wangcai&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        dog.selfIntro();</span><br><span class="line">        dog.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// cat can jump 1 meter</span></span><br><span class="line"><span class="comment">// my name is wangcai my age is 2</span></span><br><span class="line"><span class="comment">// dog can jump 2 meter</span></span><br></pre></td></tr></table></figure>







<h3 id="类和接口的区别"><a href="#类和接口的区别" class="headerlink" title="类和接口的区别"></a>类和接口的区别</h3><blockquote>
<ul>
<li>类和类的继承关系<br>继承关系只能单继承，但是可以多层继承</li>
<li>类和接口的实现关系<br>实现关系可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li>
<li>接口和接口的继承关系<br>一个接口可以继承一个接口也可以继承多个接口</li>
</ul>
</blockquote>
<h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><blockquote>
<ul>
<li>成员区别<ol>
<li>抽象类：可以有常量、变量；有构造方法；有抽象方法也有非抽象方法</li>
<li>接口：只有常量和抽象方法（jdk 8 后可以定义非抽象方法）</li>
</ol>
</li>
<li>关系区别<ol>
<li>类与类：继承，单继承</li>
<li>类与接口：实现，单实现和多实现</li>
<li>接口与接口：继承，单继承与多继承</li>
</ol>
</li>
<li><strong>设计区别</strong><ol>
<li>抽象类是对类的抽象，包括属性行为（对事物的抽象）</li>
<li>接口对行为抽象，主要是行为（对行为的抽象）</li>
</ol>
</li>
</ul>
</blockquote>
<blockquote>
<p><strong>关于接口和抽象类的设计区别</strong></p>
</blockquote>
<p>使用门锁功能的例子来进一步解释他们之间的设计区别，假设现在有两款门，一个是电子门，一个是传统机械门，他们都具有一些作为门的基础属性，比如长宽高，也有一些门的共有的功能，比如自动开门和关门，但是电子门有一个额外功能就是带报警功能，那么怎么设计呢？如果定义一个抽象类，里面有开门关门报警的方法，并且有长宽高等属性，是不合适的，因为其子类必须重写所有功能，但是机械门是没有报警功能的，如果定义一个接口去实现更不合适了，不光解决不了上述问题，而且其属性都是常量无法修改，那么就可以采用下面的经典方案：</p>
<ul>
<li>定义一个 Alarm 接口声明 alarm 功能</li>
<li>定义一个 Door 抽象类声明各种门的基础属性和功能</li>
<li>机械门只需要继承 Door 抽象类即可</li>
<li>电子门除了继承 Door 抽象类还需要实现 Alarm 接口</li>
</ul>
<p><strong>定义一个接口，里面有报警功能（对行为的抽象）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">alarm</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义抽象类（对事物的抽象）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Door</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Door</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>机械门子类继承抽象类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JXDoor</span> <span class="keyword">extends</span> <span class="title class_">Door</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JXDoor</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; close&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>电子门子类继承抽象类并且实现接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DZDoor</span> <span class="keyword">extends</span> <span class="title class_">Door</span> <span class="keyword">implements</span> <span class="title class_">Alarm</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DZDoor</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; close&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarm</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; alarm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">app</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DZDoor</span> <span class="variable">door</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DZDoor</span>(<span class="string">&quot;电子门&quot;</span>);</span><br><span class="line">        door.open();</span><br><span class="line">        door.alarm();</span><br><span class="line">        <span class="type">Door</span> <span class="variable">door1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JXDoor</span>(<span class="string">&quot;机械门&quot;</span>);</span><br><span class="line">        door1.open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 电子门 open</span></span><br><span class="line"><span class="comment">// 电子门 alarm</span></span><br><span class="line"><span class="comment">// 机械门 open</span></span><br></pre></td></tr></table></figure>









<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><blockquote>
<p>在一个类中定义一个类就是内部类 </p>
</blockquote>
<blockquote>
<p><strong>内部类的访问特点</strong></p>
<ul>
<li>内部类可以直接访问外部类成员，包括私有的</li>
<li>在外部类要想访问内部类成员必须先实例化</li>
</ul>
</blockquote>
<blockquote>
<p><strong>内部类的分类</strong></p>
<ul>
<li>成员内部类</li>
<li>方法内部类</li>
<li>静态内部类</li>
<li>匿名内部类</li>
</ul>
<p>如果分的不那么细，也可以分为：</p>
<ul>
<li>成员内部类（成员内部类、静态内部类）</li>
<li>局部内部类（方法内部类、匿名内部类）</li>
</ul>
<p><strong>成员内部类和局部内部类区别</strong></p>
<ul>
<li>如果定义在方法里面则是方法内部类或局部内部类</li>
<li>如果定义在方法外面则是成员内部类，如果还加上了 static 修饰就是静态内部类</li>
</ul>
</blockquote>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><blockquote>
<p><strong>在外部访问内部类的成员方法</strong></p>
</blockquote>
<p>成员内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutSideObj</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 声明一个成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsideObj</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i am inside object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        OutSideObj.<span class="type">InsideObj</span> <span class="variable">insideObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutSideObj</span>().<span class="keyword">new</span> <span class="title class_">InsideObj</span>();</span><br><span class="line">        insideObj.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>但是在企业开发中，通常内部类是不允许外界访问的<br>所以会把内部类用 private 修饰，但是在外部类里面还是可以 new 出来用的</p>
<p>但是不可以在外部类的 main 方法中访问，因为 static 方法只能直接访问 static 修饰的成员</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutSideObj</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个成员内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InsideObj</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i am inside object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InsideObj</span> <span class="variable">insideObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InsideObj</span>();</span><br><span class="line">        insideObj.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><blockquote>
<p>有 static 修饰的内部类就是静态内部类 </p>
</blockquote>
<blockquote>
<p>静态内部类的外界访问</p>
</blockquote>
<p>声明静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutSideObj</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InsideObj</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i am inside object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 静态内部类可以在 main 方法中直接访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InsideObj</span> <span class="variable">insideObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InsideObj</span>();</span><br><span class="line">        insideObj.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>外界调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        OutSideObj.<span class="type">InsideObj</span> <span class="variable">insideObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutSideObj</span>.InsideObj();</span><br><span class="line">        insideObj.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>在静态内部类中访问外部成员必须是静态的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutSideObj</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;outside object&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showOut</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i am &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InsideObj</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            showOut();</span><br><span class="line">            System.out.println(<span class="string">&quot;i am inside object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="方法内部类"><a href="#方法内部类" class="headerlink" title="方法内部类"></a>方法内部类</h3><blockquote>
<p>方法内部类是在方法里面定义的类，所以外界是无法使用的，需要在方法里面创建对象并使用</p>
<p>但是方法内部类是可以直接访问外部类的成员的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutSideObj</span> &#123;</span><br><span class="line">    <span class="comment">// 声明外部类的成员属性和方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;outsideObj&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showOut</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;showOut&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inside</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 声明一个方法内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InsideObj</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInside</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 方法内部类访问外部类的私有成员</span></span><br><span class="line">                System.out.println(name);</span><br><span class="line">                showOut();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在方法内调用内部类</span></span><br><span class="line">        <span class="type">InsideObj</span> <span class="variable">insideObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InsideObj</span>();</span><br><span class="line">        insideObj.showInside();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OutSideObj</span> <span class="variable">outSideObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutSideObj</span>();</span><br><span class="line">        outSideObj.inside();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// outsideObj</span></span><br><span class="line"><span class="comment">// showOut</span></span><br></pre></td></tr></table></figure>





<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><blockquote>
<p>使用匿名内部类就不需要创建<strong>实现类(interface)</strong> 和<strong>子类(abstracr)</strong></p>
<p>直接通过 new 的形式简化创建过程</p>
<p>其使用场景就是在简单实现接口或抽象类的方法的时候不用那么麻烦的先去创建一个子类去继承或实现了</p>
</blockquote>
<p><strong>创建及调用</strong></p>
<p>声明一个接口和一个抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AnonymousInter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showInter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnonymousObj</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">showobj</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明使用匿名内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnonymousInter</span> <span class="variable">anonymousInter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnonymousInter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInter</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;show interface&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">AnonymousObj</span> <span class="variable">anonymousObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnonymousObj</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showobj</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;show abstract&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        anonymousInter.showInter();</span><br><span class="line">        anonymousObj.showobj();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>匿名内部类的底层实现原理</p>
<p>以接口为例，在 new InterfaceIml { } 的时候底层实际上为我们创建了实现类来实现接口的方法</p>
</blockquote>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><hr>
<blockquote>
<p>集合的诞生是因为用数组存放多个数据有很多弊端：</p>
<ol>
<li>长度开始时必须指定，而且指定后不可更改</li>
<li>保存的数据必须是同一类型</li>
<li>使用数组进行删除、添加数据会比较麻烦</li>
</ol>
</blockquote>
<blockquote>
<p><strong>集合特点</strong>：</p>
<ol>
<li>可以动态保存任意多个对象</li>
<li>提供了一系列方便的操作对象的方法</li>
<li>使用集合添加、删除新元素很方便</li>
</ol>
<p>本章直接拿几个经典框架开撕源码，跳过基本使用了</p>
</blockquote>
<p>集合分类图</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2022-05-16%2016.50.24.png?token=ARRLFGH3DQ3MZUZZD72INC3EN42UC">









<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><blockquote>
<p>ArrayList 作为集合框架中的经典实现，作为深入集合框架设计理念的的起点是比较合适的</p>
<p><strong>特点</strong></p>
<ul>
<li>顺序容器，即存放顺序和插入顺序相同</li>
<li>允许存放 null 元素，底层通过数组实现</li>
<li>除了没有实现同步外，其他大致与 Vector 相同</li>
</ul>
</blockquote>
<p><strong>类图如下</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-05-29%2023.05.39.png" style="zoom: 70%">







<h3 id="ArrayList-中的迭代器"><a href="#ArrayList-中的迭代器" class="headerlink" title="ArrayList 中的迭代器"></a>ArrayList 中的迭代器</h3><h3 id="ArrayList-中的泛型"><a href="#ArrayList-中的泛型" class="headerlink" title="ArrayList 中的泛型"></a>ArrayList 中的泛型</h3><h3 id="ArrayList-源码"><a href="#ArrayList-源码" class="headerlink" title="ArrayList 源码"></a>ArrayList 源码</h3><blockquote>
<ul>
<li>基于下标 index 的查找和修改的时间复杂度是 O(1)，效率较高<br>基于元素值去查询时间复杂度是 O(n)</li>
<li>增加和删除的效率很低，因为 ArrayList 的底层是数组，增加和删除都会有数组移动的操作<br>且增加可能还会引起扩容</li>
</ul>
<p>了解以上两点后再去学习 ArrayList 的源码</p>
<p><strong>学习源码的步骤</strong></p>
<ol>
<li>先看构造函数</li>
<li>看方法实现</li>
</ol>
</blockquote>
<h4 id="手写一个简单-ArrayList"><a href="#手写一个简单-ArrayList" class="headerlink" title="手写一个简单 ArrayList"></a>手写一个简单 ArrayList</h4><blockquote>
<p>了解了 ArrayList 的工作机制后，可以先手写一个简单的 ArrayList，再去对比一下 Java 开发者设计的 ArrayList 机制</p>
</blockquote>
<h4 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h4><blockquote>
<p><strong>add 方法</strong></p>
<ul>
<li>懒加载，使用时才会加载，且初始化容量是 <strong>10</strong></li>
<li>超过容量大小后会扩容，且按原容量的 <strong>1.5</strong> 倍扩容</li>
</ul>
<p><strong>get 方法</strong></p>
<ul>
<li>只能根据下标去删除</li>
<li>判断传入的下标是否越界后，返回该数组元素</li>
</ul>
<p><strong>remove</strong></p>
<ul>
<li>下标检查后移动</li>
<li>移动的逻辑是先复制即将删除的 index 后面的所有元素，然后从 index 开始赋值，再将最后一位设置为 null</li>
</ul>
</blockquote>
<h3 id="ArrayList-和-vector-的区别"><a href="#ArrayList-和-vector-的区别" class="headerlink" title="ArrayList 和 vector 的区别"></a>ArrayList 和 vector 的区别</h3><blockquote>
<p><strong>相同点</strong></p>
<ul>
<li>ArrayList 和 Vector 都默认初始化容量是 10</li>
<li>底层都是基于数组去实现的</li>
<li>都是 List 接口下的子类</li>
</ul>
<p><strong>不同点</strong></p>
<ul>
<li>ArrayList 线程不安全，Vector 线程安全</li>
<li>ArrayList 扩容是原来的 1.5 倍<br>Vector 默认扩容是原来的 2 倍，且扩容倍数可以设置</li>
<li>ArrayList 是懒加载<br>Vector 是通过构造函数去初始化容量为 10</li>
</ul>
</blockquote>
<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><blockquote>
<ul>
<li>底层是双向链表</li>
<li>LinkedList 是线程不安全的</li>
<li>元素允许为 null，允许重复元素</li>
<li>插入、删除效率高（如果根据下标来删除，夏绿还是不高的），查找效率低</li>
<li>不存在容量不足的方法，所以没有扩容</li>
<li>LinkedList 还实现了栈和队列的操作方法，因此可以作为栈、队列和双端队列来使用</li>
</ul>
</blockquote>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote>
<ul>
<li>只能按下标 get，或者 get 头节点或尾节点</li>
</ul>
</blockquote>
<h3 id="get-源码"><a href="#get-源码" class="headerlink" title="get 源码"></a>get 源码</h3><blockquote>
<p>一般来说链表的查询是比较耗时的，必须挨个遍历<br>所以 java 优化了 LinkedList 的 get 时候的查找方法 – 二分查找</p>
<p>分成两半：前一半从头往后，后一半从后往前</p>
</blockquote>
<h3 id="remove-源码"><a href="#remove-源码" class="headerlink" title="remove 源码"></a>remove 源码</h3><blockquote>
<p>先找到节点再删除</p>
<p>找到节点的逻辑和 get 一样</p>
</blockquote>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><blockquote>
<p><strong>常用方法</strong></p>
<ul>
<li>get</li>
<li>keySet</li>
<li>values</li>
<li>entrySet</li>
<li>getOrDefault</li>
</ul>
<p><strong>HashMap 遍历的三种方式</strong></p>
<ul>
<li>keySet 方法配和 get 方法，增强 for 循环遍历 keySet</li>
<li>entrySet  配合增强 for</li>
<li>entrySet 配合 Iterator 迭代器</li>
</ul>
<p><strong>常见知识点</strong></p>
<ul>
<li>HashMap 的 key 是可以存放 null 的，且存放在 index 为 0 的位置<br>HashTable 的 key 是不能存放 null 的</li>
<li>HashMap 的键值对是怎么封装的？<br>Map 接口定义了一个 Entry 对象，交给了子类来实现</li>
<li>HashMap 集合在 Java 1.7 版本是基于数组+链表实现的<br>在 Java 1.8 版本是通过数组 + 链表 + 红黑树实现</li>
</ul>
</blockquote>
<h3 id="HashMap-的KV封装"><a href="#HashMap-的KV封装" class="headerlink" title="HashMap 的KV封装"></a>HashMap 的KV封装</h3><blockquote>
<ul>
<li>Map 接口定义了一个 Entry 对象，交给了子类来实现</li>
<li>HashMap 的 Entry 是基于单向链表实现的</li>
<li>如果用 ArrayList 来实现 HashMap 那么效率很低，查找效率是O（n）<br>但是也有优点，可以保证有序存放<br>但是 HashMap 不追求有序存放，所以其底层是通过计算 hashCode 值来确定其存放位置</li>
</ul>
</blockquote>
<h3 id="Key-的哈希计算原理"><a href="#Key-的哈希计算原理" class="headerlink" title="Key 的哈希计算原理"></a>Key 的哈希计算原理</h3><blockquote>
<p>int index &#x3D; k.hashCode( ) % entrys.length<br>Entrys[index] &#x3D; new Entry&lt;k,v&gt;</p>
<p>逻辑是如果 k相同，那么其哈希值相同，那么其计算出来的index也相同，那么就可以直接计算出其在entrys数组中的位置</p>
</blockquote>
<h3 id="HashMap-解决哈希冲突"><a href="#HashMap-解决哈希冲突" class="headerlink" title="HashMap 解决哈希冲突"></a>HashMap 解决哈希冲突</h3><blockquote>
<ul>
<li>HashMap 采用了链表来哦解决该问题<br>即：存储在同一链表中的元素是哈希值相同但是值不同的</li>
</ul>
</blockquote>
<h3 id="put-方法"><a href="#put-方法" class="headerlink" title="put 方法"></a>put 方法</h3><blockquote>
<ul>
<li><p>put 方法的核心就是判断是否相等</p>
</li>
<li><pre><code class="java">p.hash == hash &amp;&amp;
    ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 即先判断两个对象的地址，再判断这个对象的 equals 方法</span><br><span class="line">  如果这个对象没有重写 equals 方法，那么默认的就是会比较其地址再比较其成员属性值</span><br><span class="line">  注意：重写 equals 方法必须重写 hashCode 方法</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## HashSet</span><br><span class="line"></span><br><span class="line">- HashSet 是基于 HashMap 来实现的，是一个不允许有重复元素的集合</span><br><span class="line">- HashSet 允许有 null 值</span><br><span class="line">- HashSet 是无序的，即不会记录插入的顺序</span><br><span class="line">- HashSet 没有 get 方法，所以不能使用普通 for 循环遍历，可以使用 foreach 遍历</span><br><span class="line">  因为底层 HashMap 存放元素是散列的，所以没有 index 来提供访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### add 方法</span><br><span class="line"></span><br><span class="line">- 调用的其实就是 HashMap 的put 方法</span><br><span class="line">- key 存放的是传入的参数，所有的 key 初始化的 value 值都是一个 final 的相同值，value 仅作为占位用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多线程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 线程基本概念</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 什么是线程、进程</span><br><span class="line"></span><br><span class="line">- cpu 从硬盘读一段程序到内存中，该执行程序的实例就叫做进程</span><br><span class="line">  一个程序如果被 cpu 多次读取到内存中，则变成多个独立的进程</span><br><span class="line">- 程序：指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念</span><br><span class="line">- 进程是执行程序的一次过程，是一个动态的概念，是系统资源分配的单位</span><br><span class="line">- 在一个进程中可以包括多个线程，一个进程中至少有一个线程，线程是cpu调度和执行的单位</span><br><span class="line">- 很多多线程是模拟出来的，真正的多线程是指有多个cpu，即多核，如服务器，如果是模拟出来的多线程，cpu在同一时间只能处理一个代码，只不过切换的很快，给人同时执行的错觉</span><br><span class="line">- 在java程序运行时，即使没有创建自己的线程，后台也会有多个线程，如main线程，gc线程</span><br><span class="line">- main线程是用户线程，gc是jvm给的称为守护线程</span><br><span class="line">- main（）称之为主线程，为系统的入口，用于执行整个程序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 多线程使用场景</span><br><span class="line"></span><br><span class="line">- 客户端（移动端）开发</span><br><span class="line">- 异步发送短信、邮件</span><br><span class="line">- 将执行比较耗时的代码改成多线程异步执行</span><br><span class="line">- 异步写入日志，日志框架底层</span><br><span class="line">- 多线程下载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 基本线程机制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 创建及调用任务</span><br><span class="line"></span><br><span class="line">**定义一个倒数任务类**</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class LiftOff implements Runnable &#123;</span><br><span class="line">   protected int countDown = 10;</span><br><span class="line">   private static int taskCount = 0;</span><br><span class="line">   // 标识符用来区分任务的多个实例，它是 final 的，因为它一旦被初始化就不希望被修改</span><br><span class="line">   private final int id = taskCount++;</span><br><span class="line"></span><br><span class="line">   public LiftOff() &#123;&#125;</span><br><span class="line"></span><br><span class="line">   public LiftOff(int countDown) &#123; this.countDown = countDown; &#125;</span><br><span class="line"></span><br><span class="line">   public String status() &#123;</span><br><span class="line">       return &quot;#&quot; + id + &quot;(&quot; +</span><br><span class="line">               (countDown &gt; 0 ? countDown : &quot;LiffOff&quot;) + &quot;),&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       while (countDown-- &gt; 0) &#123;</span><br><span class="line">           System.out.println(status());</span><br><span class="line">           // yield 方法是选择性方法，用来声明我已经完成任务最重要的一部分，可以切换上下文了</span><br><span class="line">           Thread.yield();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</blockquote>
<p><strong>任务类的调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">LiftOff</span>()).start();</span><br><span class="line">            System.out.println(<span class="string">&quot;waiting for liftoff&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="使用-Executor"><a href="#使用-Executor" class="headerlink" title="使用 Executor"></a>使用 Executor</h3><blockquote>
<p>我们可以使用执行器 (Executor) 来管理 Thread 对象，从而简化并发编程。<br>Executor 在客户端和任务之间提供了一个间接层，与客户端直接执行任务不同，这个中介对象来执行任务。<br>Executor 允许用户管理异步任务的执行，而无须显式地管理线程的生命周期。</p>
<p>以此案例为例，LiftOff 知道如何执行具体的任务，ExecutorService 知道如何构建恰当的上下文来执行 Runnable 对象。<br>这符合<strong>命令设计模式</strong>的思想，这样可以确定 Executor 的类型。<br>命令设计模式就是将 <strong>动作请求者</strong> 和 <strong>任务执行者</strong> 解耦。</p>
</blockquote>
<p><strong>使用newCachedThreadPool</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedThreadPoll</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">LiftOff</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// shutdown 方法可以防止新任务被提交给这个 Executor，调用了 shotdown 后线程会执行完任务后退出</span></span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用newFixedThreadPool, 有限的线程集合来执行任务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedThreadPoll</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">LiftOff</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>使用newSingleThreadExecutor, 运行结果如下</strong></p>
<p>newSingleThreadExecutor就像线程数量为1的newFixedThreadPool，对于希望在另一个线程中连续执行任务是很有用的。<br>如果向 newFixedThreadPool 提交了多个任务，那么任务就会排队执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedThreadPoll</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">LiftOff</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">#0(9),#0(8),#0(7),#0(6),#0(5),#0(4),#0(3),#0(2),#0(1),#0(LiffOff),#1(9),</span></span><br><span class="line"><span class="comment">#1(8),#1(7),#1(6),#1(5),#1(4),#1(3),#1(2),#1(1),#1(LiffOff),</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>





<h3 id="从任务中产生返回值"><a href="#从任务中产生返回值" class="headerlink" title="从任务中产生返回值"></a>从任务中产生返回值</h3><blockquote>
<p>Runnable 是执行工作的独立任务，但是它不返回任何值，如果需要在任务完成时返回一个值，那么可以使用 Callable 接口。</p>
<ul>
<li>Callable 是一种具有类型参数的泛型</li>
<li>它的类型参数表示的是从 Call（）方法中返回的值</li>
<li>并且必须使用ExecutorService.submit() 调用</li>
</ul>
</blockquote>
<p><strong>Callable 实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskWithResult</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskWithResult</span><span class="params">(<span class="type">int</span> id)</span> &#123;<span class="built_in">this</span>.id = id; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>调用</strong></p>
<ul>
<li>submit（）方法会产生 Future 对象，它用 Callable 返回结果的特定类型进行了参数化。</li>
<li>可以用 isDone 来查询Future 是否已经完成。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        ArrayList&lt;Future&lt;String&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// Callable 接口产生的结果用 Future 来接</span></span><br><span class="line">            results.add(exec.submit(<span class="keyword">new</span> <span class="title class_">TaskWithResult</span>(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;String&gt; fs : results) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(fs.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                exec.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h3><p>对 sleep 的调用可以抛出 InterruptedException 异常，并且它在 run 中被捕获，因为异常不能跨线程传播回 main，所以需要在本地处理任务内部产生的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepingTask</span> <span class="keyword">extends</span> <span class="title class_">LiftOff</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (countDown -- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(status());</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><blockquote>
<ul>
<li>线程的优先级将该线程的重要性传递给了调度器。</li>
<li>尽管 cpu 处理现有的线程集的顺序是不确定的，但是调度器倾向让优先权最高的线程先执行。</li>
<li>但是这不意味着优先级低的线程不会得到执行，即优先权不会导致死锁，其仅仅只是执行的频率低。</li>
</ul>
</blockquote>
<p><strong>优先级线程声明</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimplePriorities</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">countDown</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">double</span> d;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> priority;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimplePriorities</span><span class="params">(<span class="type">int</span> priority)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread() + <span class="string">&quot;: &quot;</span> + countDown;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在 run 开头设置线程的优先级</span></span><br><span class="line">        Thread.currentThread().setPriority(priority);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 为了体现优先级的效果，加入了浮点数运算</span></span><br><span class="line">                d += (Math.PI + Math.E) / (<span class="type">double</span>) i;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    Thread.<span class="keyword">yield</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (-- countDown == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedThreadPoll</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">SimplePriorities</span>(Thread.MIN_PRIORITY));</span><br><span class="line">        &#125;</span><br><span class="line">        exec.execute(<span class="keyword">new</span> <span class="title class_">SimplePriorities</span>(Thread.MAX_PRIORITY));</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="让步"><a href="#让步" class="headerlink" title="让步"></a>让步</h3><blockquote>
<p>如果知道已经完成了在 run( ) 方法的循环的一次迭代过程中所需的工作，就可以给线程调度机制一个暗示：此线程的工作已经完成的差不多了，可以让别的线程使用 cpu 了，这个暗示可以通过调用 yield( ) 来做出（不过这只是一种暗示，没有任何机制会保证它会被采纳）。</p>
<p>即调用 yield ( ) 时，是在建议具有相同优先级的其他线程可以运行。</p>
<p>但是不能太依赖与 yield 来进行线程调度，很多时候他也被误用。</p>
</blockquote>
<h3 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h3><blockquote>
<p>所谓后台（daemon）线程，是指在程序运行的时候在后台提供一种通用服务的线程，这种线程并不属于程序中不可或缺的部分。因此，所有的非后台线程结束时，程序也就终止了，同时会杀死进程中所有的后台线程。反过来说，只要有任何的非后台线程还在运行，程序就不会终止。比如，执行main（）的就是一个非后台线程。</p>
</blockquote>
<p><strong>1-1线程声明</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleDaemons</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>1-2调用</strong></p>
<p>必须在线程 start 之前将其设置成后台线程<br>一旦 main 线程完成其工作，就没什么能阻止程序终止了，因为除了后台线程之外已经没有任何线程在运行了。<br>main 线程被设定 sleep 了一段时间，所以能观察到所有后台线程启动的结果，否则的话可能看不到任何后台线程的启动（只是可能）<br>或者尝试加大 main 线程的睡眠时间，可观察到更多后台线程的信息的打印。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">daemon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">SimpleDaemons</span>());</span><br><span class="line">            <span class="comment">// must call before start</span></span><br><span class="line">            daemon.setDaemon(<span class="literal">true</span>);</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;All daemons started&quot;</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">175</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2-1定制 ThreadFactory</strong></p>
<p>SimpleDaemons 创建了显式的线程，以便可以设置他们的后台标志，也可以通过定制的 ThreadFactory 定制由 Executors 创建的线程属性（后台、优先级、名称）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2-2 创建线程所需完成的任务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonFromFactory</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot; &quot;</span> +<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Interrupted&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2-3 调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedThreadPoll</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newCachedThreadPool(<span class="keyword">new</span> <span class="title class_">DaemonThreadFactory</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">DaemonFromFactory</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;All daemons started&quot;</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="加入一个线程"><a href="#加入一个线程" class="headerlink" title="加入一个线程"></a>加入一个线程</h3><blockquote>
<ul>
<li>一个线程可以在其他线程之上调用 join( ) 方法，其效果是等待一段时间直到第二个线程结束才继续执行。</li>
<li>如果一个线程在另一个线程 t 上调用 t.join( ) ，此线程将会被挂起，直到目标线程 t 结束才恢复</li>
<li>也可以在调用 join 时带上一个超时参数，这样目标线程在规定时间还没结束的话，join 总会返回</li>
<li>join 方法的调用可以被中断，在调用线程上调用 interrupt （）方法</li>
</ul>
</blockquote>
<p><strong>定义 Thread类</strong></p>
<p>Sleeper 是一个 Thread 类，它要休眠一段时间，休眠时间是由构造器返回。<br>在 run 方法中，sleep 方法有可能在指定的时间内返回，也可能被打断，在 catch 中打印被打断的信息<br>然而，catch 语句会清理 isInterrupted 的信息，所以结果总为 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sleeper</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> duration;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sleeper</span><span class="params">(String name, <span class="type">int</span> sleepTime)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        duration = sleepTime;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(duration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot; was interrupted&quot;</span> + <span class="string">&quot;isInterrupted(): &quot;</span> + isInterrupted());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;has awakened&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Joiner 类</strong></p>
<p>Joiner 线程将通过在 Sleeper 对象上调用 join 方法来等待 Sleeper 醒来，在 main 线程里面，每个 Sleeper 都有一个 Joiner，如果 Sleeper 被打断或正常结束， Joiner 将会和 Sleeper 一同结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Joiner</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Sleeper sleeper;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Joiner</span><span class="params">(String name, Sleeper sleeper)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.sleeper = sleeper;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleeper.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;interrupted&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; join completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sleeper</span></span><br><span class="line">                <span class="variable">sleepy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sleeper</span>(<span class="string">&quot;Sleepy&quot;</span>, <span class="number">1500</span>),</span><br><span class="line">                grumpy = <span class="keyword">new</span> <span class="title class_">Sleeper</span>(<span class="string">&quot;grumpy&quot;</span>, <span class="number">1500</span>);</span><br><span class="line">        <span class="type">Joiner</span></span><br><span class="line">                <span class="variable">dopey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Joiner</span>(<span class="string">&quot;dopey&quot;</span>, sleepy),</span><br><span class="line">                doc = <span class="keyword">new</span> <span class="title class_">Joiner</span>(<span class="string">&quot;doc&quot;</span>, grumpy);</span><br><span class="line">        grumpy.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h3><blockquote>
<ul>
<li>线程组持有一个线程集合</li>
<li>引用 sun 的架构师的一句话：最好把线程组看成是一次失败的尝试，忽略它就好</li>
</ul>
</blockquote>
<h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><blockquote>
<p>可以把单线程程序当作在问题域求解单一实体，每次只能做一件事。</p>
<p>但是有了并发，就要考虑两个实体试图使用同一个资源。</p>
</blockquote>
<h3 id="不正确地访问资源"><a href="#不正确地访问资源" class="headerlink" title="不正确地访问资源"></a>不正确地访问资源</h3><p>**实现一个 IntGenerator **</p>
<p>这个实例是实现一个生产偶数的任务，而其他任务消费这里生产的数字。<br>首先创建一个 IntGenerator 的抽象类，它必须包含 EvenChecker 必须有的方法：一个 next 方法和一个可以执行撤销的方法。<br>这个类没有实现 Generator 接口，因为它必须产生一个 int，而泛型不支持基本数据类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">IntGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">canceled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// allow this to be canceled</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;<span class="built_in">this</span>.canceled = <span class="literal">true</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCanceled</span><span class="params">()</span> &#123;<span class="keyword">return</span> canceled;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>EvenChecker</strong></p>
<ul>
<li>在本例中，可以被撤销的类不是 Runnable，而是所有依赖于 IntGenerator 对象的 EvenChecker 任务来测试它。</li>
<li>一个任务不可以依赖另一个任务，因为任务关闭的顺序不可以被保证，这里通过任务依赖非任务对象来消除潜在的竞争条件。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvenChecker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntGenerator generator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvenChecker</span><span class="params">(IntGenerator g, <span class="type">int</span> ident)</span> &#123;</span><br><span class="line">        generator = g;</span><br><span class="line">        id = ident;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!generator.isCanceled()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> generator.next();</span><br><span class="line">            <span class="keyword">if</span> (val % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(val + <span class="string">&quot; not even&quot;</span>);</span><br><span class="line">                generator.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(IntGenerator gp, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Press Control-c to exit&quot;</span>);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">EvenChecker</span>(gp, i));</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(IntGenerator gp)</span> &#123;</span><br><span class="line">        test(gp, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>具体实现偶数生成器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvenGenerator</span> <span class="keyword">extends</span> <span class="title class_">IntGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过将两次 ++ 分开，加大并发访问的危险程度</span></span><br><span class="line">        ++currentValue;</span><br><span class="line">        ++currentValue;</span><br><span class="line">        <span class="keyword">return</span> currentValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="解决共享资源竞争"><a href="#解决共享资源竞争" class="headerlink" title="解决共享资源竞争"></a>解决共享资源竞争</h3><blockquote>
<ul>
<li>基本上所有的并发模式在解决线程冲突问题的时候，都是采用<strong>序列化访问共享资源</strong>的方案</li>
<li>Java 以提供 synchronized 的形式，为防止资源冲突提供了内置支持。<br>当任务执行被 synchronized 关键字保护的代码片段的时候，它将检查锁是否可用，然后获取锁，执行代码，释放锁。</li>
<li>共享资源一般是以对象形式存在的内存片段，但也可以是文件、输入&#x2F;输出端口，或者是打印机<br>要控制对资源共享的访问，得先把它包装进一个对象，然后把所有要访问这个资源的方法标记为 synchronized<br>如果某一个任务处于对 synchronized 标记的方法的调用中，那么这个线程从该方法返回前，其他所有要调用类中标记为synchronized 方法的线程都将被阻塞。</li>
<li>所有的对象都含有单一的锁（也称为监视器），当在对象上调用<strong>其</strong>任意 synchronized 方法的时候，此对象都会被加锁，这时该对象上的其他 synchronized 方法只有等到前一个方法调用完毕并释放了锁之后才能被调用。<br>所以，对于某个特定的对象来说，其所有 synchronized 方法共享同一个锁。</li>
<li>注意，在使用并发时，将被访问资源设置为 private 是十分重要的，否则，synchronized 就不能防止其他任务直接访问域，这样就会产生冲突。</li>
<li>JVM 会跟踪对象被加锁的数量，如果一个对象被解锁，其计数变为 0<br>一个任务可以多次获得对象的锁，一个任务调用了一个对象的 synchronized 方法，该方法又调用该对象的另一个方法，所得计数会加两次。</li>
<li>针对每个类，也有一个锁，作为类的 class 对象的一部分，所以 synchronized static 方法可以在该类的范围内防止对 static 数据的并发访问。</li>
</ul>
</blockquote>
<p><strong>对刚刚那个偶数生成器重写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedEvenGenerator</span> <span class="keyword">extends</span> <span class="title class_">IntGenerator</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        ++currentValue;</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        ++currentValue;</span><br><span class="line">        <span class="keyword">return</span> currentValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>使用显示的 Lock 对象</strong></p>
<p>尽管使用 Lock 显示对象 的 try-finally 所需要写的代码比 synchronized 多，但这也是它的优点。<br>如果使用 synchronized 关键字的时候某些事务失败了，那么只能抛出异常，没有机会进行清理工作，但是使用 Lock，可以在 finally 的代码块里维护系统的正确状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MutexEvenGenerator</span> <span class="keyword">extends</span> <span class="title class_">IntGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ++currentValue;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">            ++currentValue;</span><br><span class="line">            <span class="keyword">return</span> currentValue;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="原子性与易变性"><a href="#原子性与易变性" class="headerlink" title="原子性与易变性"></a>原子性与易变性</h3><blockquote>
<p>原子性可以应用于除了 long 和 double 之外的所有基本类型之上的“简单操作”。<br>因为 JVM 可以将 64 位（long 和 double 变量）的读取和写入当作两个分离的 32 位操作来执行，这就产生了一个读取和写入的时候可能会上下文切换，（这被称为字撕裂）但是如果使用 vlolatile 关键字来声明 long 和 double ，那么就会获得简单的赋值和返回操作的原子性。</p>
</blockquote>
<h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><h2 id="终结任务"><a href="#终结任务" class="headerlink" title="终结任务"></a>终结任务</h2><h3 id="在阻塞时终结"><a href="#在阻塞时终结" class="headerlink" title="在阻塞时终结"></a>在阻塞时终结</h3><p><strong>线程状态</strong></p>
<blockquote>
<p>一个线程可以处于以下四种状态之一：</p>
<ul>
<li>新建<br>当线程被创建时，它只会短暂的处于这种状态。<br>此时它已经分配了必须的系统资源，并执行了初始化。此刻线程已经有资格获得 cpu 时间了<br>之后调度器把这个线程变成阻塞状态或可运行状态。</li>
<li>就绪<br>在这种状态下，调度器把时间片分给线程，线程就可以运行。</li>
<li>阻塞<br>线程能够运行，但有某个条件组织了他的运行。<br>当线程处于阻塞状态时，调度器将忽略线程，不会分配 cpu 时间，直到它重新进入了就绪态</li>
<li>死亡<br>处于死亡态的线程是不可被调度的，任务通常的死亡方式是从 run 方法返回或被中断。</li>
</ul>
</blockquote>
<p><strong>进入阻塞态</strong></p>
<blockquote>
<p>一个任务进了阻塞态，可能有如下原因：</p>
<ul>
<li>通过调用 sleep 使任务进入休眠状态</li>
<li>通过 wait（）方法使线程挂起，直到线程得到 notify（）或 notifyAll（）消息（或者用等价的 signal 和 signalAll 方法）</li>
<li>任务在等待某个输入&#x2F;输出完成</li>
<li>任务试图调用某个对象上的同步方法，但是其对象锁不可用，因为另一个任务已经获得了这个锁。</li>
</ul>
</blockquote>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><h2 id="线程创建与执行"><a href="#线程创建与执行" class="headerlink" title="线程创建与执行"></a>线程创建与执行</h2><blockquote>
<p>创建线程的方式（针对 Java 开发）：</p>
<ol>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
<li>使用匿名内部类创建</li>
<li>使用lambda表达式创建</li>
<li>使用 Callable 和 Future 创建线程</li>
<li>使用线程池（例如 Excutor 框架）</li>
<li>spring @Async 异步注解</li>
</ol>
</blockquote>
<h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>创建线程步骤：</p>
<ol>
<li>自定义线程类继承Thread类则自定义的线程类就变成了线程类</li>
<li>重写run（）方法，编写线程执行体</li>
<li>创建线程对象，调用start（）方法启动线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLearning1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run方法：&quot;</span>+ i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLearning1</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLearning1</span>();</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Run（）和start（）"><a href="#Run（）和start（）" class="headerlink" title="Run（）和start（）"></a>Run（）和start（）</h3><img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-05-17 22.07.02.png" alt="截屏2022-05-17 22.07.02" style="zoom:50%;" />



<p>说明：</p>
<ol>
<li>调用start（）和调用run（）方法都可以执行该线程所创建的方法，但是如果在主线程调用run方法，那么主线程会转去执行run方法，执行结束之后才会继续执行主线程，而如果是调用start（）方法，就意味着在主线程外开辟了一个线程，cpu交替执行两个线程。</li>
<li>线程开启不一定立即执行，由cpu调度</li>
</ol>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>创建步骤：</p>
<ol>
<li>自定义类实现Runnable接口</li>
<li>实现Run（）方法，编写线程执行体</li>
<li>&#x3D;&#x3D;创建线程对象调用构造器以自定义类为参数&#x3D;&#x3D;，调用start（）方法启动线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLearning2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLearning2</span> <span class="variable">threadLearning2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLearning2</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(threadLearning2);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注：继承Thread类与实现Runnable接口比较</p>
<ul>
<li>继承Thread类<ul>
<li>子类继承Thread类具备多线程能力</li>
<li>启动线程：子对象.start( )</li>
<li>&#x3D;&#x3D;不建议使用，避免OOP单继承局限性&#x3D;&#x3D;</li>
</ul>
</li>
<li>实现Runnable接口<ul>
<li>实现接口Runnable具有多线程能力</li>
<li>启动线程：传入目标对象+Thread.start( )</li>
<li>&#x3D;&#x3D;推荐使用，避免了单继承局限性，灵活方便，方便同一个对象被多个线程使用&#x3D;&#x3D;</li>
</ul>
</li>
</ul>
<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><p>步骤：</p>
<ol>
<li>实现Callable接口，需要返回值类型</li>
<li>重写call方法，需要抛出异常</li>
<li>创建目标对象</li>
<li>创建执行服务</li>
<li>提交执行</li>
<li>获取结果</li>
<li>关闭服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest2</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line"><span class="comment">//1. 实现Callable接口，需要返回值类型</span></span><br><span class="line"><span class="comment">//2. 重写call方法，需要抛出异常</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 创建目标对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ThreadTest2</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest2</span>();</span><br><span class="line">    <span class="type">ThreadTest2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest2</span>();</span><br><span class="line">    <span class="type">ThreadTest2</span> <span class="variable">test3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest2</span>();</span><br><span class="line">    <span class="comment">//4. 创建执行服务</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//5. 提交执行</span></span><br><span class="line">    Future&lt;Boolean&gt; r1 = service.submit(test1);</span><br><span class="line">    Future&lt;Boolean&gt; r2 = service.submit(test2);</span><br><span class="line">    Future&lt;Boolean&gt; r3 = service.submit(test3);</span><br><span class="line"><span class="comment">//6. 获取结果</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">rs1</span> <span class="operator">=</span> r1.get();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">rs2</span> <span class="operator">=</span> r2.get();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">rs3</span> <span class="operator">=</span> r3.get();</span><br><span class="line"><span class="comment">//7. 关闭服务</span></span><br><span class="line">    service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="*线程安全"></a>*线程安全</h2><blockquote>
<p><strong>线程安全性问题其实线程如何保证同步</strong></p>
<p>比如说，多个线程同时对一个全局变量进行写的操作，可能会收到其他线程的干扰<br>要注意的是，多个线程同时对一个线程进程读操作是没有线程安全问题的</p>
</blockquote>
<h3 id="线程安全问题demo"><a href="#线程安全问题demo" class="headerlink" title="线程安全问题demo"></a>线程安全问题demo</h3><p>创建两个线程对共享变量进行写操作，观察他们的竞争情况<br>下面的代码的输出结果是两个线程无规律的交替执行减操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadCount</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 加入休眠之后会增加线程竞争的可能性，扩大实验效果</span></span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                --count;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadCount</span> <span class="variable">threadCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadCount</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(threadCount).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(threadCount).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="线程安全问题解决方法"><a href="#线程安全问题解决方法" class="headerlink" title="线程安全问题解决方法"></a>线程安全问题解决方法</h3><blockquote>
<p>核心思想：上锁<br><strong>在 JVM 中，多个线程竞争锁的资源，谁（线程）能够获取到锁，谁就能执行代码</strong></p>
<p>主要的方式有以下几种</p>
<ul>
<li>使用 synchronized 锁<br>jdk 1.6 开始 锁的升级过程（偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁）</li>
<li>使用 Lock 锁（JUC）<br>需要自己实现锁的升级过程，底层是基于 aqs + cas 实现，不属于重量级锁</li>
<li>使用 ThreadLocal<br>需要注意内存泄漏问题</li>
<li>原子类 CAS 非阻塞式</li>
</ul>
</blockquote>
<h3 id="synchronized-锁"><a href="#synchronized-锁" class="headerlink" title="synchronized 锁"></a>synchronized 锁</h3><blockquote>
<ul>
<li>synchronized 是一种非公平锁</li>
<li>即谁抢到锁谁执行，抢不到就等待</li>
<li>加上 synchronized 关键字后会变成单线程执行</li>
</ul>
<p><strong>基本用法</strong></p>
<ul>
<li>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码快前要获得 给定对象 的锁。</li>
<li>修饰实例方法，作用于当前实例加锁，进入同步代码前要获得 当前实例 的锁</li>
<li>修饰静态方法，作用于当前类对象（当前类.class）加锁，进入同步代码前要获得 当前类对象 的锁</li>
</ul>
</blockquote>
<h4 id="修饰代码块"><a href="#修饰代码块" class="headerlink" title="修饰代码块"></a>修饰代码块</h4><p>在多线程情况下，需要的是同一个对象锁，所以可以通过一个 this 锁来解决</p>
<p>这个 this 锁其实就是一种对象锁，括号里需要加上一样的对象，new Object 也行</p>
<p>仍然是一样的代码，但是不在方法上加 synchronized<br>可以发现，现在两个线程仍然是无规律执行方法，但是公共变量 count 是按顺序得从 100 开始减，这就是安全的在执行减少</p>
<p>因为两个线程在竞争 this 锁时，竞争到的那个会执行代码，没拿到锁的会阻塞，当拥有锁的线程执行完 this 锁的代码后，会唤醒另一个线程执行</p>
<p>synchronized 是比较智能的，获取锁释放锁都是底层完成的</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-01%2023.50.11.png" style="zoom:40%">





<h4 id="修饰实例方法"><a href="#修饰实例方法" class="headerlink" title="修饰实例方法"></a>修饰实例方法</h4><p>将 synchronized 加在实例方法上默认使用的是 this 锁</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-01%2023.43.05.png" style="zoom:40%">





<h4 id="修饰静态方法"><a href="#修饰静态方法" class="headerlink" title="修饰静态方法"></a>修饰静态方法</h4><p>将 synchronized 加在静态方法上默认使用的是当前的类名称.class 锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadCount</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                call();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ThreadCount.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="synchronized-死锁问题"><a href="#synchronized-死锁问题" class="headerlink" title="synchronized 死锁问题"></a>synchronized 死锁问题</h4><blockquote>
<p>死锁本质就是 a 线程运行需要的资源被 b 线程拿到，b 线程需要的资源在 a 线程这里，这样两个线程都会卡住无法运行，拓展到 n 个线程也是可以的。</p>
<p>下面给出了一个 demo，从这个 demo 可以看出，写代码时尽量避免嵌套锁，不然容易卡住</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="string">&quot;lock&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 线程1需要获取 lock 再获取 a方法this锁</span></span><br><span class="line">                <span class="comment">// 线程2需要获取this 锁在 获取B方法lock锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    a();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    b();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,a方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,b方法...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">deadLockDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(deadLockDemo);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(deadLockDemo);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="死锁排查工具"><a href="#死锁排查工具" class="headerlink" title="死锁排查工具"></a>死锁排查工具</h4><blockquote>
<p>jconsole 是 java 自带的死锁排查工具，在 jdk 安装目录 home&#x2F;bin 目录下，在启动界面选择当前项目，选择不安全的连接，然后选择线程选项吗即可找到死锁的线程</p>
<p>点击检测死锁可以自动帮我们找到死锁的线程</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-17%2022.57.17.png" style = "zoom:40%">









<h3 id="springmvc-使用锁"><a href="#springmvc-使用锁" class="headerlink" title="springmvc 使用锁"></a>springmvc 使用锁</h3><blockquote>
<p>springmvc 的 bean 对象默认是单例，即多个请求访问同一个接口，只会创建一个对象，所以如果在 springmvc 的controller 类的方法上加上 synchronized 锁，会导致该方法变为单线程</p>
<p>如果将 controller 用 @Scope(value &#x3D; “prototype”) 指定为多例，那么就不会共享类的某一成员变量了</p>
</blockquote>
<h2 id="线程通讯"><a href="#线程通讯" class="headerlink" title="*线程通讯"></a>*线程通讯</h2><h3 id="wait、notify-使用事项"><a href="#wait、notify-使用事项" class="headerlink" title="wait、notify 使用事项"></a>wait、notify 使用事项</h3><blockquote>
<ul>
<li>wait ( )方法用于释放锁资源，并且当前线程会阻塞，notify 用于唤醒线程</li>
<li>使用 wait ( ) 方法必须声明好锁对象，不然会报错，并且是获取锁的对象去调用 wait</li>
<li>wait 和 notify 方法需要放到 synchronized 同步代码块中使用</li>
</ul>
<p>下面的 demo 展示的是在主线程中创建一个子线程去打印两行语句，打印语句中间会调用 wait 方法，而主线程会在 3 秒后唤醒持有 objectLock 的线程。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaitNotifyDemo1</span> &#123;</span><br><span class="line">    <span class="comment">// 自己声明的一个对象锁，对象锁可以是任意对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">objectLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WaitNotifyDemo1</span>().print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// wait 方法需要放在 synchronized 同步代码块中</span></span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;&lt;1&gt;&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 阻塞 持有 objectLock 的线程</span></span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;&lt;2&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 主线程 3 秒后唤醒被阻塞的子线程</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="comment">// notify 需要放到同步代码快中</span></span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">            objectLock.notify();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="实现生产者消费者模型"><a href="#实现生产者消费者模型" class="headerlink" title="实现生产者消费者模型"></a>实现生产者消费者模型</h3><blockquote>
<p>本节会用 wait 和 notify 实现一个生产者与消费者模型</p>
<p>模型 demo 效果如下，在 demo 中有三个内部类，一个 User 类作为资源，拥有姓名和性别两个属性，还有两个类继承 Thread，分别是输入类和输出类，输入类每次会访问到共享变量 User，并根据 count 值不同来对 User 写入不同的属性值，而输出类的作用是将输入类输入的属性打印出来。</p>
</blockquote>
<h4 id="未加锁-demo"><a href="#未加锁-demo" class="headerlink" title="未加锁 demo"></a>未加锁 demo</h4><blockquote>
<p>没有经过任何线程安全处理的 demo 如下，代码本身做什么是比较好理解的，但是运行结果是很有趣的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerAndConsumer</span> &#123;</span><br><span class="line">    <span class="comment">// 全局共享对象</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> String gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InputThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InputThread</span><span class="params">(User user)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.user = user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个写入类</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 根据 count 值的不同来写入两个不同的 User 对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    user.name = <span class="string">&quot;erics&quot;</span>;</span><br><span class="line">                    user.gender = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    user.name = <span class="string">&quot;rose&quot;</span>;</span><br><span class="line">                    user.gender = <span class="string">&quot;female&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count = (count + <span class="number">1</span>) % <span class="number">2</span>; <span class="comment">// 该 count 值只会在 0 1 之间循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出对象，打印当前线程拿到的全局对象</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">OutputThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OutputThread</span><span class="params">(User user)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.user = user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name: &quot;</span> + user.name + <span class="string">&quot;, &quot;</span> + <span class="string">&quot;gender: &quot;</span> + user.gender);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 全局对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 输入线程</span></span><br><span class="line">        <span class="type">InputThread</span> <span class="variable">inputThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputThread</span>(user);</span><br><span class="line">        <span class="comment">// 输出线程</span></span><br><span class="line">        <span class="type">OutputThread</span> <span class="variable">outputThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputThread</span>(user);</span><br><span class="line"></span><br><span class="line">        inputThread.start();</span><br><span class="line">        outputThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ProducerAndConsumer</span>().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>运行结果如下: 打印的结果完全是乱的，并没有按照代码逻辑：erics male，rose female 来打印。<br>这个是很好理解的，当前 user 作为共享资源并没有被上锁，输入和输出线程可以同时对该对象进行操作，当输出线程准备打印 user 时，可能刚好性别被改了，名字还没来得及改，所以就会出现“性别混乱”的现象。</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-18%2001.06.42.png" style="zoom:50%">







<h4 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h4><blockquote>
<p>第一次优化的点在于，我们需要将名称和性别匹配上，做到这一点就需要输入线程和输出线程在分别拿到 User 资源的时候其他线程不允许对该资源进行操作，于是很容易我们可以想到使用 synchronized 对 user 对象进行加锁，代码如下,仅展示两个线程的方法修改</p>
<p>该代码可以做到打印的名称和性别能够对应，但是仍然是有问题，每次打印会讲相同属性的对象打印很多次。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InputThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InputThread</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个写入类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 根据 count 值的不同来写入两个不同的 User 对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    user.name = <span class="string">&quot;erics&quot;</span>;</span><br><span class="line">                    user.gender = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    user.name = <span class="string">&quot;rose&quot;</span>;</span><br><span class="line">                    user.gender = <span class="string">&quot;female&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count = (count + <span class="number">1</span>) % <span class="number">2</span>; <span class="comment">// 该 count 值只会在 0 1 之间循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出对象，打印当前线程拿到的全局对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutputThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OutputThread</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;name: &quot;</span> + user.name + <span class="string">&quot;, &quot;</span> + <span class="string">&quot;gender: &quot;</span> + user.gender);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="第二次优化"><a href="#第二次优化" class="headerlink" title="第二次优化"></a>第二次优化</h4><blockquote>
<p>上述问题还需要实现交替单次打印用户信息，基本思想是在 User 内加入 flag 状态位，然后通过wait 和 notify 结合来完成</p>
<p>完整 demo 代码如下，需要好好品味</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerAndConsumer</span> &#123;</span><br><span class="line">    <span class="comment">// 全局共享对象</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> String gender;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当 flag == false ，输入线程可以输入，flag == true，输出线程可以输出，flag 默认为 false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InputThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InputThread</span><span class="params">(User user)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.user = user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个写入类</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 根据 count 值的不同来写入两个不同的 User 对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (user.flag == <span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            user.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        user.name = <span class="string">&quot;erics&quot;</span>;</span><br><span class="line">                        user.gender = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        user.name = <span class="string">&quot;rose&quot;</span>;</span><br><span class="line">                        user.gender = <span class="string">&quot;female&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 输入完成之后，需要将 flag 改为 true 并唤醒输出线程</span></span><br><span class="line">                    user.flag = <span class="literal">true</span>;</span><br><span class="line">                    user.notify();</span><br><span class="line">                &#125;</span><br><span class="line">                count = (count + <span class="number">1</span>) % <span class="number">2</span>; <span class="comment">// 该 count 值只会在 0 1 之间循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出对象，打印当前线程拿到的全局对象</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">OutputThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OutputThread</span><span class="params">(User user)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.user = user;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (user) &#123;</span><br><span class="line">                    <span class="comment">// 如果 flag == false，即输出线程不能输出，则应该释放锁资源,同时阻塞自己</span></span><br><span class="line">                    <span class="keyword">if</span> (!user.flag) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            user.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;name: &quot;</span> + user.name + <span class="string">&quot;, &quot;</span> + <span class="string">&quot;gender: &quot;</span> + user.gender);</span><br><span class="line">                    <span class="comment">// 输出完成后需要修改 flag 值并唤醒线程</span></span><br><span class="line">                    user.flag = <span class="literal">false</span>;</span><br><span class="line">                    user.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 全局对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 输入线程</span></span><br><span class="line">        <span class="type">InputThread</span> <span class="variable">inputThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputThread</span>(user);</span><br><span class="line">        <span class="comment">// 输出线程</span></span><br><span class="line">        <span class="type">OutputThread</span> <span class="variable">outputThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputThread</span>(user);</span><br><span class="line"></span><br><span class="line">        inputThread.start();</span><br><span class="line">        outputThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ProducerAndConsumer</span>().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="join-方法原理"><a href="#join-方法原理" class="headerlink" title="join 方法原理"></a>join 方法原理</h3><h4 id="wait-和-notify-底层原理"><a href="#wait-和-notify-底层原理" class="headerlink" title="wait 和 notify 底层原理"></a>wait 和 notify 底层原理</h4><blockquote>
<p>首先了解wait 和 notify 方法的工作原理</p>
<ul>
<li>首先是若干线程共同竞争锁资源，只有抢到锁资源的线程才能执行，剩下的会进入到一个 blockedThread 队列里等待锁资源被释放继续竞争锁资源。</li>
<li>当线程调用 wait 方法意味着释放锁资源并被堵塞，该线程会进入到 waitSet 集合</li>
<li>当线程调用 notify 方法并不是把锁资源给到某一线程，而是将在 waitSet 集合里的线程转移到 blockedThread 队列中，准备竞争锁资源。</li>
</ul>
<p>如下图所示</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-18%2017.31.12.png" style = "zoom:50%">







<h4 id="join-底层原理"><a href="#join-底层原理" class="headerlink" title="join 底层原理"></a>join 底层原理</h4><blockquote>
<p>翻看 join 源码可知：join 就是利用 wait 封装的，谁调用的 wait 方法谁就会释放锁资源，但是其唤醒代码是在 jvm 层面做的，<br>当拥有锁的线程执行完之后，会唤醒锁池里的所有线程</p>
</blockquote>
<h2 id="多线程7种执行状态"><a href="#多线程7种执行状态" class="headerlink" title="*多线程7种执行状态"></a>*多线程7种执行状态</h2><blockquote>
<p>多线程有五种基础状态：</p>
<ul>
<li>初始化状态</li>
<li>就绪态</li>
<li>运行态</li>
<li>死亡状态</li>
<li>阻塞状态</li>
</ul>
<p>现在很多场合还加了两种状态：</p>
<ul>
<li>超市等待</li>
<li>等待状态</li>
</ul>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-18%2020.51.00.png" style="zoom:50%">





<h3 id="sleep-防止cpu-100"><a href="#sleep-防止cpu-100" class="headerlink" title="sleep 防止cpu 100%"></a>sleep 防止cpu 100%</h3><blockquote>
<p>在代码中写一个 while 死循环后 cpu 的使用率直接飙高，当在 while 中添加一个 Thread.sleep(30 ) 之后cpu 的使用率就没那么高了，因为其使得线程每间隔 30 秒从就绪到运行</p>
</blockquote>
<h3 id="用户线程与守护线程"><a href="#用户线程与守护线程" class="headerlink" title="用户线程与守护线程"></a>用户线程与守护线程</h3><blockquote>
<p>当我们在主线程中创建了一个子线程，子线程的执行不会因为主线程的停止而停止，如下代码:<br>当主线程执行完毕打印了语句后，子线程仍然在执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSleep</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;我是子线程&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是主线程，我已经执行完毕&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>这是因为 java 中线程分为两种：用户线程和守护线程。<br>通过 Thread.setDaemon(true)，可以将线程设置为守护线程，默认为 false，即用户线程。</p>
<p>区别：</p>
<ul>
<li>守护线程依赖于用户线程，用户线程退出了，守护线程也就会退出，典型的守护线程如垃圾回收线程</li>
<li>用户线程是独立存在的，不会因为其他的线程退出而退出</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSleep</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是子线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>); <span class="comment">// 设置为守护线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是主线程，我已经执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="安全的停止一个线程"><a href="#安全的停止一个线程" class="headerlink" title="*安全的停止一个线程"></a>*安全的停止一个线程</h2><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><blockquote>
<p>不推荐</p>
</blockquote>
<h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><blockquote>
<p>interrupt 单独使用的话只能停止正在休眠的线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KillThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KillThread</span> <span class="variable">killThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KillThread</span>();</span><br><span class="line">        killThread.start();</span><br><span class="line">        <span class="comment">// 主线程 sleep 3 秒后中短子线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;中断子线程&quot;</span>);</span><br><span class="line">        killThread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>要想用 interrupt 终止一个正在运行态的线程，需要配合 isINterrupt 方法使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KillThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isInterrupted()) &#123; <span class="comment">// 如果当前线程被终止，就停止执行</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KillThread</span> <span class="variable">killThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KillThread</span>();</span><br><span class="line">        killThread.start();</span><br><span class="line">        <span class="comment">// 主线程 sleep 3 秒后中短子线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;中断子线程&quot;</span>);</span><br><span class="line">        killThread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="自己设置标志位"><a href="#自己设置标志位" class="headerlink" title="自己设置标志位"></a>自己设置标志位</h3><blockquote>
<p>推荐使用</p>
<p>需要注意的是标志位最好使用 volatile 关键字修饰</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KillThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KillThread</span> <span class="variable">killThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KillThread</span>();</span><br><span class="line">        killThread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;中断子线程&quot;</span>);</span><br><span class="line">        killThread.flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="*Lock 锁"></a>*Lock 锁</h2><blockquote>
<ul>
<li>Jdk1.5 新增的 ReentrantLock 类同样可以达到锁的效果，使用上比 synchronized 更灵活</li>
<li>synchronized 是属于关键字，其底层是虚拟机用 c++ 实现好的</li>
<li>Lock 锁基于 AQS 实现，其有一个不好的点，就是在没获得锁的时候会变成重量级锁</li>
<li>synchronized 在 jdk 1.9 的时候经历了一次提升，提升后还是更推荐使用 synchronized</li>
</ul>
</blockquote>
<h3 id="Lock-锁的正确使用"><a href="#Lock-锁的正确使用" class="headerlink" title="Lock 锁的正确使用"></a>Lock 锁的正确使用</h3><blockquote>
<p>使用 lock 锁千万别忘了释放锁</p>
</blockquote>
<p><strong>错误使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thread1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已经拿到锁&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thread2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已经拿到锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLock</span> <span class="variable">threadLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLock</span>();</span><br><span class="line">        threadLock.thread1();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        threadLock.thread2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>正确使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thread1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已经拿到锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已经释放锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thread2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已经拿到锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 已经释放锁&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLock</span> <span class="variable">threadLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLock</span>();</span><br><span class="line">        threadLock.thread1();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        threadLock.thread2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="condition-方法"><a href="#condition-方法" class="headerlink" title="condition 方法"></a>condition 方法</h3><blockquote>
<p>wait 和 notify 需要配合 synchronized 锁使用，所以 lock 锁的通信方法有自己的一套方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 得先拿到锁才能进行阻塞啊</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 拿到锁&quot;</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唤醒的过程也是在拿到锁的过程中完成的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 唤醒线程已经拿到锁&quot;</span>);</span><br><span class="line">            condition.signal();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 唤醒线程唤醒成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 唤醒线程释放锁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConditionTest</span> <span class="variable">conditionTest</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ConditionTest</span>();</span><br><span class="line">        conditionTest.call();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        conditionTest.signal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="yield-方法"><a href="#yield-方法" class="headerlink" title="*yield 方法"></a>*yield 方法</h2><blockquote>
<p>主动释放 cpu 执行权，但是这只能表示一种谦让，不一定会成功</p>
</blockquote>
<h2 id="多线程的优先级"><a href="#多线程的优先级" class="headerlink" title="*多线程的优先级"></a>*多线程的优先级</h2><blockquote>
<ul>
<li>优先级有 1-10</li>
<li>linux 系统忽略了 java 线程的优先级，所以没有效果</li>
</ul>
</blockquote>
<h3 id="wait-x2F-join-和-sleep-的区别"><a href="#wait-x2F-join-和-sleep-的区别" class="headerlink" title="wait&#x2F;join 和 sleep 的区别"></a>wait&#x2F;join 和 sleep 的区别</h3><blockquote>
<ul>
<li>wait 方法在等待过程中释放对象锁</li>
<li>sleep 在睡眠时不释放对象锁</li>
<li>Sleep 不释放锁，所以不需要在 synchronized 代码块中使用，而wait 方法是需要在 synchronized 代码块中使用的</li>
</ul>
</blockquote>
<h3 id="wait-和-notify-为什么放在父类中"><a href="#wait-和-notify-为什么放在父类中" class="headerlink" title="wait 和 notify 为什么放在父类中"></a>wait 和 notify 为什么放在父类中</h3><blockquote>
<p>之前说过很多次，wait 和 notify 方法必须配合 synchronized 使用，所以这来宁哥方法都需要配合对象锁来使用，所以放在 Object 类中拿对象锁就会方便一些</p>
</blockquote>
<h2 id="字节码角度分析线程安全"><a href="#字节码角度分析线程安全" class="headerlink" title="*字节码角度分析线程安全"></a>*字节码角度分析线程安全</h2><blockquote>
<p>先写一个 demo 如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread02</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread02</span>();</span><br><span class="line">        <span class="type">Thread02</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread02</span>();</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>在终端中进入到该类的编译后的类（out 或 target 目录中的类）的目录中，输入 javap -p -v xxx.class 的命令即可</p>
</blockquote>
<p>其中关于 sum++ 的字节码是这么写的，getstatic #3 是从常量池中获取 sum，iconst_1 是准备一个常量 1，然后增加到获取的常量后再放回常量池</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-07-17%2001.35.23.png">

<p>看到这段代码也就明白了为什么会出现结果不是 20000 的情况，当单核 cpu 在执行线程1的时候可能刚执行完9、12、13行代码，准备把 sum &#x3D; 1 的结果推回常量池，立马切换到线程2，并进行了上下文切换，线程2的 sum 还是为 0，线程2执行完所有的代码并且将 sum &#x3D; 1 推回常量池，cpu回过头来执行线程1，继续从14行执行，但是会有一个上下文切换的动作，此时的 sum &#x3D; 1，所以常量池中的 sum 又变成1了。</p>
<h2 id="Callable-与-FutureTask-分析"><a href="#Callable-与-FutureTask-分析" class="headerlink" title="*Callable 与 FutureTask 分析"></a>*Callable 与 FutureTask 分析</h2><blockquote>
<p>先看体会如下代码：</p>
</blockquote>
<p>**先写一个类实现 Callable 接口，并且将 call 方法的返回值改为 Integer **</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadCallableDemo1</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: starting execute&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: return 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在main 方法中调用</strong><br>当注释掉 futureTask.get() 代码前，主线程 main 先打印然后是子线程的两句打印，这是很容易理解的，当我们取消注释再执行会发现，自线程先调用方法然后才是主线程，因为 get 方法会阻塞主线程，让子线程执行完才继续执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadCallableDemo1</span> <span class="variable">demo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadCallableDemo1</span>();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(demo1);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line"><span class="comment">//        Integer integer = futureTask.get();</span></span><br><span class="line"><span class="comment">//        System.out.println(integer);</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="自己手写-Callable-和-Futuretask"><a href="#自己手写-Callable-和-Futuretask" class="headerlink" title="自己手写 Callable 和 Futuretask"></a>自己手写 Callable 和 Futuretask</h3><p><strong>Callable</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyCallable</span>&lt;V&gt; &#123;</span><br><span class="line">    V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>FutureTusk</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFutureTask</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyCallable&lt;V&gt; myCallable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> V result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFutureTask</span><span class="params">(MyCallable&lt;V&gt; myCallable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myCallable = myCallable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = myCallable.call();</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                lock.notify(); <span class="comment">// 唤醒 lock 锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 run 方法执行完毕返回的结果</span></span><br><span class="line">        <span class="comment">// 主线程阻塞</span></span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait(); <span class="comment">// 谁调用到这里谁阻塞</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>impl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallableImpl</span> <span class="keyword">implements</span> <span class="title class_">MyCallable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: starting execute&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: return 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="其他实现方式"><a href="#其他实现方式" class="headerlink" title="其他实现方式"></a>其他实现方式</h3><p><strong>首先通过一个小demo了解 LockSupport 的用法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 1&quot;</span>);</span><br><span class="line">                LockSupport.park(); <span class="comment">// 阻塞方法</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        LockSupport.unpark(t1); <span class="comment">// 解锁方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>重新实现callable和futuretask</strong></p>
<p>重写后的 futuretask </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFutureTask</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyCallable&lt;V&gt; myCallable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread parkThread; <span class="comment">// 记录当前被阻塞的线程，待会好唤醒</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> V result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFutureTask</span><span class="params">(MyCallable&lt;V&gt; myCallable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myCallable = myCallable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        result = myCallable.call();</span><br><span class="line">        <span class="keyword">if</span> (parkThread != <span class="literal">null</span>) &#123;</span><br><span class="line">            LockSupport.unpark(parkThread);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        parkThread = Thread.currentThread();</span><br><span class="line">        LockSupport.park(); <span class="comment">// 谁调这个方法谁阻塞</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><blockquote>
<p>并发就是多个线程对同一个对象进行操作</p>
<p>以下代码模拟了三个线程抢票的情况<br>三个线程对同一个对象进行操作，代码执行的结果反映了一个问题：多个线程有可能会取得同一张票<br>如何解决问题呢？</p>
</blockquote>
<h3 id="买票案例"><a href="#买票案例" class="headerlink" title="买票案例"></a>买票案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThredTest1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &lt;= <span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时，让结果更加显著</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;我拿到了第&quot;</span> + tickets-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThredTest1</span> <span class="variable">thredTest1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThredTest1</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thredTest1, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thredTest1, <span class="string">&quot;Lily&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thredTest1, <span class="string">&quot;Mack&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span>  <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> gameOver(i);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;跑了：&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断游戏是否结束</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> steps)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (steps &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;winner is &quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Race</span> <span class="variable">race</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(race, <span class="string">&quot;乌龟&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(race, <span class="string">&quot;兔子&quot;</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><h3 id="同步概念"><a href="#同步概念" class="headerlink" title="同步概念"></a>同步概念</h3><blockquote>
<p>处理多线程问题时，多个线程方法同一个对象，并且某些线程还想修改这个对象，这时候我们就需要线程同步，线程同步机制其实就是一个等待机制，多个需要同时访问某个对象的线程进入这个<strong>对象的等待池形成队列</strong>，等待前面线程使用完毕，下一个线程再使用。</p>
</blockquote>
<h3 id="队列、锁"><a href="#队列、锁" class="headerlink" title="队列、锁"></a>队列、锁</h3><blockquote>
<ul>
<li>由于同一进程的多个线程共享同一块存储空间，就存在着访问冲突的问题，为了保证数据在方法中被访问时的正确性，在访问时加入&#x3D;&#x3D;锁机制（synchronized)&#x3D;&#x3D;,当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可</li>
<li>也会导致以下问题<ul>
<li>一个线程持有锁会导致其他需要此锁的线程刮起挂起</li>
<li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引发性能问题</li>
<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="三大不安全案例"><a href="#三大不安全案例" class="headerlink" title="三大不安全案例"></a>三大不安全案例</h3><blockquote>
<p>每个线程都有自己的工作缓存区间，会将访问到的资源拷贝到自己的工作区间，这也导致了一些问题</p>
</blockquote>
<ul>
<li><p>不安全的买票<br>不同的人可能会拿到同一张票并且可能会造成票的数量为负数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeByTickets</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyTicket</span> <span class="variable">buyTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyTicket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不安全取钱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeBanl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">100</span>, <span class="string">&quot;工资&quot;</span>);</span><br><span class="line">        <span class="type">Drawing</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account, <span class="number">50</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        <span class="type">Drawing</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account, <span class="number">100</span>, <span class="string">&quot;Lily&quot;</span>);</span><br><span class="line"></span><br><span class="line">        person1.start();</span><br><span class="line">        person2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="type">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> money, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Account account; <span class="comment">//账户</span></span><br><span class="line">    <span class="type">int</span> drawingMoney; <span class="comment">//要取多少钱</span></span><br><span class="line">    <span class="type">int</span> nowMoney; <span class="comment">// 现有的钱</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Drawing</span><span class="params">(Account account, <span class="type">int</span> drawingMoney, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;钱不够，无法取出&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sleep方法了问题发生的可能性</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        account.money = account.money - drawingMoney;</span><br><span class="line">        nowMoney += drawingMoney;</span><br><span class="line">        System.out.println(account.name + <span class="string">&quot;余额为&quot;</span> + account.money);</span><br><span class="line">        <span class="comment">//this.getName() = Thread.currentThread().getName()</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot;手里的钱&quot;</span> + nowMoney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不安全的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeList</span> &#123;</span><br><span class="line"><span class="comment">//添加10000个线程的名字到list中,最后打印的list长度没有10000</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                 list.add(Thread.currentThread().getName());</span><br><span class="line">             &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="同步实现"><a href="#同步实现" class="headerlink" title="同步实现"></a>同步实现</h3><blockquote>
<ul>
<li>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我只需要针对方法提出一套机制，这套机制就是synchronized , 它包括两种用法：<ul>
<li>synchronized方法， public synchronized void method(int args){}</li>
<li>synchronnized块</li>
</ul>
</li>
<li>synchronized方法控制对对象的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会堵塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才获得这个锁继续执行</li>
<li>若一个方法被声明为synchronized会影响效率</li>
</ul>
</blockquote>
<ol>
<li>synchronized来锁定同步方法：<ul>
<li>直接在需要同步的方法前面添加synchronized关键字即可</li>
<li>synchronized锁的是this</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeByTickets</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyTicket</span> <span class="variable">buyTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyTicket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>同步块： synchronized(Obj) { }<ul>
<li>Obj称之为同步监视器</li>
<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>
<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身或者是class（反射）</li>
<li>同步监视器的执行过程<ol>
<li>第一个线程访问，锁定同步监视器，执行其中代码</li>
<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>
<li>第一个线程访问完毕，解锁同步监视器</li>
<li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeBanl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">100</span>, <span class="string">&quot;工资&quot;</span>);</span><br><span class="line">        <span class="type">Drawing</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account, <span class="number">20</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        <span class="type">Drawing</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Drawing</span>(account, <span class="number">20</span>, <span class="string">&quot;Lily&quot;</span>);</span><br><span class="line"></span><br><span class="line">        person1.start();</span><br><span class="line">        person2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="type">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> money, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drawing</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Account account; <span class="comment">//账户</span></span><br><span class="line">    <span class="type">int</span> drawingMoney; <span class="comment">//要取多少钱</span></span><br><span class="line">    <span class="type">int</span> nowMoney; <span class="comment">// 现有的钱</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Drawing</span><span class="params">(Account account, <span class="type">int</span> drawingMoney, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里我们需要锁account，所以光在run方法后面加synchronized是没用的</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line">            <span class="keyword">if</span> (account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;钱不够，无法取出&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//sleep方法了问题发生的可能性</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            account.money = account.money - drawingMoney;</span><br><span class="line">            nowMoney += drawingMoney;</span><br><span class="line">            System.out.println(account.name + <span class="string">&quot;余额为&quot;</span> + account.money);</span><br><span class="line">            <span class="comment">//this.getName() = Thread.currentThread().getName()</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot;手里的钱&quot;</span> + nowMoney);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加1000个线程的名字到list中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                 <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                     list.add(Thread.currentThread().getName());</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h2 id="线程周边知识"><a href="#线程周边知识" class="headerlink" title="线程周边知识"></a>线程周边知识</h2><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><blockquote>
<p>实质属于函数式编程概念</p>
<ul>
<li>表达式：<ul>
<li>(params) -&gt; expression [表达式]</li>
<li>(Params) -&gt; statement[语句]</li>
<li>(params) -&gt; {statements}</li>
</ul>
</li>
</ul>
</blockquote>
<ol>
<li><p>什么是函数式接口？</p>
<ul>
<li>任何接口，如果只包含唯一一个抽象方法，那么他就是一个函数式接口</li>
<li>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象</li>
</ul>
</li>
<li><p>为什么使用lambda表达式？</p>
<ol>
<li>避免匿名内部类定义过多</li>
<li>让代码看起来更简洁</li>
<li>去掉了一堆无意义代码，只剩下核心逻辑</li>
</ol>
</li>
<li><p>内部类的声明与使用的进化史：</p>
<ul>
<li><p>实现类–静态内部类–局部内部类–匿名内部类–lambda表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Like2</span> <span class="keyword">implements</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">ILike</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Like</span>();</span><br><span class="line">       like.lambda();</span><br><span class="line"></span><br><span class="line">      like = <span class="keyword">new</span> <span class="title class_">Like2</span>();</span><br><span class="line">      like.lambda();</span><br><span class="line">      <span class="comment">//4  局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Like3</span> <span class="keyword">implements</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like3</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5 匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">ILike</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6 lambda简化</span></span><br><span class="line">        like = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambdaEnd&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Like</span> <span class="keyword">implements</span> <span class="title class_">ILike</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like lambda1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>lambda的总结</p>
<ul>
<li>lambda表达式在代码只有一行的情况下可以去掉花括号</li>
<li>lambda表达式能使用的前提是必须是函数式接口</li>
<li>单个参数可以去掉函数类型和括号，多个参数可以去掉函数类型，但必须都去掉，且不能去掉括号</li>
</ul>
</li>
</ol>
<h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><blockquote>
<p>真实对象和代理对象都要实现同一个接口，代理对象要代理真实角色</p>
<p>优势：</p>
<ul>
<li>代理对象可以做很多真实对象做不了的事</li>
<li>真实对象可以专注于自己的事</li>
</ul>
<p>通过这个案例了解线程创建的模式，Thread就是一个静态代理，自己的定义类只需要专注自己的事</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeddingCompany</span> <span class="variable">company</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(<span class="keyword">new</span> <span class="title class_">You</span>());</span><br><span class="line">        company.HappyMarry();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am happy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line">    <span class="comment">//真实目标角色</span></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HappyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="built_in">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before marry&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after marry&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="线程的五种状体"><a href="#线程的五种状体" class="headerlink" title="线程的五种状体"></a>线程的五种状体</h3><blockquote>
<p>线程通过new等方法创建后就变成新生状态，一旦通过start（）方法启动就会变成就绪态，但不意味着立即执行，得看cpu调度，当被cpu调度后就进入运行态，运行之后有可能被调用了wait（）或sleep（）等方法进入阻塞态，阻塞态解除后重新进入就绪态等待执行，也有可能线程执行结束或中断，进入死亡状态，就不能再次开启了。</p>
</blockquote>
<h2 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>setPriority(int newPriority)</td>
<td>更改线程优先级</td>
</tr>
<tr>
<td>Static void sleep(long millis)</td>
<td>让当前线程休眠指定毫秒</td>
</tr>
<tr>
<td>void join()</td>
<td>等待该线程终止</td>
</tr>
<tr>
<td>static void yield()</td>
<td>暂停当前正在执行的线程对象，并执行其他线程</td>
</tr>
<tr>
<td>void interupt()</td>
<td>中断线程（不推荐）</td>
</tr>
<tr>
<td>boolean isAlive()</td>
<td>测试线程是否处于活动状态</td>
</tr>
</tbody></table>
<h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><blockquote>
<p>不推荐使用JDK提供的stop（）、destory（）方法来停止线程</p>
<p>推荐使用一个标志尾flag，当flag &#x3D;&#x3D; false就停止线程，让线程自己停下来</p>
</blockquote>
<p>推荐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><blockquote>
<ul>
<li>Sleep(时间) 指定当前线程阻塞的毫秒数</li>
<li>Sleep 存在异常 InteruptedException</li>
<li>sleep时间到达后线程进入就绪状态</li>
<li>sleep可以模拟网络延迟、倒计时等</li>
<li>每一个对象都有一个锁，sleep不会释放锁</li>
</ul>
</blockquote>
<p><strong>模拟网络延时，放大问题的发生性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThredTest1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &lt;= <span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时，让结果更加显著</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;我拿到了第&quot;</span> + tickets-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>模拟倒计时</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tenDown();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟倒计时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><blockquote>
<ul>
<li>让当前正在执行的线程暂停，但不堵塞</li>
<li>将线程从运行态转为就绪态</li>
<li><strong>让cpu重新调度，礼让不一定成功，看cpu心情</strong></li>
</ul>
</blockquote>
<h3 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h3><blockquote>
<ul>
<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>
<li>类似于插队</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程VIP来了&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TestJoin</span> <span class="variable">testJoin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJoin</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">200</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread is end&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//查看此时线程状态</span></span><br><span class="line">        Thread.<span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED) &#123; <span class="comment">// 只要线程不终止，就一直输出状态</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState(); <span class="comment">// 更新线程状态</span></span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><blockquote>
<ul>
<li>java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按优先级决定应该调度哪个线程来执行</li>
<li>优先级高的不是一定先执行，只是先执行的比重大</li>
<li>线程的优先级用数字表示，范围从1–10<ul>
<li>Thread.MIN_PRIORITY &#x3D; 1;</li>
<li>Thread.MAX_PRIORITY &#x3D; 10;</li>
<li>Thread.NORM_PRIORITY &#x3D; 5;</li>
</ul>
</li>
<li>使用以下方法获取、改变优先级<ul>
<li>getPriority( )</li>
<li>setPriority(int x)</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">        <span class="type">myPriority</span> <span class="variable">priority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myPriority</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(priority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(priority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(priority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(priority);</span><br><span class="line">        </span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.setPriority(<span class="number">1</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.setPriority(<span class="number">4</span>);</span><br><span class="line">        thread3.start();</span><br><span class="line">        thread4.setPriority(Thread.MAX_PRIORITY); <span class="comment">//MAX_PRIORITY = 10</span></span><br><span class="line">        thread4.start();</span><br></pre></td></tr></table></figure>





<h3 id="守护（daemon）线程"><a href="#守护（daemon）线程" class="headerlink" title="守护（daemon）线程"></a>守护（daemon）线程</h3><blockquote>
<ul>
<li>线程分为用户线程和守护线程</li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>例如：后台记录操作日志，监控内存，垃圾回收</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaemon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Athread</span> <span class="variable">athread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Athread</span>();</span><br><span class="line">        <span class="type">Bthread</span> <span class="variable">bthread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bthread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(bthread);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>); <span class="comment">// 默认是false，为用户线程，true设置为守护线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(athread).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bthread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;守护&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Athread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote>
<ul>
<li>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形。</li>
<li>某一个同步块<strong>同时拥有两个以上对象的锁</strong>时就可能发生死锁</li>
</ul>
</blockquote>
<h3 id="死锁案例"><a href="#死锁案例" class="headerlink" title="死锁案例"></a>死锁案例</h3><p>死锁的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MakeUp</span> <span class="variable">gl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MakeUp</span>(<span class="number">0</span>, <span class="string">&quot;Lily&quot;</span>);</span><br><span class="line">        <span class="type">MakeUp</span> <span class="variable">gl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MakeUp</span>(<span class="number">1</span>, <span class="string">&quot;Sherly&quot;</span>);</span><br><span class="line">        gl.start();</span><br><span class="line">        gl2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lipstick</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mirror</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeUp</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//化妆所需要的资源，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lipstick</span> <span class="variable">lipstick</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lipstick</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Mirror</span> <span class="variable">mirror</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mirror</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    String girlName;</span><br><span class="line"></span><br><span class="line">    MakeUp(<span class="type">int</span> choice, String girlName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.choice = choice;</span><br><span class="line">        <span class="built_in">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (mirror) &#123; <span class="comment">//一秒钟后想获得镜子</span></span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以上的例子解决死锁的方案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MakeUp</span> <span class="variable">gl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MakeUp</span>(<span class="number">0</span>, <span class="string">&quot;Lily&quot;</span>);</span><br><span class="line">        <span class="type">MakeUp</span> <span class="variable">gl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MakeUp</span>(<span class="number">1</span>, <span class="string">&quot;Sherly&quot;</span>);</span><br><span class="line">        gl.start();</span><br><span class="line">        gl2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lipstick</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mirror</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeUp</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//化妆所需要的资源，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lipstick</span> <span class="variable">lipstick</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lipstick</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Mirror</span> <span class="variable">mirror</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mirror</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    String girlName;</span><br><span class="line"></span><br><span class="line">    MakeUp(<span class="type">int</span> choice, String girlName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.choice = choice;</span><br><span class="line">        <span class="built_in">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123; <span class="comment">//一秒钟后想获得镜子</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="死锁必要条件"><a href="#死锁必要条件" class="headerlink" title="死锁必要条件"></a>死锁必要条件</h3><blockquote>
<ul>
<li>产生死锁的四个必要条件：<ol>
<li>互斥条件 ：一个资源每次只能被一个进程会用</li>
<li>请求与保持条件 ：一个请求因请求资源而阻塞时，对已获得的资源保持不放</li>
<li>不剥夺条件 ：进程已获得的资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待条件 ：若干进程之间形成一种头尾相接的循环等待资源关系</li>
</ol>
</li>
<li>只需要破环任意一个或多个条件就可以避免死锁发生</li>
</ul>
</blockquote>
<h2 id="Lock（锁）"><a href="#Lock（锁）" class="headerlink" title="Lock（锁）"></a>Lock（锁）</h2><blockquote>
<ul>
<li>从JDK5.0开始，Java提供了更加强大的线程同步机制—通过显示定义同步锁对象来实现同步，同步锁使用Lock对象充当</li>
<li>java.util.concurrent.locks.Lock（可重入锁）接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应该先获得Lock对象</li>
<li>ReentrantLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显示加锁、释放锁</li>
</ul>
</blockquote>
<ul>
<li><p>声明Lock的基本结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//保证线程安全的代码</span></span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestLock2</span> <span class="variable">testLock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestLock2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLock2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock(); <span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span> (ticketNums &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNums--);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="synchronized、lock"><a href="#synchronized、lock" class="headerlink" title="synchronized、lock"></a>synchronized、lock</h3><blockquote>
<ul>
<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放</li>
<li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li>
<li>使用Lock锁,JVM将话费较少的时间来调度线程，性能更好，、。并且有更好的扩展性（提供更多子类）</li>
<li>优先使用顺序：<ul>
<li>Lock &gt; 同步代码块（已经进入了方法体，分配了响应资源） &gt; 同步方法（在方法体之外）</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h2><blockquote>
<p>生产者消费者问题</p>
<ul>
<li>假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费</li>
<li>如果仓库中没有产品，则生产者将产品放入仓库否则停止生产并等待，直到仓库中的产品被消费者取走为止</li>
<li>如果仓库中有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止</li>
</ul>
<p>分析：</p>
<ul>
<li>这是一个线程同步问题，生产者消费者共享一个资源，并且生产者和消费者之间相互依赖，互为条件</li>
<li>对于生产者，没有生产产品之前，要同志消费者等待，而生产了产品之后，又需要马上通知消费者消费</li>
<li>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产以供消费</li>
<li>在这个问题中仅有synchronized是不够的<ul>
<li>synchronized可阻止并发更新同一个共享资源，实现了同步</li>
<li>synchronized不能用来实现不同线程之间的消息传递（通信）</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="线程通信方法"><a href="#线程通信方法" class="headerlink" title="线程通信方法"></a>线程通信方法</h3><ul>
<li>wait（）：表示线程一直等待，直到其他线程通知，&#x3D;&#x3D;与sleep不同，会释放锁&#x3D;&#x3D;</li>
<li>wait（long timeout）：指定等待的毫秒数</li>
<li>notify（）：唤醒一个处于等待状态的线程</li>
<li>notifyAll（）：唤醒一个对象上所有调用wait（）方法的线程，优先级别高的线程优先调度</li>
<li>以上方法都是Object类方法，都只能在同步方法或同步块中使用，否则会报错</li>
</ul>
<h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><ol>
<li><p>并发协作模型“生产者&#x2F;消费者模式” – <strong>管程法</strong></p>
<ul>
<li><p>生产者 ：负责生产数据的模块（可能是方法、对象、线程、进程）</p>
</li>
<li><p>消费者 ：负责生产数据的模块（可能是方法、对象、线程、进程）</p>
</li>
<li><p>缓冲区 ：消费者不能直接使用生产者的数据，他们之间有个缓冲区</p>
</li>
<li><p>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿数据</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Productor</span>(container).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> <span class="title class_">Production</span>(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了第&quot;</span> + container.pop().id + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Production</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Production</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span> &#123;</span><br><span class="line">    <span class="comment">//容器大小</span></span><br><span class="line">    Production[] productions = <span class="keyword">new</span> <span class="title class_">Production</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Production production)</span> &#123;</span><br><span class="line">        <span class="comment">//如果容器满了就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == productions.length) &#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果容器没有满，我们就需要丢入产品</span></span><br><span class="line">        productions[count++] = production;</span><br><span class="line">        <span class="comment">//通知消费者消费</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Production <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//等待生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">Production</span> <span class="variable">production</span> <span class="operator">=</span> productions[count];</span><br><span class="line">        <span class="comment">//通知生产者生产</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> production;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>并发协作模型“生产者&#x2F;消费者模式” – <strong>信号灯法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Player</span>(tv).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者--演员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;B &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者--观众</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Watcher</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品--节目</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span> &#123;</span><br><span class="line">    <span class="comment">//言演员表演，观众等待</span></span><br><span class="line">    <span class="comment">//观众观看，演员等待</span></span><br><span class="line">    String voice; <span class="comment">//表演的节目</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title function_">play</span><span class="params">(String voice)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了&quot;</span> + voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.voice = voice;</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//看</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看了&quot;</span> + voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote>
<ul>
<li><p>问题：</p>
<ul>
<li>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</li>
</ul>
</li>
<li><p>解决思路：</p>
<ul>
<li>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。</li>
<li>可以避免频繁创建销毁、实现重复利用。</li>
</ul>
</li>
<li><p>好处：</p>
<ul>
<li>提高响应速度（减少了创建新线程的时间）</li>
<li>降低资源消耗（重复利用线程池中的线程，不需要每次都创建）</li>
<li>便于线程管理<ul>
<li>corePoolSize ：线程池大小</li>
<li>maxinumPoolSize ：最大线程数</li>
<li>keepAliveTime ：线程没有任务时最多保持多长时间后会终止</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="线程池使用"><a href="#线程池使用" class="headerlink" title="线程池使用"></a>线程池使用</h3><blockquote>
<ul>
<li>JDK5.0起提供了线程池相关的API，ExecutorService 和 Executors</li>
<li>ExecutorService ：真正的线程池接口，常见子类ThreadPoolExecutor<ul>
<li>void executor（Runnable command）：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable</li>
<li>&lt;&gt;Future&lt;&gt; submit（Callable&lt;&gt; task) : 执行任务，有返回值，一般用来执行callable</li>
<li>void shutdown（）：关闭连接池</li>
</ul>
</li>
<li>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">//参数为池子的大小</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><h2 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h2><blockquote>
<ul>
<li>File 类主要是 Java 为文件相关操作（如删除、创建）而设计的类</li>
</ul>
</blockquote>
<h3 id="File-类三种构造方法"><a href="#File-类三种构造方法" class="headerlink" title="File 类三种构造方法"></a>File 类三种构造方法</h3><blockquote>
<p>构造方法：</p>
<ul>
<li>File(String pathName)：通过给定路径名，字符串转换为抽象的路径名来创建新的 File 实例</li>
<li>File(String parents, String childs)：从父路径名，字符串和子路径名，字符串创建新的 File 实例</li>
<li>File(File parent, String child)：从父抽象路径名和子路径名创建新的实例</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitializeFile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过路径名来创建 File</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createFile_1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 声明出我的电脑的 temporary 文件夹的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tempPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/temporary&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;/ioDemo.txt&quot;</span>;</span><br><span class="line">        <span class="comment">// 通过该路径创建出抽象的 File 对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tempPath + fileName);</span><br><span class="line">        System.out.println(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过父子路径创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createFile_2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tempPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/temporary&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;ioDemo.txt&quot;</span>; <span class="comment">// 注意这里是不需要带反斜杠的</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tempPath, fileName);</span><br><span class="line">        System.out.println(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过父 File 对象和子路径创建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createFile_3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tempPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/temporary&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;ioDemo.txt&quot;</span>; <span class="comment">// 注意这里是不需要带反斜杠的</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tempPath);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent, fileName);</span><br><span class="line">        System.out.println(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="创建文件或路径"><a href="#创建文件或路径" class="headerlink" title="创建文件或路径"></a>创建文件或路径</h3><blockquote>
<p>File 类创建文件或路径的方法：</p>
<ul>
<li>public boolean createNewFile( )：当具有该文件名的文件呢不存在时，创建由该抽象路径命名的新文件</li>
<li>public boolean mkdir( )：创建由此抽象路径命名的目录</li>
<li>public boolean mkdirs( )：创建由此抽象路径命名的目录，包括任何必须但不存在的目录</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateFile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求：在 /Users/lei/Desktop/temporary 目录下创建 newFile.html 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createNewFileDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/newFile.html&quot;</span>);</span><br><span class="line">        System.out.println(file.createNewFile()); <span class="comment">// 如果文件已存在，返回 false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求：在 /Users/lei/Desktop/temporary 目录下创建 newdir 目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mkdirDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/newdir&quot;</span>);</span><br><span class="line">        System.out.println(file.mkdir());</span><br><span class="line">        <span class="comment">// 如果 file 对象的抽象路径有问题，那么创建新目录就会失败</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/x/newdir&quot;</span>);</span><br><span class="line">        System.out.println(file2.mkdir());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求：在测试目录下创建多级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mkdirsDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/newdir&quot;</span>);</span><br><span class="line">        System.out.println(file.mkdirs());</span><br><span class="line">        <span class="comment">// 如果 file 对象的抽象路径有问题，那么会全部创建新的</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/x1/x2/newdir&quot;</span>);</span><br><span class="line">        System.out.println(file2.mkdirs());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="File-类常见判断方法"><a href="#File-类常见判断方法" class="headerlink" title="File 类常见判断方法"></a>File 类常见判断方法</h3><blockquote>
<ul>
<li>boolean isDirectory( )：判断是否是文件夹</li>
<li>boolean isFile( )：判断是否是文件</li>
<li>boolean exists( )：判断文件是否存在</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalFunctions</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">NormalFunctions</span>().normalJudgeFunctions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">normalJudgeFunctions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否是目录</span></span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is a directory&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is not a directory&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否是文件</span></span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is a file&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it is not a file&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 file 对象路面的路径是否存在(也可以判断目录是否存在）</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;the file is exists&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;the file is not exists&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="File-类常见获取方法"><a href="#File-类常见获取方法" class="headerlink" title="File 类常见获取方法"></a>File 类常见获取方法</h3><blockquote>
<ul>
<li>getPath</li>
<li>getAbsolutePath</li>
<li>getName</li>
<li>list</li>
<li>listFiles</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">normalGetFunctions</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing&quot;</span>);</span><br><span class="line">       <span class="comment">// 获取绝对(完整)路径</span></span><br><span class="line">       System.out.println(file.getAbsolutePath());</span><br><span class="line">       <span class="comment">// 抽象路径名转化为字符串</span></span><br><span class="line">       System.out.println(file.getPath());</span><br><span class="line">       <span class="comment">// 获取文件或文件夹的名字</span></span><br><span class="line">       System.out.println(file.getName());</span><br><span class="line">       <span class="comment">// 获取文件夹下所有文件,返回字符串数组</span></span><br><span class="line">       <span class="keyword">for</span> (String name : file.list()) &#123;</span><br><span class="line">           System.out.println(name);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 获取文件夹下所有文件，返回 file 数组</span></span><br><span class="line">       <span class="keyword">for</span> (File file1 : file.listFiles()) &#123;</span><br><span class="line">           System.out.println(file1);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>







<h3 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h3><blockquote>
<p>绝对路径和相对路径的区别</p>
<ol>
<li>绝对路径是指文件在硬盘上真正群在的路径</li>
<li>相对路径是指 java 工程中要访问的文件相对于当前文件的路径</li>
</ol>
</blockquote>
<p>以下demo展示了他们之间的区别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">twoPathsCompare</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">       System.out.println(file.createNewFile());</span><br><span class="line">       System.out.println(file.getAbsolutePath());</span><br><span class="line">       System.out.println(file.getPath());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>会发现代码默认在项目下创建了一个文件</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-07-19%2000.32.10.png" style="zoom:50%">





<blockquote>
<p>这就会有一个问题：绝对路径是写死的，如果将该代码放到其他电脑上运行就可能会找不到该路径<br>所以我们呢应该使用相对路径动态获取路径</p>
</blockquote>
<h3 id="File-类删除操作"><a href="#File-类删除操作" class="headerlink" title="File 类删除操作"></a>File 类删除操作</h3><h4 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h4><blockquote>
<ul>
<li>delete( )：删除文件或者是文件夹<br>如果删除的是文件路径，则直接删除<br>如果删除的是一个文件夹路径，则先将文件夹里面的东西删除，再删除文件夹</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/x1/x2&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/x1/x2/test.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DeleteCase</span>().deleteDemo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeDirAndFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(file.mkdirs());</span><br><span class="line">        System.out.println(file1.createNewFile());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接删除会失败</span></span><br><span class="line">        System.out.println(file.delete());</span><br><span class="line">        <span class="comment">// 先把里面的文件删除干净才可以删除文件夹</span></span><br><span class="line">        System.out.println(file1.delete());</span><br><span class="line">        System.out.println(file.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="File-类-for-循环删除"><a href="#File-类-for-循环删除" class="headerlink" title="File 类 for 循环删除"></a>File 类 for 循环删除</h4><blockquote>
<p>如果要删除某个文件夹，但是该文件夹下有多个文件，需要用 for 循环把文件删干净再删除文件夹</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 已经创建好了目录和文件 x1/x2 下有 4 个test文件,代码省略</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">deleteFilePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/x1/x2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (deleteFilePath.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;要删除的是一个文件夹目录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DeleteCase</span>().deleteFiles(deleteFilePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteFiles</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="comment">// 先删除目录下所有文件</span></span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除的文件名：&quot;</span> + f.getAbsolutePath());</span><br><span class="line">            f.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再删除目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除的文件夹：&quot;</span> + file.getPath());</span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="File-类递归删除"><a href="#File-类递归删除" class="headerlink" title="File 类递归删除"></a>File 类递归删除</h4><blockquote>
<p>准备了这样一个测试目录：</p>
<ul>
<li>a&#x2F;<ul>
<li>b1&#x2F;test.java</li>
<li>b2&#x2F;<ul>
<li>c1&#x2F;test.java</li>
<li>c2&#x2F;<ul>
<li>Test1.java</li>
<li>test2.java</li>
</ul>
</li>
</ul>
</li>
<li>Test.java</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="IO-流概述"><a href="#IO-流概述" class="headerlink" title="IO 流概述"></a>IO 流概述</h2><blockquote>
<ul>
<li>流是一种抽象概念，是对数据传输的总称，也就是说数据在设备之间的传输称为流</li>
<li>常见的应用：文件上传、下载、复制等</li>
<li>输入：input：将硬盘中的数据读取到内存中</li>
<li>输出：output：将程序中的数据写入到赢盘中</li>
</ul>
</blockquote>
<h3 id="IO-流的分类"><a href="#IO-流的分类" class="headerlink" title="IO 流的分类"></a>IO 流的分类</h3><blockquote>
<ol>
<li>根据数据流向分类：<ul>
<li>输入流：读数据，将硬盘中的数据读取到内存中</li>
<li>输出流：写数据，将程序中的数据写入到赢盘中</li>
</ul>
</li>
<li>按照数据类型来分：<ul>
<li>字节流：字节输入流、字节输出流</li>
<li>字符流：字符输入流、字符输出流</li>
</ul>
</li>
<li>IO 流应用场景：<ul>
<li>纯文本文件：优先使用字符流</li>
<li>图片、视频、音频等二进制文件：优先使用字节流</li>
<li>不确定文件类型：优先</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节流写入及关闭"><a href="#字节流写入及关闭" class="headerlink" title="字节流写入及关闭"></a>字节流写入及关闭</h3><h4 id="字节流写入数据"><a href="#字节流写入数据" class="headerlink" title="字节流写入数据"></a>字节流写入数据</h4><blockquote>
<p>字节流写入数据常用的三种方式：</p>
<ul>
<li>write (int b)：将指定的字节写入到此文件输出流，一次写一个字节数据</li>
<li>write (byte[] b)：将 b.length 字节从指定的字节数据写入到</li>
<li>write ((byte[], int off, int len))</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputFileDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入单个字节</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeDemo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 直接在项目里面创建文件这样好观察</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;outtest.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="comment">// 每次将单个字节数据写入磁盘，效率很低</span></span><br><span class="line">        fileOutputStream.write(<span class="number">97</span>);</span><br><span class="line">        fileOutputStream.write(<span class="number">98</span>);</span><br><span class="line">        fileOutputStream.write(<span class="number">99</span>);</span><br><span class="line">        fileOutputStream.write(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeByteArray</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;outtest.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>&#125;;</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeByteOff</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;outtest.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>&#125;;</span><br><span class="line">        fileOutputStream.write(bytes, <span class="number">0</span>, bytes.length - <span class="number">2</span>);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="写入数据换行和追加写"><a href="#写入数据换行和追加写" class="headerlink" title="写入数据换行和追加写"></a>写入数据换行和追加写</h4><blockquote>
<p>换行就写入一个 “\n”</p>
<p>追加就让输出流构造器传入一个 true</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputFileDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 换行写以及追加写</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writenextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;outtest.txt&quot;</span>));</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStreamContinue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;outtest.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello output stream&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            fileOutputStream.write(str.getBytes());</span><br><span class="line">            <span class="comment">// 换行</span></span><br><span class="line">            fileOutputStream.write(<span class="string">&quot;\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStreamContinue.write(<span class="string">&quot;追加内容&quot;</span>.getBytes());</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        fileOutputStreamContinue.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="正确关闭资源"><a href="#正确关闭资源" class="headerlink" title="正确关闭资源"></a>正确关闭资源</h4><blockquote>
<p>在之前的代码中，我们在关闭输出流资源时都是直接 close( ),这么做是不对的，因为代码很有可能走不到 close 方法就出错中断，所以第一个优化的点是将 close 方法放在 finally 块里，保证执行.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeStreamCorrectly</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;outtest.txt&quot;</span>);</span><br><span class="line">           fileOutputStream.write(<span class="string">&quot;close test&quot;</span>.getBytes());</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; <span class="comment">// 模拟出错</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileOutputStream.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>但是这样也是不够的，因为 fileOutputStream 有可能初始化失败，走到 finally 的时候是 null，无法调用 close 方法<br>所以需要在 finall 块里做一个判空</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeStreamCorrectly</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;j:outtest.txt&quot;</span>);</span><br><span class="line">           fileOutputStream.write(<span class="string">&quot;close test&quot;</span>.getBytes());</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fileOutputStream.close();</span><br><span class="line">                   System.out.println(<span class="string">&quot;close succeed&quot;</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h3 id="字节流读取"><a href="#字节流读取" class="headerlink" title="字节流读取"></a>字节流读取</h3><h4 id="字节流读取文件"><a href="#字节流读取文件" class="headerlink" title="字节流读取文件"></a>字节流读取文件</h4><blockquote>
<p>read（）方法可以读取文件内容，默认一个字节一个字节读，读到末尾时返回 -1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reedFile</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;inputtest.txt&quot;</span>);</span><br><span class="line">           <span class="type">int</span> data;</span><br><span class="line">           <span class="keyword">while</span> ((data = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">               System.out.print((<span class="type">char</span>) data);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fileInputStream.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>







<h4 id="字节流复制数据"><a href="#字节流复制数据" class="headerlink" title="字节流复制数据"></a>字节流复制数据</h4><blockquote>
<p>完成以下需求：</p>
<p>将电脑上 temporary &#x2F; testing 目录下的 a 目录中的 inputtest.txt 文件复制到 同目录下的 b 目录中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">copyFrom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/a/inputtest.txt&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">copyToPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/temporary/testing/b/&quot;</span> + copyFrom.getName();</span><br><span class="line">        <span class="type">File</span> <span class="variable">copyTo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(copyToPath);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            copyTo.createNewFile(); <span class="comment">// 先创建复制的文件</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(copyFrom);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(copyTo);</span><br><span class="line">            <span class="type">int</span> inData;</span><br><span class="line">            <span class="keyword">while</span> ((inData = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(inData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h4 id="读取字节数组"><a href="#读取字节数组" class="headerlink" title="读取字节数组"></a>读取字节数组</h4><blockquote>
<p>以字节数组读取文件时需要注意以下点：</p>
<ul>
<li>一般来说，汉字占 3 个字节，字母占 1 个字节</li>
<li>换行符也是占字节的，具体占几个字节看操作系统<br>windows 系统一般占 2 个字节，因为他的换行符是 \r\n<br>mac 系统是 1 个字节，\n</li>
<li>字节数组在读取数据时是重复使用的，假设字节数组长度为5，倒数第二次读取的数据是 abcde，还剩 fgh 没有读<br>那么最后一次读取完之后字节数组里的内容是 fghde</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readByByte</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 文件里的内容是：abcdefgh</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;inputtest.txt&quot;</span>);</span><br><span class="line">       <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(data);</span><br><span class="line">       System.out.println(len);</span><br><span class="line">       System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line"></span><br><span class="line">       len = in.read(data);</span><br><span class="line">       System.out.println(len);</span><br><span class="line">       <span class="comment">// 第二个参数的含义是 从 offset 下标开始读 x 个，并不是下标</span></span><br><span class="line">       System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">       in.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h4 id="循环读取大文件"><a href="#循环读取大文件" class="headerlink" title="循环读取大文件"></a>循环读取大文件</h4><blockquote>
<p>循环读取时有一个小细节要注意，while 循环的条件判断写 &gt; 0 或者 !&#x3D; -1 都可以<br>因为只要读取不到内容都会返回 -1<br>更多的是使用 ！&#x3D;  -1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readBigData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;inputtest.txt&quot;</span>);</span><br><span class="line">       <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="type">int</span> len;</span><br><span class="line">       <span class="comment">// while 条件也可以写 (len = in.read(bytes)) &gt; 0</span></span><br><span class="line">       <span class="keyword">while</span> ((len = in.read(bytes)) ！= -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>









<h3 id="字节流应用"><a href="#字节流应用" class="headerlink" title="字节流应用"></a>字节流应用</h3><h4 id="字节流复制图片"><a href="#字节流复制图片" class="headerlink" title="字节流复制图片"></a>字节流复制图片</h4><blockquote>
<p>现完成以下需求：</p>
<p>将电脑上 temporary &#x2F; testing 目录下的 a 目录中的 龙猫.jpeg 文件复制到 同目录下的 b 目录中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyPicture</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/a/龙猫.jpeg&quot;</span>);</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/b/龙猫.jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="type">int</span> len;</span><br><span class="line">       <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">           out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>













<h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><blockquote>
<ul>
<li>传统方式一个字节一个字节读或者写数据会频繁的发生系统内核调用（用户态 -&gt; 内核态）效率很低</li>
<li>每发生一次从磁盘读取数据到内存中就会发生一次系统转换</li>
<li>我们可以使用字节缓冲流，缓冲区是一个内存区域概念，以块的形式读取或写入数据，减少调用频率</li>
<li>字节缓冲流的缓冲区大小默认是 8k，即 8192 字节</li>
</ul>
</blockquote>
<h3 id="字节缓冲流读写"><a href="#字节缓冲流读写" class="headerlink" title="字节缓冲流读写"></a>字节缓冲流读写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BufferedOutputStreamDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1 创建了字节输出流对象，指定读取磁盘文件的路径</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;outputBuffered.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2 创建一个 bufferedInputStream 并指定输出流对象</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="comment">// 3 写入</span></span><br><span class="line">        bufferedOutputStream.write(<span class="string">&quot;hello buffered stream&quot;</span>.getBytes());</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BufferedInputStreamDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;outputBuffered.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="字节缓冲流复制视频对比"><a href="#字节缓冲流复制视频对比" class="headerlink" title="字节缓冲流复制视频对比"></a>字节缓冲流复制视频对比</h3><blockquote>
<p>用字节流和缓冲流分别去复制一个视频比较执行速度</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopySpeedCompare</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用缓冲流读取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyByBufferedStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建缓冲输入输出流对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/a/testVideo.mp4&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/b/testVideo.mp4&quot;</span>);</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="comment">// 读取</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bufferedOutputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用缓冲流复制视频耗时：&quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyByNormalStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/a/testVideo.mp4&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/b/testVideo.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用字节流复制视频耗时：&quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行效果如下：使用缓冲流耗时 60 毫秒，使用字节流耗时 90 毫秒，如果用更大的视频差距会更夸张</p>
<h2 id="编码相关知识"><a href="#编码相关知识" class="headerlink" title="编码相关知识"></a>编码相关知识</h2><h3 id="汉字的占用空间"><a href="#汉字的占用空间" class="headerlink" title="汉字的占用空间"></a>汉字的占用空间</h3><blockquote>
<ul>
<li>一个汉字如果是 GBK 编码，占用 2 个字节</li>
<li>一个汉字如果是 UTF-8 编码，占用 3 个字节</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>; <span class="comment">// 存储的是英文字符，占用 1 个字节</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;你好呀&quot;</span>; <span class="comment">// 存储中文占用 3 个字符（使用 utf-8）编码</span></span><br><span class="line"></span><br><span class="line">    System.out.println(str1.getBytes().length); <span class="comment">// 3</span></span><br><span class="line">    System.out.println(str2.getBytes().length); <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line">    System.out.println(Arrays.toString(str1.getBytes()));</span><br><span class="line">    System.out.println(Arrays.toString(str2.getBytes()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更改编码方式</span></span><br><span class="line">    System.out.println(str2.getBytes(<span class="string">&quot;GBK&quot;</span>).length); <span class="comment">// 6</span></span><br><span class="line">    System.out.println(Arrays.toString(str2.getBytes(<span class="string">&quot;GBK&quot;</span>)));</span><br></pre></td></tr></table></figure>





<h3 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h3><blockquote>
<ul>
<li>当字节流读取存储的中文数据时可能会发生乱码，可以使用字符流</li>
<li>字符流 &#x3D; 字节流 + 编码表</li>
<li>编码表可以看作一个字典，表示的是人类的字符和机器语言（二进制）之间的关系，例如 ASCII 表</li>
<li>GB 2312：识别数千中文</li>
<li>GBK： 识别 2 w 多中文，两个字节表是一个字符</li>
<li>GB18030: GBK 的升级</li>
<li>Unicode：世界计算机协会制定的通用码表，两个字节表示一个字符</li>
<li>UTF-8: Unicode 升级版，汉字基本上都是 3 个字节</li>
</ul>
</blockquote>
<h2 id="3-2-字节流"><a href="#3-2-字节流" class="headerlink" title="3.2 字节流"></a>3.2 字节流</h2><h3 id="3-2-1-IO流原理及分类"><a href="#3-2-1-IO流原理及分类" class="headerlink" title="3.2.1 IO流原理及分类"></a>3.2.1 IO流原理及分类</h3><blockquote>
<ul>
<li>IO流：Input、Output缩写，用于数据处理，如读、写文件，网络通讯等</li>
<li>Java程序中，对于数据的输入、输出操作以流（Stream）的方式进行</li>
<li>java.io包下提供了各种流类接口，用以获取不同种类数据，并通过方法输入或输出数据</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>流的分类：</p>
<ul>
<li>按操作数据单位不同分为：<ul>
<li>字节流（8 bit）：保证对二进制文件无损操作</li>
<li>字符流（按字符）：文本文件</li>
</ul>
</li>
<li>按数据流的流向不同<ul>
<li>输入流</li>
<li>输出流</li>
</ul>
</li>
<li>按流的角色不同<ul>
<li>节点流</li>
<li>处理流&#x2F;包装流</li>
</ul>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>抽象基类</th>
<th>字节流</th>
<th>字符流</th>
</tr>
</thead>
<tbody><tr>
<td>输入流</td>
<td>InputStream</td>
<td>Reader</td>
</tr>
<tr>
<td>输出流</td>
<td>OutputStream</td>
<td>Writer</td>
</tr>
</tbody></table>
<ul>
<li>Java的IO流共涉及40多个类，实际上非常规则，都是从如上4个抽象基类派生的</li>
<li>由这四个类派生出来的子类名称都是以其父类的名字作为子类的名后缀</li>
<li>上面四个类都是抽象类，使用时必须创建他们的实现子类的对象</li>
</ul>
<h3 id="3-2-2-InputStream"><a href="#3-2-2-InputStream" class="headerlink" title="3.2.2 InputStream"></a>3.2.2 InputStream</h3><blockquote>
<p><strong>InputStream：字节输入流，是所有类字节输入流的超类</strong></p>
<p>InputStream的常用子类</p>
<ul>
<li>FileInputStream：文件输入流</li>
<li>BufferedInputStream：缓冲字节输入流</li>
<li>ObjectInputStream：对象字节输入流</li>
</ul>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-06-23 15.06.32.png" alt="截屏2022-06-23 15.06.32" style="zoom:50%;" />



<p><strong>FileInputStream</strong></p>
<ul>
<li><p>用FileInputStream读取hello.txt文件，并显示其内容<br>read（）：读取单个字节<br>read（byte[]）：按字节数组读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//read（）读取</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile_1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/test/hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建了fileInputStream对象用于读取文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//read从流中读取一个字节数据，如果没有输入可用此方法将会被阻止</span></span><br><span class="line">            <span class="comment">//如果返回-1，表示读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>)readData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; <span class="comment">//一定要记得关闭这个流，因为流是一种资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//read（byte[]）读取</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile_2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/test/hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; <span class="comment">//一次读8个字节</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, readLen));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2-3-OutputStream"><a href="#3-2-3-OutputStream" class="headerlink" title="3.2.3 OutputStream"></a>3.2.3 OutputStream</h3><p><strong>类图</strong></p>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-06-23 19.41.03.png" alt="截屏2022-06-23 19.41.03" style="zoom:50%;" />



<p><strong>FileOutputStream</strong></p>
<p>案例：<br>在hello.txt文件中写入内容，如果文件不存在会创建文件</p>
<p>方式1:当我们采用fileOutputStream &#x3D; new FileOutputStream(filePath);方式去构造对象时，每次新写入的内容会覆盖原来的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile_1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建FileOutputStream对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/test/hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//写入一个字节</span></span><br><span class="line">            fileOutputStream.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">            <span class="comment">//写入一个字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">            fileOutputStream.write(str.getBytes());</span><br><span class="line">            <span class="comment">//指定起点和偏移量</span></span><br><span class="line">            fileOutputStream.write(str.getBytes(), <span class="number">0</span>, str.length() - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>方式2:fileOutputStream &#x3D; new FileOutputStream(filePath，true);方式创建的对象是把内容追加到文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile_2</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//创建FileOutputStream对象</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/test/hello.txt&quot;</span>;</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath, <span class="literal">true</span>);</span><br><span class="line">           <span class="comment">//写入一个字节</span></span><br><span class="line">           fileOutputStream.write(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">           <span class="comment">//写入一个字符串</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;234&quot;</span>;</span><br><span class="line">           fileOutputStream.write(str.getBytes());</span><br><span class="line">           <span class="comment">//指定起点和终点</span></span><br><span class="line">           fileOutputStream.write(str.getBytes(), <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileOutputStream.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>









<h3 id="3-3-1-文件拷贝"><a href="#3-3-1-文件拷贝" class="headerlink" title="3.3.1 文件拷贝"></a>3.3.1 文件拷贝</h3><blockquote>
<p>主要思路：</p>
<ol>
<li>创建两个File 对象，用于将文件读入内存并且再写入到存储</li>
<li>程序的逻辑应该是读入一部分数据就立即写入文件（效率更高且避免内存不够的问题）<br>使用循环来实现</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/图片/可达鸭.jpeg&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">targetFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lei/Desktop/test/可达鸭2.jpeg&quot;</span>;</span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath);</span><br><span class="line">           fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(targetFilePath);</span><br><span class="line">           <span class="comment">//定义一个字节数组提高读取效率</span></span><br><span class="line">           <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> ((readLen = fileInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="comment">//读取到后就写入到文件</span></span><br><span class="line">               fileOutputStream.write(buffer, <span class="number">0</span>, readLen); <span class="comment">// 一定要用这个方法</span></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;Copy Success&quot;</span> );</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                   fileInputStream.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                   fileOutputStream.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



















<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="字符流读写"><a href="#字符流读写" class="headerlink" title="字符流读写"></a>字符流读写</h3><h4 id="字符流基础使用"><a href="#字符流基础使用" class="headerlink" title="字符流基础使用"></a>字符流基础使用</h4><blockquote>
<p>既然使用了字符流，那么就要留心编码方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamReader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果这里指定的编码方式是 GBK，那么 idea 打开就是乱码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">outputStreamWriter</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;writer.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        outputStreamWriter.write(<span class="string">&quot;你好\n字符流\n再见&quot;</span>);</span><br><span class="line">        outputStreamWriter.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;写入成功，开始读取&quot;</span>);</span><br><span class="line">        <span class="comment">// 默认的编码是 utf-8,使用其他的就会乱码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;writer.txt&quot;</span>));</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStreamReader.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        inputStreamReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h4 id="字符流写入的5种方式"><a href="#字符流写入的5种方式" class="headerlink" title="字符流写入的5种方式"></a>字符流写入的5种方式</h4><blockquote>
<ol>
<li>单个字符写入</li>
<li>写入 char 数组</li>
<li>写入带偏移量的 char 数组</li>
<li>写入字符串</li>
<li>写入带偏移量的字符串</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">outputStreamWriter</span> <span class="operator">=</span></span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(newFileOutputStream(<span class="string">&quot;outputWriter.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 单个字符写入</span></span><br><span class="line">        outputStreamWriter.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        outputStreamWriter.write(<span class="string">&#x27;你&#x27;</span>);</span><br><span class="line">        outputStreamWriter.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 写入 char 数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;好&#x27;</span>&#125;;</span><br><span class="line">        outputStreamWriter.write(chars);</span><br><span class="line">        outputStreamWriter.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 写入带偏移量的 char 数组</span></span><br><span class="line">        outputStreamWriter.write(chars, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        outputStreamWriter.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 写入字符串</span></span><br><span class="line">        outputStreamWriter.write(<span class="string">&quot;你好字符流&quot;</span>);</span><br><span class="line">        outputStreamWriter.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 写入带偏移量的字符串</span></span><br><span class="line">        outputStreamWriter.write(<span class="string">&quot;你好字符流&quot;</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        outputStreamWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







































<h2 id="3-4-节点流、处理流"><a href="#3-4-节点流、处理流" class="headerlink" title="3.4 节点流、处理流"></a>3.4 节点流、处理流</h2><blockquote>
<p><strong>节点流</strong></p>
<ul>
<li>可以从一个特定的数据源<strong>读写数据</strong></li>
<li>低层数据流，因为会直接操作数据源，效率高，但是功能并不强大</li>
</ul>
<p><strong>处理流</strong></p>
<ul>
<li>也叫<strong>包装流</strong></li>
<li>是连接在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能</li>
<li>BufferedReader 类中有属性 Reader， 即可以封装一个节点流，该节点流是任意的，只要是reader的子类</li>
</ul>
</blockquote>
<p><strong>节点流和处理流一览表</strong></p>
<img src="/Users/lei/Desktop/Typora笔记/图片/节点流和处理流.png" alt="节点流和处理流" style="zoom:50%;" />





<h3 id="3-4-1-节点、字节流关系"><a href="#3-4-1-节点、字节流关系" class="headerlink" title="3.4.1 节点、字节流关系"></a>3.4.1 节点、字节流关系</h3><blockquote>
<p><strong>节点流和处理流的区别和联系</strong></p>
<ul>
<li>节点流是底层流&#x2F;低级流，直接和数据源相接</li>
<li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li>
<li>处理流（也叫包装流）对节点流进行包装，使用了修饰器设计模式，不会直接与设计源相连</li>
</ul>
<p><strong>处理流的</strong></p>
</blockquote>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><hr>
<h2 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>Java泛型（generics）是JDK5中引入的一个新特性，泛型提供了编译时类型安全检测机制，该机制允许我们在编译时检测到非法的类型数据结构。</p>
<p>泛型的本质就是参数化类型，也就是所操作的数据类型被指定为一个参数。</p>
</blockquote>
<h3 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h3><blockquote>
<ul>
<li>类型安全</li>
<li>消除了强制类型转换</li>
</ul>
</blockquote>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><h3 id="泛型类定义"><a href="#泛型类定义" class="headerlink" title="泛型类定义"></a>泛型类定义</h3><blockquote>
<ul>
<li><p>泛型类的定义语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 类名 &lt;泛型标识， 泛型标识....&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> 泛型标识 变量名;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用的泛型标识：T、E、K、V</p>
</li>
</ul>
</blockquote>
<p><strong>案例：假设一个 Student 类的学号不知道是 Number 类型还是 String 类型，就可以用泛型解决</strong></p>
<p>定义一个泛型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 传入字符串</span></span><br><span class="line">       <span class="type">Student</span> <span class="variable">studentStr</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Student</span>&lt;String&gt;();</span><br><span class="line">       studentStr.setNo(<span class="string">&quot;10001&quot;</span>);</span><br><span class="line">       System.out.println(studentStr.getNo());</span><br><span class="line">      <span class="comment">// 传入Integer</span></span><br><span class="line">       <span class="type">Student</span> <span class="variable">studentNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>&lt;Integer&gt;();</span><br><span class="line">       studentNum.setNo(<span class="number">10001</span>);</span><br><span class="line">        System.out.println(studentStr.getNo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="泛型类的继承"><a href="#泛型类的继承" class="headerlink" title="泛型类的继承"></a>泛型类的继承</h3><blockquote>
<p>从泛型类派生子类</p>
<ul>
<li>若子类也是泛型类，子类和父类的泛型类型要一致</li>
<li>若子类不是泛型类，父类要明确泛型的数据类型</li>
</ul>
</blockquote>
<p>父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> E value;</span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>泛型子类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child_1</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>泛型子类的扩展：泛型可以扩展，但子类一定要有一个和父类相同，否则父类无法接受数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child_1</span>&lt;T,E,K&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>非泛型子类：如果不指定的话创建子类对象时无法指定父类的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child_2</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><h3 id="泛型接口定义"><a href="#泛型接口定义" class="headerlink" title="泛型接口定义"></a>泛型接口定义</h3><blockquote>
<p>interface 接口名称&lt;泛型标识，泛型标识…&gt; {<br>泛型标识 方法名；<br>}</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">getKey</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="泛型接口的实现"><a href="#泛型接口的实现" class="headerlink" title="泛型接口的实现"></a>泛型接口的实现</h3><blockquote>
<p>泛型接口的使用：</p>
<ul>
<li>实现类不是泛型类，接口要明确数据类型</li>
<li>实现类是泛型类，实现类和泛型类的数据类型要一样</li>
</ul>
</blockquote>
<ul>
<li><p>子类不是泛型类且没有指定接口的泛型，那么实现方法默认以Object返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类不是泛型类，但指定了接口的泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类是泛型类,同样也可以扩展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T,E&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="泛型接口和泛型类区别"><a href="#泛型接口和泛型类区别" class="headerlink" title="泛型接口和泛型类区别"></a>泛型接口和泛型类区别</h2><blockquote>
<p>当声明了一个反省接口，但是方法不是泛型方法时，其实现类</p>
</blockquote>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><h3 id="泛型方法声明"><a href="#泛型方法声明" class="headerlink" title="泛型方法声明"></a>泛型方法声明</h3><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;T, E,...&gt; 返回值类型 方法名(形参列表) &#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>public 与返回值之间的尖括号T十分重要，可以理解为声明此方法为泛型方法</li>
<li>只有声明了尖括号T的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法</li>
<li>尖括号T表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T</li>
<li>与泛型类的定义一样，此处T可以写为任意标识，常见的如T、E、K、V，等形式的参数常用于表示泛型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; E <span class="title function_">getProduct</span><span class="params">(ArrayList&lt;E&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(random.nextInt(list.size()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="泛型方法调用"><a href="#泛型方法调用" class="headerlink" title="泛型方法调用"></a>泛型方法调用</h3><blockquote>
<ul>
<li>泛型方法的泛型类型的指定与所在的泛型类的泛型类型没关系，可以不一样，但是泛型类的成员方法如果返回值是泛型，那就必须一样了</li>
<li>成员方法不可以声明为static，而泛型方法可以</li>
</ul>
</blockquote>
<p><strong>泛型方法声明类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductGetter</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">private</span> T product; <span class="comment">//奖品</span></span><br><span class="line">    ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//奖品池</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addProduct</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这这是一个成员方法，只是返回值采用了泛型</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        product = list.get(random.nextInt(list.size()));</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义的是一个泛型方法</span></span><br><span class="line"><span class="comment">     * 泛型方法的泛型可以独立于所在泛型类的泛型类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt; 泛型标识，具体类型由调用方法的时候来指定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; E <span class="title function_">getProduct</span><span class="params">(ArrayList&lt;E&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(random.nextInt(list.size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>泛型方法调用类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ProductGetter&lt;Integer&gt; getter = <span class="keyword">new</span> <span class="title class_">ProductGetter</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] products = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">400</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; products.length; i++) &#123;</span><br><span class="line">            getter.addProduct(products[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用成员方法</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">pro</span> <span class="operator">=</span> getter.getProduct();</span><br><span class="line">        System.out.println(pro + <span class="string">&quot;\t&quot;</span> + pro.getClass().getSimpleName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两次调用泛型方法，泛型指定的类型可以不一样</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;笔记本电脑&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;马尔代夫一日游&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">product</span> <span class="operator">=</span> getter.getProduct(list);</span><br><span class="line">        System.out.println(product + <span class="string">&quot;\t&quot;</span> + product.getClass().getSimpleName());</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(<span class="number">1000</span>);</span><br><span class="line">        list1.add(<span class="number">500</span>);</span><br><span class="line">        list1.add(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">money</span> <span class="operator">=</span> getter.getProduct(list1);</span><br><span class="line">        System.out.println(money + <span class="string">&quot;\t&quot;</span> + money.getClass().getSimpleName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="静态泛型方法"><a href="#静态泛型方法" class="headerlink" title="静态泛型方法"></a>静态泛型方法</h3><blockquote>
<p>泛型方法可以被声明成static，成员方法不可以</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, E, K&gt; <span class="keyword">void</span> <span class="title function_">printType</span><span class="params">(T t, E e, K k)</span> &#123;</span><br><span class="line">        System.out.println(t + <span class="string">&quot;\t&quot;</span> + t.getClass().getSimpleName());</span><br><span class="line">        System.out.println(e + <span class="string">&quot;\t&quot;</span> + e.getClass().getSimpleName());</span><br><span class="line">        System.out.println(k + <span class="string">&quot;\t&quot;</span> + k.getClass().getSimpleName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="可变参数泛型方法"><a href="#可变参数泛型方法" class="headerlink" title="可变参数泛型方法"></a>可变参数泛型方法</h3><blockquote>
<p>在参数的泛型类型后添加三个点即可声明为可变参数</p>
</blockquote>
<p><strong>多参数方法定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//泛型可变参数的定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">prints</span><span class="params">(E... e)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; e.length; i++) &#123;</span><br><span class="line">            System.out.println(e[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getter.prints(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>,<span class="literal">true</span>,<span class="number">4</span>,<span class="number">5</span>); <span class="comment">//打印参数列表内容</span></span><br></pre></td></tr></table></figure>











<h2 id="4-5-类型通配符"><a href="#4-5-类型通配符" class="headerlink" title="4.5 类型通配符"></a>4.5 类型通配符</h2><blockquote>
<p>由下图的样例可以看出，在泛型中如果制定了泛型类的类型，哪怕是其指定类型的子 类型也不可以，同理重载也是不可以的，所以解决方案就是使用泛型的通配符</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-06-07 14.14.00.png" alt="截屏2022-06-07 14.14.00" style="zoom:50%;" />

<hr>
<blockquote>
<p>使用通配符？后即可解决这个问题</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-06-07 14.17.53.png" alt="截屏2022-06-07 14.17.53" style="zoom:50%;" />





<h3 id="4-5-1-类型通配符介绍"><a href="#4-5-1-类型通配符介绍" class="headerlink" title="4.5.1 类型通配符介绍"></a>4.5.1 类型通配符介绍</h3><blockquote>
<ul>
<li>类型通配符一般是使用 ’ ？‘ 代替具体的类型实参</li>
<li>所以，类型通配符是类型实参，而不是类型形参</li>
</ul>
</blockquote>
<h3 id="4-5-2-类型通配符上限"><a href="#4-5-2-类型通配符上限" class="headerlink" title="4.5.2 类型通配符上限"></a>4.5.2 类型通配符上限</h3><blockquote>
<p>当指定了泛型的上限后意味着只能传递这个上限以及上限的子类</p>
<p>通过extends来指定上限,但不可以添加元素</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-06-07 14.24.03.png" alt="截屏2022-06-07 14.24.03" style="zoom:50%;" />



<h3 id="4-5-3-类型通配符下限"><a href="#4-5-3-类型通配符下限" class="headerlink" title="4.5.3 类型通配符下限"></a>4.5.3 类型通配符下限</h3><blockquote>
<p>使用super来指定下限，可以添加元素但不保证 约束，且在遍历是以Object接受</p>
<p>要求该反省的类型只能是实参类型或实参类型的父类型</p>
</blockquote>
<img src="/Users/lei/Desktop/Typora笔记/图片/截屏2022-06-07 14.32.55.png" alt="截屏2022-06-07 14.32.55" style="zoom:50%;" />













<h2 id="4-6-类型擦除"><a href="#4-6-类型擦除" class="headerlink" title="4.6 类型擦除"></a>4.6 类型擦除</h2><blockquote>
<p>泛型是java 1.5 才引进的概念，在此之前是没有泛型的，但是，泛型代码能很好的和之前的代码兼容是因为泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦除，称之为类型擦除</p>
</blockquote>
<h2 id="4-7-泛型与数组"><a href="#4-7-泛型与数组" class="headerlink" title="4.7 泛型与数组"></a>4.7 泛型与数组</h2><h2 id="4-8-泛型与反射"><a href="#4-8-泛型与反射" class="headerlink" title="4.8 泛型与反射"></a>4.8 泛型与反射</h2><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><hr>
<h2 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h2><h3 id="注解概述"><a href="#注解概述" class="headerlink" title="注解概述"></a>注解概述</h3><blockquote>
<ul>
<li>注解（Annotation）是从JDK5.0开始引入的技术</li>
<li>Annotation 的作用：<ul>
<li>不是程序本身，可以对程序作出解释（这点和注释（comment）一样）</li>
<li><strong>可以被其他程序（比如：编译器）读取</strong></li>
</ul>
</li>
<li>Annotation 可以在哪里使用<ul>
<li>可以附加在package、class、method、field上面，相当于给他们添加了额外的辅助信息<br>可以通过反射机制编程实现对这些元数据的访问</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><blockquote>
<ul>
<li>@Override<br>定义在lang包下，此注释只适用于修辞方式，表示一个方法声明打算重写超类中的另一个方法声明</li>
<li>@Deprecated<br>定义在lang包下，此注释可以用于修辞方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它有危险或者有更好的选择</li>
<li>@SuppressWarnings<br>定义在lang包下，用来抑制编译时的警告信息，它需要添加参数才可以使用<br>@SuppressWarnings（”all”）<br>@SuppressWarnings（”unchecked”）<br>@SuppressWarnings（value &#x3D; {“unchecked”, deprecation}）<br>……</li>
</ul>
</blockquote>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><blockquote>
<p>元注解的作用就是负责注解其他注解<br>Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明</p>
<ul>
<li>@Target<br>用于描述注解的使用范围（即被描述的注解可以用在什么地方）</li>
<li>@Retention<br>表示需要在什么级别保存该注解信息，用于描述注解的生命周期<br>source &lt; class &lt; runtime</li>
<li>@Documented<br>说明该注解将被包含在javadoc中</li>
<li>@Inherited<br>说明子类可以继承父类中的该注解</li>
</ul>
</blockquote>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><blockquote>
<p>自定义注解：@interface</p>
<ul>
<li>使用自定义注解时自动继承了java.lang.annatation.Annatation接口</li>
<li>格式：<br>@interface 注解名 {定义内容}</li>
<li><strong>其中的每一个方法实际上是声明了一个配置参数</strong></li>
<li>方法的名称就是参数名</li>
<li>返回类型就是参数的类型（返回值只能是基本类型，Class、String、enum）</li>
<li>可以通过default来声明参数的默认值</li>
<li>如果只有一个参数成员，一般命名为value</li>
<li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值</li>
</ul>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@myAnnatation(name = &quot;Erics&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> myAnnatation &#123;</span><br><span class="line">    <span class="comment">//如果没有default且又声明了一个元素，那么在使用时就必须加参数</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><hr>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="静态、动态语言"><a href="#静态、动态语言" class="headerlink" title="静态、动态语言"></a>静态、动态语言</h3><blockquote>
<p><strong>动态语言</strong></p>
<ul>
<li>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或者其他结构上的变化，即在运行时代码可以根据某些条件改变自身结构</li>
<li>例如：Object-C、C#、JavaScript、PHP、Python等</li>
</ul>
<p><strong>静态语言</strong></p>
<ul>
<li>运行时结构不可以被改变，如Java、C、C++</li>
<li>Java不是动态语言但被称为准动态语言，即Java具有一定的动态性，我们可以利用反射机制获得类似动态语言的特性</li>
</ul>
</blockquote>
<h3 id="反射（Reflectio-n）"><a href="#反射（Reflectio-n）" class="headerlink" title="反射（Reflectio n）"></a>反射（Reflectio n）</h3><blockquote>
<ul>
<li>Reflection是Java被视为动态语言的关键，反射机制允许程序在执行期间借助Reflection API 获得任何类的内部信息，并能直接操作任对象的内部属性及方法</li>
<li>加载完类之后，在堆内存的方法区就产生了一个Class类型的对象（<strong>一个类只有一个Class对象</strong>），这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构，这个对象就像一面镜子，透过这个镜子看到类的结构，所以我们形象的称之为反射。</li>
<li>正常方式：<br>引入需要的包类名称 –&gt; 通过new实例化 –&gt; 获取实例化对象</li>
<li>反射方式：<br>实例化对象 –&gt; getClass（）方法 –&gt; 得到完整的包类名称</li>
</ul>
</blockquote>
<blockquote>
<p><strong>Java反射机制提供的功能</strong></p>
<ul>
<li>在运行时判断任何一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类具有的成员方法和变量</li>
<li>在运行时获取范型信息</li>
<li>在运行时调用任意一个对象的成员方法和变量</li>
<li><strong>在运行时处理注解</strong></li>
<li>生成动态代理</li>
<li>……</li>
</ul>
</blockquote>
<blockquote>
<p><strong>优点</strong><br>可以实现动态创建对象和编译，体现出很大的灵活性</p>
</blockquote>
<blockquote>
<p><strong>缺点</strong><br>对性能有很大影响<br>使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求，这类操作总是慢于直接执行相同操作</p>
</blockquote>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><blockquote>
<p>类加载器的内容以后还要继续补充，下图是关于类加载器的作用的简单示意图</p>
<p>Java 反射机制就是帮助我们拿到堆中的 class 的信息</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-10%2000.09.49.png" style="zoom:50%">





<blockquote>
<p>那么 class 信息是什么时候被 classLoadder 方法 堆中的呢？<br>当我们需要使用的时候才会放, 一般是 new 对象的时候先判断 class 文件存不存在，不存在就会加载到内存，然后来创建对象</p>
</blockquote>
<p><strong>验证如下：</strong></p>
<p>一：new 一个类，然后在这一句打上断点，这个类最好不要实现接口，不然可能会不利于观察结果</p>
<p>二：找到 Java 源码的 ClassLoader 这个类，可以随便 new 一个对象然后通过以下方法进入到 ClassLoader 的 loadClass 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">serviceImpl2.getClass().getClassLoader().loadClass();</span><br></pre></td></tr></table></figure>

<p>三：先只在 new 对象的那一行打断点，不要再 loadClass 方法打，因为程序很有可能在运行的时候先加载了其他类的 class，从而影响我们观察结果。当打好断点后，等debug 代码到断点，再在 classLoad 方法的那里打上断点，并直接执行到该断点，如下图：</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-10%2018.10.21.png" style="50%">

<p>四：总结：当我们在 new 对象的时候，会将该类的 class 文件加载到堆中</p>
<blockquote>
<p>还有其他知识点：</p>
<ul>
<li>以下代码的打印结果为true，因为 class 文件在内存中只有一份</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(serviceImpl2.getClass() == ServiceImpl2.class);</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="获取-class-的方式"><a href="#获取-class-的方式" class="headerlink" title="获取 class 的方式"></a>获取 class 的方式</h3><blockquote>
<ul>
<li>类名.class</li>
<li>new 出一个对象，根据对象获取 class</li>
<li>Class.forName（类的完整路径地址）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 类名.class</span></span><br><span class="line">        Class&lt;ServiceImpl2&gt; serviceImpl2Class = ServiceImpl2.class;</span><br><span class="line">        <span class="comment">// 2. new 出一个对象，根据对象获取 class</span></span><br><span class="line">        <span class="type">ServiceImpl2</span> <span class="variable">serviceImpl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceImpl2</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ServiceImpl2</span>&gt; aClass = serviceImpl2.getClass();</span><br><span class="line">        <span class="comment">// 3. Class.forName（类的完整路径地址）</span></span><br><span class="line">        Class&lt;?&gt; aClass1 = Class.forName(<span class="string">&quot;com.sjms.dailimoshi.demo1.ServiceImpl2&quot;</span>);</span><br></pre></td></tr></table></figure>









<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<ul>
<li>JDBC 中 Class.forName(“com.mysql.jdbc.Driver”) 反射技术加载 mysql 驱动</li>
<li>Spring 基于反射技术初始化对象</li>
<li>第三方框架扩展功能</li>
</ul>
</blockquote>
<h2 id="反射技术核心-API"><a href="#反射技术核心-API" class="headerlink" title="反射技术核心 API"></a>反射技术核心 API</h2><blockquote>
<p><strong>newInstance</strong></p>
<p> 默认使用无参构造器创建对象</p>
</blockquote>
<p>一：创建一个对象,为了验证 newInstance 方法调用的是无参构造方法，加一条打印语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectionObject</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;new instance 默认调用无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：通过 class 来创建对象<br>可以清楚看到 newInstance 方法通过 class 拿到了类的成员方法和变量，并通过无参构造方法创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createObject</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.myReflection.ReflectionObject&quot;</span>);</span><br><span class="line">        <span class="comment">// 默认走无参构造器</span></span><br><span class="line">        <span class="type">ReflectionObject</span> <span class="variable">reflectionObject</span> <span class="operator">=</span> (ReflectionObject) aClass.newInstance();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>getConstructor</strong></p>
<p>通过 class 获取类的构造器，其参数是有参构造方法的参数的 class 信息</p>
</blockquote>
<p>一：给对象增加有参构造器以及 toString 方法来观察结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectionObject</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;new instance 默认调用无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectionObject</span><span class="params">(String name, Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        System.out.println(<span class="string">&quot;construction 的 newInstance 走有参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ReflectionObject&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：通过 class 拿到 constructor 再调用他的 newInstance 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.myReflection.ReflectionObject&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = aClass.getConstructor(String.class, Integer.class);</span><br><span class="line"><span class="type">ReflectionObject</span> <span class="variable">instance</span> <span class="operator">=</span>(ReflectionObject) constructor.newInstance(<span class="string">&quot;erics&quot;</span>, <span class="number">10001</span>);</span><br><span class="line">System.out.println(instance);</span><br></pre></td></tr></table></figure>



<blockquote>
<ul>
<li><strong>getConstructors</strong><br>获取类中所有的 public 修饰的构造方法</li>
<li><strong>getDeclaredAnnotations</strong><br>获取类中所有的私有的、受保护的构造方法</li>
</ul>
</blockquote>
<blockquote>
<p><strong>获取成员属性</strong></p>
<ul>
<li>getFields()<br>获取所有公有字段</li>
<li>getDeclaredFields<br>获取所有字段</li>
</ul>
</blockquote>
<blockquote>
<p><strong>给成员属性赋值</strong><br>注意：反射是可以直接访问到私有的成员属性的, 但是需要在调用 set 方法前设置访问权限</p>
<ol>
<li>先调用 newInstance 调用无参构造方法创建对象</li>
<li>通过 getDeclaredField( fieldName) 获取指定的成员属性名称</li>
<li>再开启私有属性的访问权限</li>
<li>调用 Field 的 set 方法即可完成赋值</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getProperties</span><span class="params">()</span> </span><br><span class="line">	<span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">// 拿到 class 信息</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.myReflection.ReflectionObject&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用无参构造方法创建对象</span></span><br><span class="line">        <span class="type">ReflectionObject</span> <span class="variable">reflectionObject</span> <span class="operator">=</span>(ReflectionObject) aClass.newInstance();</span><br><span class="line">        <span class="comment">// 通过属性名拿到其对应的 Field </span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">idField</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">// 打开访问权限</span></span><br><span class="line">        idField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 赋值</span></span><br><span class="line">        idField.set(reflectionObject, <span class="number">10001</span>);</span><br><span class="line">        System.out.println(reflectionObject);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p><strong>获取成员方法</strong></p>
<ul>
<li>getMethods()<br>获取所有的公有方法，<strong>包含 Object 父类中的公有方法</strong></li>
<li>aClass.getDeclaredMethods()<br>获取该类所有方法，包括私有的，不包括继承的</li>
</ul>
</blockquote>
<blockquote>
<p><strong>调用成员方法</strong></p>
<ol>
<li>根据方法名和参数类型列表获取方法</li>
<li>创建对象（方法的执行是依赖于对象的）</li>
<li>如果是私有的方法需要打开权限</li>
<li>调用 invoke</li>
</ol>
</blockquote>
<p><strong>调用 public 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.myReflection.ReflectionObject&quot;</span>);</span><br><span class="line"><span class="type">ReflectionObject</span> <span class="variable">reflectionObject</span> <span class="operator">=</span>(ReflectionObject) aClass.newInstance();</span><br><span class="line"><span class="comment">// 获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">showNameId</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;showNameId&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="comment">// invoke 调用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span>(String) showNameId.invoke(reflectionObject, <span class="string">&quot;erics&quot;</span>, <span class="number">10001</span>);       System.out.println(result);</span><br></pre></td></tr></table></figure>

<p><strong>调用 private 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.myReflection.ReflectionObject&quot;</span>);</span><br><span class="line"><span class="type">ReflectionObject</span> <span class="variable">reflectionObject</span> <span class="operator">=</span>(ReflectionObject) aClass.newInstance();</span><br><span class="line"><span class="comment">// 获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">showNameId</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;showNameId&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="comment">// 开启权限</span></span><br><span class="line">showNameId.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// invoke 调用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span>(String) showNameId.invoke(reflectionObject, <span class="string">&quot;erics&quot;</span>, <span class="number">10001</span>);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure>







<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><blockquote>
<p>JDBC 是 java 官方提供的一套规范接口，用于操作不同的关系型数据库</p>
</blockquote>
<p>p2</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h1 id="Socket-网络编程"><a href="#Socket-网络编程" class="headerlink" title="Socket 网络编程"></a>Socket 网络编程</h1><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><blockquote>
<ul>
<li>http 协议是基于请求(request)与相应(response)模型的</li>
<li>http 底层是基于 tcp 协议封装的，面向连接方式</li>
<li>http 协议是无状态协议，即对事物的处理是没有任何记忆功能的</li>
<li>http 请求多次是无法共享的<br>javaweb 中我们可以通过 cookie、session 解决该问题</li>
<li>http 协议数据传输过程中是属于同步的过程<br>即如果客户端发送请求到服务器端，服务器端一直没有响应，可能会导致客户端一直阻塞等待</li>
</ul>
</blockquote>
<h3 id="http协议请求格式"><a href="#http协议请求格式" class="headerlink" title="http协议请求格式"></a>http协议请求格式</h3><blockquote>
<p>大致可以分为如下三部分</p>
<ol>
<li>请求行</li>
<li>请求头</li>
<li>请求体</li>
</ol>
</blockquote>
<blockquote>
<p><strong>请求行</strong></p>
<p>即请求数据的第一行，包括如下内容：</p>
<ul>
<li>请求方法：get、post</li>
<li>url </li>
<li>http 协议版本</li>
</ul>
<p><strong>以百度为例，请求行为</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>


</blockquote>
<blockquote>
<p><strong>请求头</strong></p>
<p>以键值对的形式封装了一些请求的参数，主要的有：</p>
<ul>
<li><p>Host<br>接受请求的服务器地址，可以是 ip + 端口号也可以是域名</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>User-Agent<br>发送请求的应用程序名称（下面的 U-A 信息表示该请求来自于 Chrome 浏览器）</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</span><br></pre></td></tr></table></figure>
</li>
<li><p>Connection</p>
</li>
<li><p>Accept-Charset</p>
</li>
<li><p>Accept-Encoding</p>
</li>
<li><p>Accept-Language</p>
</li>
</ul>
</blockquote>
<blockquote>
<p><strong>请求体</strong></p>
<p>post 请求的最后一部分，存放发送请求的参数（具体的可以看 get 和 post 请求的区别）</p>
</blockquote>
<h3 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h3><blockquote>
<ul>
<li>get 请求的请求参数在请求行中，没有请求体<br>post 请求的请求参数是在请求体中</li>
<li>get 请求的参数有大小限制<br>post 请求的参数没有大小限制</li>
</ul>
</blockquote>
<h3 id="http-响应格式"><a href="#http-响应格式" class="headerlink" title="http 响应格式"></a>http 响应格式</h3><blockquote>
<p>有以下三个部分：</p>
<ol>
<li>响应行</li>
<li>响应头</li>
</ol>
</blockquote>
<blockquote>
<p><strong>响应行</strong></p>
<p>响应行主要包含 http 协议版本、状态码  </p>
<p><strong>状态码</strong></p>
<p><a href="https://blog.csdn.net/weixin_49904442/article/details/126858357">https://blog.csdn.net/weixin_49904442/article/details/126858357</a></p>
</blockquote>
<blockquote>
<p><strong>响应头</strong></p>
<ul>
<li><p>Date<br>响应时间</p>
</li>
<li><p>Content-Type<br>响应的类型，还包含了响应内容编码格式。常见的响应内容有 text、html、image</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">text/javascript; charset=utf-8</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h2 id="什么是网络编程"><a href="#什么是网络编程" class="headerlink" title="什么是网络编程"></a>什么是网络编程</h2><blockquote>
<p>网络编程（Socket）就是编写计算机程序使得联网的两个或多个设备进行数据传输</p>
<p><strong>网络编程三要素</strong></p>
<ul>
<li>ip 地址<br>定位对方的主机</li>
<li>端口号<br>定位对方主机上的应用程序</li>
<li>协议（tcp&#x2F;udp）</li>
</ul>
</blockquote>
<h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><blockquote>
<p>IP 地址，即 InternetAddress（在 java 中，InetAddress 即可代表 IP）</p>
<p><strong>相关知识</strong></p>
<ul>
<li>本地回环地址：127.0.0.1（主机名：localhost）</li>
<li>公网IP 和 局域网IP<br>如果两台计算机连接到同一个路由器，那么就组成了一个局域网，这两台计算机之间的通信消耗的资源很少<br>如果两台计算机没有连接到同一个路由器，那么就要走互联网的形式</li>
</ul>
</blockquote>
<h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><blockquote>
<p>封装了一些对本机 ip 地址进行操作的方法</p>
</blockquote>
<p><strong>获取本机 ip 地址，主机名等内容</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> inetAddress.getHostName(); <span class="comment">// 获取本地 ip 地址主机名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> inetAddress.getHostAddress(); <span class="comment">// 获取本机 ip 地址</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost(); <span class="comment">// 将主机 ip 名和 ip 地址包装成对象</span></span><br></pre></td></tr></table></figure>





<h3 id="dns-解析"><a href="#dns-解析" class="headerlink" title="dns 解析"></a>dns 解析</h3><blockquote>
<p>HostName 就是主机名称，也就是我们的域名,baidu.com, taobao.com 都是域名</p>
<p><strong>当我们输入一个网址后，会发生什么</strong></p>
<ol>
<li>先去找本机 hosts 文件，如果有匹配，返回结果</li>
<li>如果没有匹配，则去电信运营商那里获取公网 ip 地址</li>
</ol>
</blockquote>
<p><strong>mac 电脑的 hosts 文件</strong></p>
<ol>
<li>打开 finder，按下 command + shift + g，输入 &#x2F;private</li>
<li>进入 etc 目录找到 hosts 文件，内容大致如下</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-03%2009.58.50.png">



<p><strong>对 host 文件进行如下操作，将 127.0.0.1 的值改为 <a href="http://www.baidu.com/">www.baidu.com</a></strong></p>
<p>造成的结果有：</p>
<ol>
<li>在浏览器输入 baidu 的域名后无法访问，因为本机 hosts 文件将其解析成了 127.0.0.1</li>
<li>运行 InetAddress 代码，会发现getHostByName 也是 127.0.0.1，如下</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-03%2010.18.12.png">









<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><blockquote>
<p>核心特点：面向无连接、不可靠的协议、安全系数低，容易丢包，但是传输速度很快，不需要类似 TCP 协议的三次握手</p>
<p>当客户端采用 UDP 协议向服务器端发送数据时，不会确认服务器端的监听端口是否正常运行，直接发送，如果服务器端的监听端口不在正常工作，那么数据就会丢失</p>
</blockquote>
<h3 id="代码模拟udp发送信息"><a href="#代码模拟udp发送信息" class="headerlink" title="代码模拟udp发送信息"></a>代码模拟udp发送信息</h3><blockquote>
<p><strong>用 Java 代码模拟客户端采用 UDP 协议向服务器端发送数据</strong></p>
<p><strong>客户端代码步骤</strong></p>
<ol>
<li>创建 socket 端对象</li>
<li>提供数据，并将数据封装到数据包中</li>
<li>通过 socket 服务发送功能，将数据包发送出去</li>
<li>释放资源</li>
</ol>
</blockquote>
<p><strong>客户端代码</strong></p>
<p>该代码无论有没有服务端监听都不会失败，因为是面向无连接的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPCLient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建 socket 发送对象，待会会调用他的 send 方法发送一个 daatagramPackage</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">// 创建参数：发送的信息（byte 数组）、信息长度、服务器端地址、服务器端口号，并封装到 DatagramPacket 中</span></span><br><span class="line">        <span class="type">byte</span>[] msg = <span class="string">&quot;hello udp&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ipAddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(msg, msg.length, ipAddress, port);</span><br><span class="line">        <span class="comment">// 发送</span></span><br><span class="line">        datagramSocket.send(packet);</span><br><span class="line">        System.out.println(<span class="string">&quot;send msg sucessed&quot;</span>);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>服务端代码步骤</strong></p>
<ol>
<li>创建接收端 socket 对象</li>
<li>接收数据</li>
<li>解析数据</li>
<li>输出数据</li>
<li>释放资源</li>
</ol>
</blockquote>
<p><strong>服务端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建接收端 socket 对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(port);</span><br><span class="line">        <span class="comment">// 接收</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="comment">// 开始监听端口，等待客户端发送数据，如果客户端一直没发送数据就阻塞下去</span></span><br><span class="line">        System.out.println(<span class="string">&quot;listening to 8080&quot;</span>);</span><br><span class="line">        datagramSocket.receive(datagramPacket);</span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        System.out.println(<span class="string">&quot;received msg successed&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] data = datagramPacket.getData();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        <span class="comment">// 释放</span></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="UDP-应用"><a href="#UDP-应用" class="headerlink" title="UDP 应用"></a>UDP 应用</h3><blockquote>
<p>现编写一个客户端和服务端 demo 如下：<br>客户端可以一直给服务端发送信息，而服务端也会一直接收信息</p>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入信息：&quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;quit&quot;</span>.equals(context)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;退出程序.....&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] bytes = context.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length, InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">8080</span>);</span><br><span class="line">            ds.send(dp);</span><br><span class="line">            System.out.println(<span class="string">&quot;信息发送成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>服务端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8080</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">100</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            System.out.println(<span class="string">&quot;信息接收成功：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData()));</span><br><span class="line">        &#125;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><blockquote>
<p>使用 TCP 协议传输数据，需要在经历三次握手以后才将数据发送给服务端</p>
<p><strong>三次握手每一次的作用</strong></p>
<ol>
<li>第一次：客户端向服务端发送请求确认服务端是否可以接收数据</li>
<li>第二次：服务端向客户端回复可以</li>
<li>第三次：客户端与服务端开始建立连接发送数据</li>
</ol>
</blockquote>
<h3 id="实现-TCP-发送接收数据"><a href="#实现-TCP-发送接收数据" class="headerlink" title="实现 TCP 发送接收数据"></a>实现 TCP 发送接收数据</h3><blockquote>
<p><strong>发送端</strong></p>
<ol>
<li>创建发送端 socket 对象</li>
<li>获取输出流对象</li>
<li>发送数据</li>
<li>释放资源</li>
</ol>
</blockquote>
<p><strong>发送端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1 创建发送端 socket 对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">8090</span>);</span><br><span class="line">        <span class="comment">// 2 获取输出流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 3 发送数据</span></span><br><span class="line">        os.write(<span class="string">&quot;hello tcp&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 4 释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当接收端服务没起来时，会报以下错误,因为是面向连接的，所以会出现 connection refused 的错<br>该错会出现在各种场合，主要有：</p>
<ul>
<li>ip 地址访问不通（防火墙未关等）</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-04%2001.00.29.png">



<blockquote>
<p><strong>Server端</strong></p>
<ol>
<li>创建接收端 socket 对象</li>
<li>监听</li>
<li>获取输入流对象</li>
<li>获取数据</li>
<li>输出数据</li>
<li>释放资源</li>
</ol>
</blockquote>
<p><strong>接收端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建接收端 socket 对象</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8090</span>);</span><br><span class="line">        <span class="comment">// 如果客户端一直没有给服务端发送数据，那么服务器端会一直阻塞</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">// 获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的数据：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="TCP应用"><a href="#TCP应用" class="headerlink" title="TCP应用"></a>TCP应用</h3><blockquote>
<p>应用需求如下：</p>
<ol>
<li>可以不断发送和接收</li>
<li>服务端不但能接受信息还能返回信息</li>
<li>客户端能发送信息也能打印服务端的返回的信息</li>
</ol>
</blockquote>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入信息&quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;quit&quot;</span>.equals(context)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;退出程序...&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            os.write(context.getBytes());</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端接收到的服务端的回信: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">            os.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>服务端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端启动成功...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的信息:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="string">&quot;服务端已收到: &quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">            outputStream.write(resp.getBytes());</span><br><span class="line">            inputStream.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="多线程优化"><a href="#多线程优化" class="headerlink" title="多线程优化"></a>多线程优化</h3><blockquote>
<p>简单优化一下，但是一般来说不允许 new Thread，需要使用线程池维护</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端启动成功...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">                        System.out.println(<span class="string">&quot;接收到的信息:&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">                        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="string">&quot;服务端已收到: &quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">                        outputStream.write(resp.getBytes());</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="手写-http-服务端"><a href="#手写-http-服务端" class="headerlink" title="手写 http 服务端"></a>手写 http 服务端</h2><blockquote>
<p>现手写一个 http 服务端，在主机某文件夹下存放若干 html 格式的静态资源，当在浏览器输入 localhost + 文件路径即可访问到该静态资源。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpTcpServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建 ServerSockrt，http基于 tcp 封装的，默认端口号 80</span></span><br><span class="line">        <span class="comment">// 这行代码应该放在 while 循环外面，否则循环监听就会报错</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取客户端发送的数据，判断访问的是哪一个文件</span></span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                        <span class="type">byte</span>[] reqByte = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">reqlen</span> <span class="operator">=</span> inputStream.read(reqByte);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">reqtext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(reqByte, <span class="number">0</span>, reqlen);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">reqAddress</span> <span class="operator">=</span> reqtext.split(<span class="string">&quot;\r\n&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>];</span><br><span class="line">                        outputStream = socket.getOutputStream();</span><br><span class="line">                        <span class="comment">// 读取静态资源文件</span></span><br><span class="line">                        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/lei/Desktop/temporary/testing/&quot;</span> + reqAddress);</span><br><span class="line">                        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                        <span class="type">byte</span>[] respBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fileInputStream.read(respBytes);</span><br><span class="line">                        <span class="comment">// 输出流写数据返回给客户端</span></span><br><span class="line">                        outputStream.write(respBytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) outputStream.close();</span><br><span class="line">                            <span class="keyword">if</span> (socket != <span class="literal">null</span>) socket.close();</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























]]></content>
  </entry>
  <entry>
    <title>开发框架和中间件</title>
    <url>/2023/06/04/%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><hr>
<blockquote>
<p><strong>核心组建件</strong></p>
<ul>
<li>IOC：控制反转</li>
<li>AOP：面向切面</li>
</ul>
<p><strong>IOC</strong></p>
<p>把整个对象创建的过程，统一交给 SpringIOC 容器来实现管理。<br>底层使用反射 + 工厂模式实现。</p>
<p><strong>AOP</strong></p>
<p>对功能（方法）前后实现增强，比如打印日志、事务管理、权限管理<br>底层基于动态代理模式实现。</p>
<p><strong>优势</strong></p>
<ul>
<li>方法解藕，简化开发</li>
<li>AOP 技术支持</li>
<li>提供声明事物支持</li>
<li>Junit 单元测试</li>
<li>方便整合其他框架</li>
<li>降低开发者使用 JavaEE API 开发的难度（Spring 对很多复杂 API 实现了封装）</li>
</ul>
<p><strong>Spring 和 SprignBoot 的关系</strong></p>
<p>SpringBoot 直接采用注解化的方式启动，底层会依赖于 Spring&#x2F;SpringMVC 注解方式启动</p>
</blockquote>
<h2 id="Spring-核心模块"><a href="#Spring-核心模块" class="headerlink" title="Spring 核心模块"></a>Spring 核心模块</h2><img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/image-20230604150554092.png" style="zoom: 80%">



<blockquote>
<ul>
<li><strong>Test</strong>: 对应spring-test.jar. Spring提供的测试工具, 可以整合JUnit测试, 简化测试环节</li>
<li><strong>Core Container</strong>: Spring的核心组件, 包含了Spring框架最基本的支撑<ul>
<li>Beans, 对应spring-beans.jar. Spring进行对象管理时依赖的jar包.</li>
<li>Core, 对应spring-core.jar, Spring核心jar包.</li>
<li>Context, 对应spring-context.jar, Spring容器上下文对象.</li>
<li>SpEL, 对应spring-expression.jar, Spring表达式语言.</li>
</ul>
</li>
<li>**AOP: **面向切面编程, 对应spring-aop.jar.</li>
<li><strong>Data Access</strong>: Spring对数据访问层的封装</li>
<li><strong>JDBC</strong>, 对应spring-jdbc.jar. Spring对jdbc的封装, 当需要使用spring连接数据库时使用. spring-jdbc.jar需要依赖spring-tx.jar.</li>
<li><strong>Transactions</strong>, 对应spring-tx.jar. 事务管理</li>
<li><strong>ORM</strong>, 对应spring-orm.jar. spring整合第三方orm框架需要使用的jar包, 例如Hibernate框架.</li>
<li><strong>Web</strong>: Spring对javax下的接口或类做的扩展功能.</li>
<li><strong>spring-web.jar</strong>, 对Servlet, filter, Listener等做的增强.</li>
<li><strong>spring-webmvc.jar</strong>, 实际上就是SpringMVC框架. 需要依赖spring环境和spring-web.jar.</li>
</ul>
</blockquote>
<h3 id="spring-core"><a href="#spring-core" class="headerlink" title="spring-core"></a>spring-core</h3><blockquote>
<p>核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="spring-beans"><a href="#spring-beans" class="headerlink" title="spring-beans"></a>spring-beans</h3><blockquote>
<p>这个jar 文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean 以及进行Inversion ofControl &#x2F; Dependency Injection（IoC&#x2F;DI）操作相关的所有类。如果应用只需基本的IoC&#x2F;DI 支持，引入spring-core.jar 及spring-beans.jar 文件就可以了。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="spring-context"><a href="#spring-context" class="headerlink" title="spring-context"></a>spring-context</h3><blockquote>
<p>Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="spring-expression"><a href="#spring-expression" class="headerlink" title="spring-expression"></a>spring-expression</h3><blockquote>
<p>模块提供了一个强大的表达式语言，用于在运行时查询和处理对象图。该语言支持设置和获取属性值；属性赋值，方法调用，访问数组的内容，收集和索引器，逻辑和算术运算，命名变量，并从Spring的IOC容器的名字对象检索，它也支持列表选择和投影以及常见的列表聚合。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="spring-aop"><a href="#spring-aop" class="headerlink" title="spring-aop"></a>spring-aop</h3><blockquote>
<p>通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="JDBC-和-DAO"><a href="#JDBC-和-DAO" class="headerlink" title="JDBC 和 DAO"></a>JDBC 和 DAO</h3><blockquote>
<p>JDBC、DAO的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="spring-transaction"><a href="#spring-transaction" class="headerlink" title="spring-transaction"></a>spring-transaction</h3><blockquote>
<p>以前是在这里org.springframework.transaction<br>为JDBC、Hibernate、JDO、JPA、Beans等提供的一致的声明式和编程式事务管理支持。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="spring-orm"><a href="#spring-orm" class="headerlink" title="spring-orm"></a>spring-orm</h3><blockquote>
<p>Spring框架插入了若干个ORM框架，从而提供了ORM对象的关系工具，其中包括了Hibernate、JDO和 IBatis SQL Map等，所有这些都遵从Spring的通用事物和DAO异常层次结构。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="spring-webmvc"><a href="#spring-webmvc" class="headerlink" title="spring-webmvc"></a>spring-webmvc</h3><blockquote>
<p>MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术，其中包括JSP、POI等，模型来有JavaBean来构成，存放于m当中，而视图是一个街口，负责实现模型，控制器表示逻辑代码，由c的事情。Spring框架的功能可以用在任何J2EE服务器当中，大多数功能也适用于不受管理的环境。Spring的核心要点就是支持不绑定到特定J2EE服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的J2EE环境，独立应用程序和测试环境之间重用。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>













<h2 id="快速构建Spring5项目"><a href="#快速构建Spring5项目" class="headerlink" title="快速构建Spring5项目"></a>快速构建Spring5项目</h2><p><strong>1. 引入 maven 依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         这个jar 文件包含Spring 框架基本的核心工具类。</span></span><br><span class="line"><span class="comment">         Spring 其它组件要都要使用到这个包里的类，是其它组件的基本核心，当然你也可以在自己的应用系统中使用这些工具类。</span></span><br><span class="line"><span class="comment">         外部依赖Commons Logging， (Log4J)。</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        这个jar 文件是所有应用都要用到的</span></span><br><span class="line"><span class="comment">        它包含访问配置文件、创建和管理bean 以及进行Inversion ofControl / Dependency Injection（IoC/DI）操作相关的所有类。</span></span><br><span class="line"><span class="comment">        如果应用只需基本的IoC/DI 支持，引入spring-core.jar 及spring-beans.jar 文件就可以了。</span></span><br><span class="line"><span class="comment">        外部依赖spring-core，(CGLIB)。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个jar 文件为Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，J</span></span><br><span class="line"><span class="comment">        DNI 所需的全部类，instrumentation组件以及校验Validation 方面的相关类。外部依赖spring-beans, (spring-aop)。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2. 创建实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>**3. 配置 xml **</p>
<blockquote>
<p>在 resources目录下通过 new XML Configuration File -&gt; spring config 来配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置 spring bean 对象</span></span><br><span class="line"><span class="comment">            bean 的 id 不允许重复，一般是类名首字母小写</span></span><br><span class="line"><span class="comment">            class 是类的完整路径地址</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userEntity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.UserEntity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>4. 调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        spring 配置bean 注入有注解和配置 xml 两种方式</span></span><br><span class="line"><span class="comment">//        bean 世界上就是一个对象</span></span><br><span class="line">        <span class="comment">// 1 加载spring配置文件</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2 根据 id 获得对象</span></span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userEntity&quot;</span>, UserEntity.class);</span><br><span class="line">        userEntity.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><blockquote>
<p><strong>概念</strong></p>
<p>把对象的创建和使用都交给 spring 来进行</p>
<p><strong>底层技术与实现</strong></p>
<p>反射技术、解析 xml、工厂模式</p>
<p><strong>作用</strong></p>
<p>降低代码耦合度</p>
</blockquote>
<h3 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h3><blockquote>
<ol>
<li>new </li>
<li>工厂模式</li>
<li>反射方式</li>
</ol>
</blockquote>
<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><blockquote>
<p>该方式在实际项目中很少使用</p>
<p>因为 new 出来的对象没有统一的方式去管理，且代码耦合度高</p>
<p>例如：某个 DAO类 叫 UserDao，在 service 层的很多个 service 都引用了这个类，那么如果这个 DAO 类的名称发生了改变，那么所有引用这个 DAO 的 service 都要随之手动改变，这就是耦合度高</p>
</blockquote>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><blockquote>
<p>统一的管理和维护我们每个对象创建与使用的过程</p>
<p>一般来说工厂模式创建对象都是三层模型，原料层（需要被创建对象的类）、工厂层、调用工厂层</p>
</blockquote>
<p><strong>原料层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>工厂层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>调用层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adduser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UserFactory</span>().getUser().addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="反射创建"><a href="#反射创建" class="headerlink" title="反射创建"></a>反射创建</h4><blockquote>
<p>利用反射技术的 forName 方法即可创建</p>
</blockquote>
<h3 id="反射-工厂-xml-实现IOC"><a href="#反射-工厂-xml-实现IOC" class="headerlink" title="反射+工厂+xml 实现IOC"></a>反射+工厂+xml 实现IOC</h3><blockquote>
<p>以下方式是自己手写一个简单 IOC 模版，Spring 源码的抽象和复杂程度肯定还是十分高的，需要仔细挖掘</p>
<ol>
<li>使用 xml 解析技术解析 resource 目录下 spring.xml 文件 (dom4j 技术)</li>
<li>获取 bean 标签下类的完整路径</li>
<li>使用反射技术初始化技术初始化对象</li>
<li>需要使用工厂模式封装初始化对象</li>
</ol>
</blockquote>
<p><strong>创建 Dom4jClass 类</strong></p>
<p>之所以创建这个类，一方面是方法的抽象，将独立功能拿出来是有必要的<br>另一方面，在获取 xml 文件路径的时候，需要使用 this.getClass().getResource(“&#x2F;“).getPath() 方法，在Fctory 工厂的 static 方法中是没有办法使用 this 关键字的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dom4jCLass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserEntityClass</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="comment">// this.getClass().getResource(&quot;/&quot;) 这行代码等同于定位到 resource 目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath() + <span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 dom4j 技术提供的类解析 xml</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(file);</span><br><span class="line">        <span class="comment">// 获取根节点</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="comment">// 再根据根标签获取 bean 标签</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> rootElement.element(<span class="string">&quot;bean&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>UserEntityFactory 类</strong></p>
<p>主要是利用反射技术拿到类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEntityFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserEntity <span class="title function_">getUserEntity</span><span class="params">()</span> </span><br><span class="line">      <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException, DocumentException &#123;</span><br><span class="line">        <span class="comment">// 1. 使用 xml 解析技术解析 resource 目录下 spring.xml 文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dom4jCLass</span>().getUserEntityClass();</span><br><span class="line">        <span class="comment">// 2. 获取 bean 标签下类的完整路径(com.erics.entity.UserEntity)</span></span><br><span class="line">        <span class="comment">// 3. 使用反射技术初始化技术初始化对象</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(userClass);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> (UserEntity) aClass.newInstance();</span><br><span class="line">        <span class="comment">// 4. 需要使用工厂模式封装初始化对象</span></span><br><span class="line">        <span class="keyword">return</span> userEntity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="IOC-核心接口"><a href="#IOC-核心接口" class="headerlink" title="IOC 核心接口"></a>IOC 核心接口</h3><blockquote>
<ul>
<li>BeanFactory<br>主要提供给 Spring 内部使用的<br>加载配置文件的时候，不会根据配置文件的内容创建对象，当我们真正在使用该对象的时候才会去创建</li>
<li>ApplicationContext<br>主要提供给开发者使用，对传统的 BeanFactory 实现了非常多的拓展<br>加载配置文件的时候，会根据配置文件的内容创建对象，并且缓存起来（存入一个 ConcurrentHashMap中）</li>
</ul>
<p>所以在日常开发的时候，当我们启动spring项目的时候会特别的卡，但是启动好了的时候，就会特别快，因为 ApplicationContext 在加载配置文件的时候就会创建对象。</p>
<p>而我们之所以使用 ApplicationContext，也是因为在一开始就创建了所有需要的 bean，不是用户在使用的时候才创建，用户体验感会好点，但是缺点是比较消耗内存。</p>
</blockquote>
<h3 id="ApplicationContext-实现类"><a href="#ApplicationContext-实现类" class="headerlink" title="ApplicationContext 实现类"></a>ApplicationContext 实现类</h3><blockquote>
<p>主要有以下实现类：</p>
<ul>
<li><strong>ClassPathXmlApplicationContext</strong>：<br>对应类路径下的XML格式的配置文件，默认的路径是类路径，即默认读取 resource 目录下文件</li>
<li><strong>FileSystemXmlApplicationContext</strong><br>对应文件系统中的XML格式的配置文件</li>
<li><strong>ConfigurableApplicationContext</strong><br>是ApplicationContext的子接口，包含一些扩展方法refresh()和close()让ApplicationContext具有启动、关闭和刷新上下文的能力。所以要关闭ApplicationContext需要new此接口的对象调用close()方法</li>
<li>WebApplicationContext<br>专门为WEB应用而准备的，它允许从相对于WEB根目录的路径中完成初始化工作</li>
</ul>
</blockquote>
<h3 id="SpringBean-的管理方式"><a href="#SpringBean-的管理方式" class="headerlink" title="SpringBean 的管理方式"></a>SpringBean 的管理方式</h3><blockquote>
<p><strong>什么是 bean 的管理</strong></p>
<ol>
<li>Spring 创建对象（使用反射技术实现）</li>
<li>Spring 注入对象属性</li>
</ol>
<p><strong>bean 的管理方式</strong></p>
<ol>
<li>基于 xml 方式管理 bean<br>首先配置一个 xml 文件通过 bean 标签配置对象<br>默认情况下执行，无参构造函数</li>
<li>基于注解管理 bean （SpringBoot）</li>
</ol>
</blockquote>
<h3 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI 依赖注入"></a>DI 依赖注入</h3><blockquote>
<p>依赖注入：即给对象的属性注入值</p>
</blockquote>
<blockquote>
<p><strong>实现方式</strong></p>
<ol>
<li>基于对象属性 set 方法注入</li>
<li>基于有参构造函数实现</li>
<li>p 名称空间注入</li>
</ol>
</blockquote>
<p><strong>一：基于 set 方式</strong></p>
<p>编写 Book 实体类，并声明无参构造函数以及 get set 方法<br>并且，在 set 方法中添加一行打印语句，用来之后我们验证 xml 配置默认走类的 set 方法这个结论</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;the book&#x27;s name is &quot;</span> + bookName);</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBookPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookPrice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookPrice</span><span class="params">(<span class="type">int</span> bookPrice)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;the book&#x27;s price is &quot;</span> + bookPrice);</span><br><span class="line">        <span class="built_in">this</span>.bookPrice = bookPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>编写 Book 类的配置文件，在 bean 标签下通过 property 标签来实现 set 注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Book&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;book1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookPrice&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong><br>有参构造方法传入的参数是有下标的，从 0 开始，所以配置文件可以采用另外一种写法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Car&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WeiLai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>然后使用 ClassPathXmlApplicationContext 类来加载 xml 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;book.xml&quot;</span>);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>以上调用代码仅仅只是创建 book 对象，而终端就已经打印了 setBookName 方法里面的那一行语句<br>说明 xml 配置默认就通过类的 set 方法进行依赖注入<br>也可以通过另外一个方式证明此点：在 book.xml 文件中按下 ctrl 键就可以走到 Book 类的对应属性的 set 方法中</p>
<p><strong>二：基于有参构造函数方式</strong></p>
<p>编写 Car 实体类，且只给一个有参构造方法，且给构造方法加入打印语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String carName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> carPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String carName, <span class="type">int</span> carPrice)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carName = carName;</span><br><span class="line">        <span class="built_in">this</span>.carPrice = carPrice;</span><br><span class="line">        System.out.println(<span class="string">&quot;the name of the car is &quot;</span> + carName);</span><br><span class="line">        System.out.println(<span class="string">&quot;the price of the car is &quot;</span> + carPrice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写 Car 类的 xml 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Car&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;carName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WeiLai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;carPrice&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;car.xml&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;car&quot;</span>, Car.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>终端打印了有参构造方法里面的输出语句</p>
<p><strong>三：p 标签空间注入</strong></p>
<p>首先在编写类的 xml 配置文件的时候要额外引入一个 p 标签的 xmlns<br>然后在 bean 标签里面通过 <strong>p:属性名</strong> 的形式进行依赖注入<br>其底层还是用的 set 方法，所以如果类没有写 set 方法会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;car&quot;</span> class=<span class="string">&quot;com.erics.entity.Car&quot;</span> p:carName=<span class="string">&quot;weilai&quot;</span> p:carPrice=<span class="string">&quot;20000&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>





<h4 id="注入特殊符号"><a href="#注入特殊符号" class="headerlink" title="注入特殊符号"></a>注入特殊符号</h4><blockquote>
<p><strong>注入 null</strong></p>
<p>如果是用上面一节的注入方式，在 bean 标签下的 value 值注入 null，实际上注入的是一个字符串 null<br>如果想要注入空值，在 property 标签里面加 null 标签</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Book&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookPrice&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注入特殊符号</strong></p>
<p>我们是没办法在 property 标签的 value 属性直接注入一些特殊符号的，例如 &lt;&lt; &gt;&gt;，idea会直接报红，如下</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-06%2023.06.20.png">

<p> 这个时候有两种方式解决</p>
<p><strong>一：使用转义符号</strong></p>
<p>大于号的转义是：&amp;gt 后面跟一个分号</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-06%2023.12.05.png">



<p><strong>二：CDATA 形式</strong></p>
<p>使用 CDATA 形式：<![CDATA[属性名和特殊符号]]><br>注意，CDATA 形式必须单独写一个 value 标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Book&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;老人与狗&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookPrice&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h4 id="注入属性外部-bean"><a href="#注入属性外部-bean" class="headerlink" title="注入属性外部 bean"></a>注入属性外部 bean</h4><blockquote>
<p>在日常开发中，我们的项目是分层的，例如 dao 层是 java 与数据库的交互层，一般 dao 里面是一些 dao 接口，然后才是实现类实现这些接口，在 service 层是我们的业务，这些业务会调用 dao 接口，那么在 service 层的类中我们就不可避免的需要利用接口去调用方法，我们就需要在成员变量中声明接口，然后通过有参构造方法将 dao 注入，最后来调用。</p>
</blockquote>
<p><strong>dao 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MemberDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addMember</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">MemberDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMember</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberDaoImpl 的 addMember 实现方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>服务层</strong><br>这里接口是不能 new 出来的，所以我们会把接口放在成员变量中，通过 set 去注入，而 xml 中会注入实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MemberDao memberDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemberDao</span><span class="params">(MemberDao memberDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberDao = memberDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMember</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberService 的 addMember 方法&quot;</span>);</span><br><span class="line">        memberDao.addMember();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>xml 配置类</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;memberService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.service.MemberService&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        name属性是这个property的名称，ref属性才是关联到的bean的id--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memberDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;memberDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;memberDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.dao.impl.MemberDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h4 id="注入内部-bean"><a href="#注入内部-bean" class="headerlink" title="注入内部 bean"></a>注入内部 bean</h4><blockquote>
<p>和上面不同的是，这里的内部 bean 意思是成员方法直接就是类，不是接口</p>
<p>注入内部 bean 的形式用的比较少，一般都是用的级联赋值形式</p>
</blockquote>
<p><strong>教师类只有属性 name</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set teacher name&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>学生类有属性name 和 Teacher 类作为成员变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set student name&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacher</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set student teacher&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>xml 配置</strong></p>
<p>这里其实也是可以用 ref，只是展示一下内部 bean 的注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李华&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>这里的测试输出是很有意思的，如下</strong><br>先调用 xml 里面的内部标签，猜测是因为 xml 文件树状标签是递归调用的，所以导致了这个（有待验证）</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-07%2000.05.58.png">







<h4 id="级联注入-bean-对象"><a href="#级联注入-bean-对象" class="headerlink" title="级联注入 bean 对象"></a>级联注入 bean 对象</h4><blockquote>
<p>第一种利用 ref 也是级联赋值的一种，这里介绍另一种注入属性的方式</p>
</blockquote>
<p><strong>注：这种方式在 Student 类总要有 getTeacher 方法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李华&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;陈老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h4 id="注入集合类型属性"><a href="#注入集合类型属性" class="headerlink" title="注入集合类型属性"></a>注入集合类型属性</h4><blockquote>
<p>注入集合类型主要也是在 xml 文件中使用该集合标签</p>
</blockquote>
<p><strong>实体类</strong><br>别忘了写 set 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(String[] array)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>listVal1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>listVal2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>arrVal1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>arrVal2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;key1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;val1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;key2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;val2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>set1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>set2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="注入集合类型为对象"><a href="#注入集合类型为对象" class="headerlink" title="注入集合类型为对象"></a>注入集合类型为对象</h4><blockquote>
<p>当我们需要注入的集合类型是对象时，需要先在 xml 中配好需要注入的对象，然后通过对应的集合标签和 ref 去引用</p>
</blockquote>
<p><strong>在 Student 类中添加一个私有属性：集合，成员是 Teacher,并给好 set 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Teacher&gt; teachers;</span><br></pre></td></tr></table></figure>

<p><strong>xml 中配置</strong></p>
<p>先声明好想要注入的 Teacher 类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher_li&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher_wang&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在 Student 类的 bean 标签中去引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teachers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacher_li&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacher_wang&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="提供公共-list-配置"><a href="#提供公共-list-配置" class="headerlink" title="提供公共 list 配置"></a>提供公共 list 配置</h4><blockquote>
<p>在 xml 中可以引入公共 list 配置，这样不用每次引入相同的 list 文件都再写一遍</p>
</blockquote>
<p><strong>第一步需要在 xml 的头文件中引入 util 模版</strong></p>
<ol>
<li>先赋值第二行，再把xsi改成 util 再xmlns 的路径拷贝过来再把beans改成 util</li>
<li>再把xsi:schemaLocation的地址复制一遍，把两个 beans 改成 util 再把spring-beans也改成 util</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步定义好公共配置 list</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>l1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>l2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步引入list</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h3 id="bean-的管理"><a href="#bean-的管理" class="headerlink" title="bean 的管理"></a>bean 的管理</h3><blockquote>
<p>在 spring 中有两种 bean 类型，普通 bean 和工厂 bean（factory bean）</p>
</blockquote>
<h4 id="两种-bean-的区别"><a href="#两种-bean-的区别" class="headerlink" title="两种 bean 的区别"></a>两种 bean 的区别</h4><blockquote>
<ul>
<li>普通 bean：在配置文件中定义什么类型，就必须与返回类型保持一致<br>在通过 bean 的 id 去 xml 的contaxt 里面去拿的时候只能接受 bean 中定义的类型，否则报错</li>
<li>factory bean：可以与返回类型不一致</li>
</ul>
</blockquote>
<p><strong>factory bean 返回值类型可以不一致</strong></p>
<p>一：创建一个 factory bean，需要实现 FactoryBean 接口，并返回指定的类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory_1</span>  <span class="keyword">implements</span> <span class="title class_">FactoryBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>().getClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：配置 xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory_1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.factoryBean.Factory_1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三：调用，获取工厂 bean 的时候只需要传 name 即可<br>从代码中可以观察到，xml 里配置的类的 class 是 Factory_1 ,而接收的是 Student，这就是声明和接收可以不一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)context.getBean(<span class="string">&quot;factory_1&quot;</span>);</span><br></pre></td></tr></table></figure>









<h4 id="bean-的作用域"><a href="#bean-的作用域" class="headerlink" title="bean 的作用域"></a>bean 的作用域</h4><blockquote>
<p><strong>什么是作用域？</strong></p>
<p>就是去设定 bean 的作用域是单例还是多例</p>
<p><strong>作用域单例和多例的区别</strong></p>
<ul>
<li>单例作用域：每次调用 getBean 返回的都是同一个对象</li>
<li>多例作用域：每次获取的都是新对象</li>
</ul>
<p><strong>Spring 默认的 bean 的作用域就是单例</strong></p>
<p><strong>单例模式的优点</strong>：节约服务器端内存</p>
<p><strong>什么是单例、多例</strong></p>
<ul>
<li>单例：在同一个 jvm 中，该 bean 对象只会被创建一次</li>
<li>多例：在同一个 jvm 中，该 bean 对象可以被创建多次</li>
</ul>
</blockquote>
<p><strong>单例的验证</strong></p>
<p>一：Teacher 实体类，无参构造方法中添加一句打印语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;teacher no args constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：xml 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三：调用方法</p>
<p>如下图，可以清晰的观察到，通过同一个 xml 配置文件拿到的实体类地址是一模一样的</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-07%2023.17.16.png" style="zoom:50%">



<p><strong>多例的验证</strong></p>
<p>一：将上面的 xml 配置的 scope 指定为 prototype, 默认为 singleton</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>二：调用方法，可以观察到，无参构造方法调用了两次，且对象地址不同</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-07%2023.22.17.png" style="zoom:50%">











<h4 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h4><blockquote>
<p>Spring Bean 的生命周期有一个很重要的知识点：<strong>bean 的后置处理器</strong> </p>
<p>Spring bean 的生命周期可以简单分为：</p>
<ol>
<li>实例化 （反射：默认执行无参构造函数）</li>
<li>属性赋值 （反射技术实现）</li>
<li>调用 bean 设定的init 方法 </li>
<li>使用对象</li>
<li>容器关闭（该 bean 会被销毁，执行 bean 对象中的销毁方法）</li>
</ol>
</blockquote>
<h4 id="验证-bean-的生命周期"><a href="#验证-bean-的生命周期" class="headerlink" title="验证 bean 的生命周期"></a>验证 bean 的生命周期</h4><p>一：创建实体类，这次要给出初始化和销毁方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;第一步：执行无参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：执行 set 方法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：调用初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步：调用销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：配置 xml ，要制定初始化和销毁方法，init-method 和 destroy-method 分别指定初始化和销毁方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Student&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;erics&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三：调用</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-07%2023.44.55.png">









<h4 id="bean-的后置处理器"><a href="#bean-的后置处理器" class="headerlink" title="bean 的后置处理器"></a>bean 的后置处理器</h4><blockquote>
<p>Bean Post Processor</p>
<p>在调用 bean 的 init 方法之前之后都会执行</p>
<p><strong>可以配置多个 bean 后置处理器</strong></p>
<p>如果在 bean 处理器类里面没有 getOrder 方法，就默认按照 xml 里面从上往下的顺序来</p>
</blockquote>
<p><strong>验证 bean 的后置处理器</strong></p>
<p>一：实现一个自己的 BeanPostProcessor 类,实现 BeanPostProcessor 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用 init 方法之前处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init 方法之前调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用 init 方法之后处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init 方法之后调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：怎样才能让我们的类使用自己写的后置处理器呢？在 xml 文件中配置一下就好了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    注册 bean 对象的 Bean Post Processor--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.MyBeanPostProcessor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三：调用 Srudent 类,可以观察到，在 init 方法调用前后都执行了我们自己的 BeanPostProcessor</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-08%2000.02.18.png" style="zoom:50%">













<h4 id="SpringBean-自动装配"><a href="#SpringBean-自动装配" class="headerlink" title="SpringBean 自动装配"></a>SpringBean 自动装配</h4><blockquote>
<p>自动装配就是：spring 根据装配规则（属性的名称或属性的类型）自动为属性赋值</p>
<p>配置方式：在之前的例子中，我们要给学生类里面的教师类实例化，是在 IOC 容器 xml 配置文件中通过 ref 属性来配置的，现在可以在 IOC 容器 xml 里面的 bean 标签中，通过 autowired 属性来指定自动装配的类，其有两种装配方式：</p>
<ol>
<li>byName：属性的名称要和 bean 的 id 保持一致</li>
<li>byType：根据实体类中的属性类型来在 xml 文件中找到对应的 bean 对象</li>
</ol>
</blockquote>
<p><strong>byName</strong></p>
<p>Student实体类中国有一个 Teacher 类的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacher</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IOC 容器 xml 配置文件<br>如果指定的自动装配方式是 byName，那么 xml 里面的 Teacher 类的 bean 的 id 要和 Student 类的属性名称一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>byType</strong></p>
<p>如果是根据 byType 方式，那么 id 不同就没关系了，主要是根据 class 来匹配</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher11&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般在使用 byType 方式的时候，是不能配置多个相同类型的 bean 的，会报错，因为不知道识别哪一个</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-08%2022.53.22.png">









<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h3><blockquote>
<p>AOP 面向切面编程（Aspect Oriented Programming），在方法调用之前和之后进行处理<br>AOP 可以帮助我们解决代码冗余问题</p>
<p>通俗易懂的说就是：aop 在我们调用<strong>目标方法</strong>之前和之后都会进行一些处理操作</p>
<p>主要的应用场景：日志打印、事务安全、安全管理、权限控制、自定义注解等</p>
<p>AOP 底层基于代理设计模式封装 </p>
<ul>
<li>动态代理：jdk 动态代理和cglib动态代理</li>
<li>静态代理</li>
</ul>
<p><strong>Jdk 动态代理和 cglib 动态代理</strong></p>
<p>当被代理类没有实现接口，就走 cglib，当被代理类实现了接口，走 jdk 动态代理<br>jdk 动态代理的效率比 cglib 高</p>
</blockquote>
<h3 id="AOP-常见话术"><a href="#AOP-常见话术" class="headerlink" title="AOP 常见话术"></a>AOP 常见话术</h3><blockquote>
<ul>
<li>连接点<br>该类中需要被增强的方法称为连接点</li>
<li>切点：<br>实际被增强的方法</li>
<li>通知：在方法前后执行代码<ul>
<li>前置通知：在调用切点之前的处理</li>
<li>后置通知：在调用切点之后的处理</li>
<li>环绕通知：前后都处理</li>
<li>异常通知：调用方法的时候抛出异常就会走异常通知</li>
<li>最终通知</li>
</ul>
</li>
<li>切面<br>把通知应用到的过程，就是切面</li>
</ul>
</blockquote>
<h3 id="实现-AOP"><a href="#实现-AOP" class="headerlink" title="实现 AOP"></a>实现 AOP</h3><blockquote>
<p><strong>环境准备</strong></p>
<p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 是一个面向切面的框架，它扩展了 Java 语言。<br>AspectJ 定义了 AOP 语法，他有一个专门的编译器用来生成遵守 Java 字节码规范的 Class 文件，AspectJ 不是 Spring 的组成部分，是一个独立的 AOP 框架，一般把 AspectJ 和 Spring 框架放一起使用。</p>
</blockquote>
<h4 id="切入点规则"><a href="#切入点规则" class="headerlink" title="切入点规则"></a>切入点规则</h4><blockquote>
<p>这个需要百度好好搜集</p>
</blockquote>
<h4 id="具体demo"><a href="#具体demo" class="headerlink" title="具体demo"></a>具体demo</h4><p>一：实现一个服务实现类，里面有我们将要代理的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个 component 就相当于在 IOC 容器 xml 文件里配置了一个 &lt;bean id=首字母小写 ，class=全限定包名&gt; 的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add user successfully&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; <span class="comment">// 这个是为了验证异常通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;delete user successfully&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;del done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：实现一个代理类，定义我们的各种通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个 * 后面要有一个空格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.aop.demo1.UserService.*(..));&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在目标方法之前执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.aop.demo1.UserService.*(..));&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在目标方法之后执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.aop.demo1.UserService.*(..));&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用目标方法之前环绕通知...&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用目标方法之后环绕通知...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.aop.demo1.UserService.*(..));&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterthrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after throwing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三：由于当前我们没有引入 springboot 项目，仅是在 spring 的范畴中<br>        所以我们需要在 xml 配置文件里定义一个扫包范围，把 目标包下的以 @Component 注解的类都注册到容器中<br>        并开启切面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    定义扫包的范围--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.aop.demo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>四：调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAop</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring_aop.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">       userService.addUser();</span><br><span class="line">        userService.delUser();</span><br><span class="line">      System.out.println(userService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>五：观察结果<br>    在 System.out.println(userService); 那里打一个断点并 debug 代码，会发现，这个 service 类来自于 cglib</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-09%2023.15.20.png">

<p>六：重构代码，将 UserService 改为接口，被代理类改为 UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    String <span class="title function_">addUser</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">delUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add user successfully&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete user successfully&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;del done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>七：重新调用，并观察结果<br>        可以看到，这次的 UserServiceImpl 类来自于 $Proxy，也就是 jdk 动态代理</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-09%2023.23.53.png">







<h4 id="获取被代理方法参数"><a href="#获取被代理方法参数" class="headerlink" title="获取被代理方法参数"></a>获取被代理方法参数</h4><blockquote>
<p>在通知方法中可以添加参数 JointPoint 即可获取被代理方法的相关信息</p>
</blockquote>
<p>一：改造通知方法，以 before 通知为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;execution(* com.aop.demo1.UserServiceImpl.*(..));&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">     <span class="comment">// JoinPoint 获取连接点信息</span></span><br><span class="line">       Object[] args = joinPoint.getArgs();</span><br><span class="line">       <span class="keyword">for</span> (Object o : args) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;arg: &quot;</span> + o);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;在目标方法之前执行...&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>二：观察结果：<br>        可以拿到被代理方法的参数了</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-09%2023.32.31.png">







<h3 id="定义公共切入点"><a href="#定义公共切入点" class="headerlink" title="定义公共切入点"></a>定义公共切入点</h3><blockquote>
<p>在之前的 demo 每个通知方法的 value 都要写一遍切点比较麻烦，可以定义一个统一的切点</p>
<p><strong>别忘了execution 的第一个 * 和 com 之间要有空格</strong></p>
</blockquote>
<p><strong>demo</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 统一的切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.aop.demo1.UserServiceImpl.*(..));&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object o : args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;arg: &quot;</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;在目标方法之前执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><hr>
<h2 id="SpringMVC-结构和搭建"><a href="#SpringMVC-结构和搭建" class="headerlink" title="SpringMVC 结构和搭建"></a>SpringMVC 结构和搭建</h2><h3 id="三层架构和-MVC-架构"><a href="#三层架构和-MVC-架构" class="headerlink" title="三层架构和 MVC 架构"></a>三层架构和 MVC 架构</h3><blockquote>
<p><strong>三层架构</strong></p>
<ul>
<li>表示层</li>
<li>业务逻辑层</li>
<li>数据访问层</li>
</ul>
<p><strong>MVC 架构</strong></p>
<ul>
<li>M（model）<br>模型层，模型就是数据，就是 dao、bean，对应三层架构中的业务逻辑层和数据库访问层结合起来的<br>模型是应用程序中用于处理应用程序数据逻辑的部分</li>
<li>V（view）<br>视图层，通俗来说就是前端，JSP、VUE、FreeMark等</li>
<li>C（controller）<br>控制层，底层是基于 servlet 封装的</li>
</ul>
<p><strong>区别</strong></p>
<ul>
<li>三层是基于业务逻辑来分的<br>MVC 是基于页面来分的</li>
<li>三层是软件架构，通过接口实现编程<br>MVC 是一种复合设计模式，一种解决方案</li>
<li>三层是体系架构模式<br>MVC 是设计模式</li>
<li>三层可归属于部署模式<br>MVC 归属于表示模式</li>
</ul>
</blockquote>
<h3 id="SpringMVC-demo-注解"><a href="#SpringMVC-demo-注解" class="headerlink" title="SpringMVC demo-注解"></a>SpringMVC demo-注解</h3><blockquote>
<p>开发一个快速开始 MVC 的 demo</p>
</blockquote>
<p>一：创建一个新 project，首页勾选 create from archetype，并选择如下依赖,小心别选错了，因为有很多 webapp 结尾的<br>然后一路按照正常创建项目那样就好了</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2000.31.35.png" style="zoom:50%">



<p>二：项目创建好以后的 pom 文件里有一些默认的依赖以及 build 配置，都可以删除，我们自己添加如下依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    整合 springmvc 框架依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三：完成后观察项目目录，是没有 java 目录的，src&#x2F;main 下只有一个 webapp 目录，所以先创建 java 目录，创建的时候 idea 是有提示的，直接选择 java 目录即可，然后在 java 目录下创建 com.erics.controller 包，并编写第一个 controller 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// controller 注册注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getResult&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">// 将返回结果包装成 json 数据</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        resultMap.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        resultMap.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;succesded&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四：编写 SpringMVCConfig 配置类(注解方式)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringMVC 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 相当于定义一个 SpringMVCConfig.xml</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.erics.controller&quot;)</span> <span class="comment">// 定义一个扫包范围</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>五：将配置类注册到 ServletInitiallizer 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletInitiallizer</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 注册 SpringMVCConfig 配置类</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        context.register(SpringMVCConfig.class);</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="comment">// 拦截所有的 servlet 请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>六：为了启动项目，引入 maven tomcat 插件,port 配置端口，path配置请求路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    使用 maven tomcat 插件运行项目--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>85<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>七：点击项目右上角 configuration 配置插件,当 tomcat 运行的时候会注册 ServletInitiallizer 类</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2001.24.50.png" style="zoom:50%">

<p>八：当 tomcat 插件配置好以后，右上角就可以启动项目，但是会报如下错误，找不到 servlet 相关方法</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2001.29.26.png">

<p>所以我们需要配置一下  servlet 的依赖，添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>九：现在启动项目就成功了，在浏览器输入：localhost:85&#x2F;getResult ，会发现出现一个报错，不能处理 hashmap，这个问题需要留到以后解决，算是卖一个关子，我们再写一个方法返回值为 String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getString&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">// 将返回结果包装成 json 数据</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getString</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello my first SpringMVC project!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在再访问我们的新方法，返回的字符串会打印在浏览器中</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2001.41.36.png">









<h3 id="SpringMVC-demo-xml"><a href="#SpringMVC-demo-xml" class="headerlink" title="SpringMVC demo-xml"></a>SpringMVC demo-xml</h3><blockquote>
<p>SpringMVC 原生还是通过配置 xml 文件来启动的</p>
</blockquote>
<p>一：创建一个新 project，引入依赖，在 src&#x2F;main 目录下创建 java 目录，在 java 目录下创建一个 com.erics.controller 的包，然后创建一个 controller 类，这些和注解方式的 demo 是一样的，就不赘述了</p>
<p>二：在 src&#x2F;main 下创建一个和 java 同级的目录（idea 应该有提示）resources 目录，在该目录下创建一个 spring-mvc.xml 的配置文件，并复制如下配置文件头信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三：添加扫包范围以及mvc注解方式支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    扫包范围，相当于在注解方式中创建了一个 springmvc 的配置类，加了一个 @Configuration 注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.erics.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启 springmva 注解方式支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>四：早期的 mvs 项目入口点是 webapp&#x2F;web-inf 下的 web.xml 配置，所以我们需要将 mvc xml 配置文件，添加如下头模版</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>五：springmvc 项目所有的请求都是先到达 DispatcherServlet 类，进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    反射机制去加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    servlet 初始化加载 springmvc 配置 xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    让我们的 sspringmvc DispatcherServlet 优先去加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  客户端发送的所有请求都会先到 DispatcherServlet 来进行分发--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>六：右上角 configuration 页面添加 tomcat 配置：先点击左上角 + 号，找到 tomcat 配置，再在 deployment 页面点击 + 号把我们的项目添加进去即可</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2012.08.49.png" style="zoom:50%">











<h2 id="SpringMVC-请求与响应"><a href="#SpringMVC-请求与响应" class="headerlink" title="SpringMVC 请求与响应"></a>SpringMVC 请求与响应</h2><h3 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h3><blockquote>
<p><strong>@RequestMapping</strong></p>
<p>用来处理请求地址映射的注解，可用于映射一个请求或一个方法，可以用在类或方法上<br>如果加在方法上就是具体的请求路径，如果加在类上就是请求前缀</p>
<p>springmvc 定义的 url(带前缀) 是不允许重复的</p>
<p>一般情况下 RequestMapping 支持所有请求，例如 get、post、delete<br>但是可以指定请求类型，如下，就只支持对应的请求类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/getName&quot;, method = RequestMethod.GET)</span></span><br></pre></td></tr></table></figure>

<p><strong>在 SpringMVC 中 @RequestMapping 可以指定任意一种请求方式，如果没指定，那么默认是支持度多个，也可以指定支持多个，当然也可以使用 MVC 封装的指定的请求注解，如：@GetMapping（Path）即可</strong></p>
</blockquote>
<h3 id="5种接收参数类型"><a href="#5种接收参数类型" class="headerlink" title="5种接收参数类型"></a>5种接收参数类型</h3><blockquote>
<p>SpringMVC 支持 5 种请求参数类型：</p>
<ul>
<li>普通参数</li>
<li>对象参数</li>
<li>嵌套对象参数</li>
<li>数组参数</li>
<li>集合普通参</li>
</ul>
</blockquote>
<h4 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h4><ul>
<li>普通参数可以不用 @RequestParam 绑定参数，只要接口调用的时候传递的参数和形参一样即可</li>
<li>当没有用 @RequestParam 绑定参数时，少传参数或者类型传的不对是没问题的，只是不会显示</li>
<li>用 @RequestParam 绑定参数可以指定是否必填,如下，默认是必填的也就是 true，必填的参数如果传参时没有传会报错</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;ordinaryParam2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ordinaryParam2</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;, required = true)</span> String paramName,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(name = &quot;age&quot;, required = false)</span> Integer paramAge)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> paramName + <span class="string">&quot;: &quot;</span> + paramAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="对象参数"><a href="#对象参数" class="headerlink" title="对象参数"></a>对象参数</h4><p>基础用法如下：创建一个 User 实体类，传入的参数会自动与实体类中的成员变量名匹配，可以为空，不传、传错都是 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUser1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">objectParam1</span><span class="params">(User user)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> user.getName() + <span class="string">&quot;: &quot;</span> + user.getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="嵌套对象参数"><a href="#嵌套对象参数" class="headerlink" title="嵌套对象参数"></a>嵌套对象参数</h4><p>如果参数是嵌套对象，即对象的成员是另一个对象，那么在 controller 类中方法不同做太多改变，主要是传参</p>
<p>Controller 类如下, 增加了 UserInfo 类的打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUser1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">objectParam1</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.getName() + <span class="string">&quot;: &quot;</span> + user.getAge() + <span class="string">&quot;: &quot;</span> + user.getUserInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传参及结果如下, 通过类名点属性名的方式传参：</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2015.39.14.png" style="zoom:50%">





<h4 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h4><p>接收数组参数的 controller 写法没有太大差异，就是在参数中定义好数组类型就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getArray&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getArray</span><span class="params">(String[] names)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.toString(names);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在传递参数时，参数名和接口形参名一致即可</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2015.46.41.png" style="zoom:50%">







<h4 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h4><p>接收 List 集合和 接收数组大致相同，但是，<strong>接收集合的时候一定要在参数前面加 @RequsetParam</strong><br>调用方法和数组的调用方式一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getList&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getList</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; names)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.toString(names.toArray());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Json-参数与响应"><a href="#Json-参数与响应" class="headerlink" title="Json 参数与响应"></a>Json 参数与响应</h3><blockquote>
<p><strong>SpringMVC 使用的最多的还是利用 Json 传递参数</strong></p>
<p><strong>主要有以下几种接收参数的方式：</strong></p>
<ul>
<li>以实体类的方式接收</li>
<li>以 Map 接收</li>
<li>以 List 接收</li>
</ul>
</blockquote>
<h4 id="实体类接收-Json"><a href="#实体类接收-Json" class="headerlink" title="实体类接收 Json"></a>实体类接收 Json</h4><blockquote>
<p>接收参数加上 @RequestBody 注解，就可以标记该对象，当接收 json 数据时自动将 json 数据反序列化成对象</p>
<p>由于需要加一些配置，所以在注解启动方式的项目里进行开发</p>
</blockquote>
<p>一：在 SpringMVCConfigue 文件里加 @EnableWebMvc 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 相当于定义一个 SpringMVCConfig.xml</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.erics.controller&quot;)</span> <span class="comment">// 定义一个扫包范围</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：引入 Json 解析依赖，这里引入 Jackson</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>三：在 controller 类中将实体类参数用 @RequestBody 绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUser1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser1</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四：在 postman 中，选择 post 请求，点击请求格式为 body，选择 raw 和 json，并发送数据，查看结果</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2023.22.02.png" style="zoom:50%">







<h4 id="Map-接收-Json"><a href="#Map-接收-Json" class="headerlink" title="Map 接收 Json"></a>Map 接收 Json</h4><blockquote>
<p>用 Map 去接收 Json 数据，Json 的 key 就是Map 的 key，Json 的 value 就是 Map 的value，所以需要注意的是，Json 的 value 的类型与 Map 集合的 value 值类型保持一致</p>
</blockquote>
<p>一：编写 controller 方法 如下方法参数意味着 Json 只能传基本的 kv 格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserMap&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserMap</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; userMap)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userMap.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：传参时如果传对象会报错，如下：</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2023.41.57.png" style="zoom:50%">



<p>三：这个时候需要将接口的 Map 的 value 类型改为 Object，如下，即可正常接收，结果不展示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserMap&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserMap</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; userMap)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userMap.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="List-接收-Json"><a href="#List-接收-Json" class="headerlink" title="List 接收 Json"></a>List 接收 Json</h4><p>一：List 接收普通类型 Json 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserList&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserMap</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; userList)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userList.toArray().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：调用：注意，如果是 List 类型的数据， Json 要用中括号，结果展示略</p>
<p>三：用 List 接收对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserObject&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserObject</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        s += user.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四：结果：</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-11%2023.56.11.png" style="zoom:50%">







<h4 id="ResponseBody-响应"><a href="#ResponseBody-响应" class="headerlink" title="@ResponseBody 响应"></a>@ResponseBody 响应</h4><blockquote>
<ul>
<li>使用 @ResponseBody 注解可以将返回值包装成 Json 值来响应客户端</li>
<li>如果有一个 Controller 类里面的接口都是需要返回 Json 数据的，那么每一个接口都要加上 @ResponseBody 也是很冗余的，所以可以使用 @RestController 注解，里面的接口默认返回 Json 数据。其底层是通过组合 @Controller 和 @ResponseBody 两个注解而形成的</li>
</ul>
</blockquote>
<p><strong>普通 Controller 类</strong></p>
<p>一：接口实现，为了简便代码我改造了 User 类的 set 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserJson</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>().setName(<span class="string">&quot;erics&quot;</span>).setAge(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：postman 调用及结果</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-12%2021.53.42.png" style="zoom:50%">



<p><strong>RestController 类</strong></p>
<p>一：创建接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestControllerDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getRestUserJson&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>().setName(<span class="string">&quot;erics&quot;</span>).setAge(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：可以验证，@RestController 注解下的类默认返回 Json 数据（图略）</p>
<h3 id="HttpServletRequest-获取参数"><a href="#HttpServletRequest-获取参数" class="headerlink" title="HttpServletRequest 获取参数"></a>HttpServletRequest 获取参数</h3><blockquote>
<p>SpringMVC 是基于 Servlet 封装的，Servlet 底层有两个重要的对象：</p>
<ul>
<li>HttpServletRequest</li>
<li>HttpServletResponse</li>
</ul>
<p><strong>有三种方式可以获得请求的 HttpServletRequest 对象</strong></p>
<ul>
<li>直接在接口的参数中加 HttpServletRequest 参数，SpringMVC 自动将这次请求的请求对象封装进去</li>
<li>从 ThreadLocal 中获取本次请求的 HttpServletRequest（这种方式也是比较多使用的）</li>
<li>直接在类中将 HttpServletRequest 注入到 IOC 容器中(使用较少)</li>
</ul>
</blockquote>
<p><strong>方法一：使用 HttpServletRequest 参数来获取请求参数</strong></p>
<p>一：接口实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">demo1</span><span class="params">(HttpServletRequest httpServletRequest)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> httpServletRequest.getParameter(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;: &quot;</span> +httpServletRequest.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：调用及结果,特地多传了一个参数来观察结果</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-12%2022.12.45.png" style="zoom:50%">



<p><strong>方式二：通过 ThreadLocal 拿到请求</strong></p>
<p>一：接口实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">demo2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 ThreadLocal 拿到请求</span></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span></span><br><span class="line">            ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">    <span class="keyword">return</span> request.getParameter(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;: &quot;</span> + request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：结果（略），可以验证是正确的</p>
<p><strong>方式三：HttpServletRequest 注入到 IOC 容器中</strong></p>
<p>一：接口实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestControllerDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest httpServletRequest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> httpServletRequest.getParameter(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;: &quot;</span> + httpServletRequest.getParameter(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：验证结果（略），该方法不推荐</p>
<h2 id="Restful-接口"><a href="#Restful-接口" class="headerlink" title="Restful 接口"></a>Restful 接口</h2><h3 id="什么是-Restful-接口"><a href="#什么是-Restful-接口" class="headerlink" title="什么是 Restful 接口"></a>什么是 Restful 接口</h3><blockquote>
<p>Restful 就是一个资源定位和资源操作的风格，不是标准也不是协议，只是一种风格。</p>
<p>例如我们定义新增和删除接口时，会定义下面两个接口：</p>
<ul>
<li><a href="http://127.0.0.1/add">http://127.0.0.1/add</a></li>
<li><a href="http://127.0.0.1/delete">http://127.0.0.1/delete</a></li>
</ul>
<p>接口名是不一样的，但是 Restful 风格的接口名都是一样的，只是根据请求的不同来分辨是哪一个接口，例如：</p>
<ul>
<li><a href="http://127.0.0.1/user">http://127.0.0.1/user</a> (post) 请求类型是 post，就是新增接口</li>
<li><a href="http://127.0.0.1/user">http://127.0.0.1/user</a> (delete) 请求类型是 delete，就是删除接口</li>
</ul>
</blockquote>
<h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><blockquote>
<p>在 Controller 中定义增删改查四个接口，请求路径都相同（注意不是方法名，是请求路径），根据请求的类型不同来分辨走哪一个接口。</p>
</blockquote>
<p>一：接口定义 crud </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestfulControllerDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找用户，请求类型为 get，用 @PathVariable 注解从请求路径中拿到参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>().setName(<span class="string">&quot;erics&quot;</span>).setAge(<span class="number">20</span>).setId(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户，请求类型为 delete</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete id = &quot;</span> + id + <span class="string">&quot; user successed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增用户，请求类型为 post，请求的参数用 Json 封装，所以参数用 @RequestBody 修饰</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getName() + <span class="string">&quot;: &quot;</span> + user.getId() + <span class="string">&quot; add successed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改用户，请求类型为 put</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getName() + <span class="string">&quot;: &quot;</span> + user.getId() + <span class="string">&quot; update successed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：其中查找和删除方法的参数的发送是特殊的，不是在路径中通过 ? 再拼接 KV，而是直接将值放在参数中</p>
<p>查找调用：如下，注意参数的发送方式，删除类似<br>新增和更新的调用结果就不演示了，就是选择发送方式后通过 Json 发送即可</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-12%2022.59.58.png" style="zoom:50%">













<h2 id="SpringMVC-整合-Jsp"><a href="#SpringMVC-整合-Jsp" class="headerlink" title="SpringMVC 整合 Jsp"></a>SpringMVC 整合 Jsp</h2><blockquote>
<p>该技术已经过时，只做了解即可</p>
</blockquote>
<h2 id="SSM-框架整合"><a href="#SSM-框架整合" class="headerlink" title="SSM 框架整合"></a>SSM 框架整合</h2><blockquote>
<p>SpringMVC 整合 Spring 和 MyBatis </p>
</blockquote>
<p>一：正常创建新项目，选择 maven-app 后完成项目创建，引入依赖,具体作用不说了，应该都比较常见</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>二：src&#x2F;main 下创建 java</p>
<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><hr>
<h2 id="SpringBoot-概述"><a href="#SpringBoot-概述" class="headerlink" title="SpringBoot 概述"></a>SpringBoot 概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<ul>
<li>SpringBoot 是一个快速开发的框架, 封装了Maven常用依赖、能够快速的整合第三方框架</li>
<li>简化XML配置，全部采用注解形式，内置Tomcat、Jetty、Undertow，帮助开发者能够实现快速开发</li>
<li>SpringBoot的Web组件 默认集成的是SpringMVC框架</li>
<li>springboot 能帮我们快速开发的原理就是封装了很多 maven 依赖</li>
</ul>
</blockquote>
<h3 id="Boot-与-MVC-的区别"><a href="#Boot-与-MVC-的区别" class="headerlink" title="Boot 与 MVC 的区别"></a>Boot 与 MVC 的区别</h3><blockquote>
<p>SpringBoot 是一个快速开发的框架,能够快速的整合第三方框架，简化XML配置，全部采用注解形式，内置Tomcat容器,帮助开发者能够实现快速开发，SpringBoot的Web组件 默认集成的是SpringMVC框架。</p>
</blockquote>
<h3 id="Boot-与-Cloud-的区别"><a href="#Boot-与-Cloud-的区别" class="headerlink" title="Boot 与 Cloud 的区别"></a>Boot 与 Cloud 的区别</h3><blockquote>
<p>SpringBoot 是一个快速开发的框架,能够快速的整合第三方框架，简化XML配置，全部采用注解形式，内置Tomcat容器,帮助开发者能够实现快速开发，SpringBoot的Web组件 默认集成的是SpringMVC框架。</p>
<p>SpringMVC是控制层。</p>
<p>SpringCloud依赖与SpringBoot组件，使用SpringMVC编写Http协议接口，同时SpringCloud是一套完整的微服务解决框架。</p>
</blockquote>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><blockquote>
<ul>
<li><strong>spring-boot-starter-parent</strong> 的作用：<br>在pom.xml中引入spring-boot-start-parent,spring官方的解释叫stater poms,它可以提供dependency management,也就是说依赖管理，引入以后在申明其它dependency的时候就不需要version了，后面可以看到</li>
<li><strong>spring-boot-starter-web</strong> 的作用：<br>引入 springweb 的核心组件</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="启动方式-1"><a href="#启动方式-1" class="headerlink" title="启动方式 1"></a>启动方式 1</h3><blockquote>
<p>在 java 目录下创建一个 service 包，在其中创建一个类，类上加上 @EnableAutoConfiguration 注解<br>然后在 main 方法中调用 SpringApplication 的 run 方法即可运行</p>
<p>@EnableAutoConfiguration 的作用是将该类注入到 springmvc 容器中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// 注意这是 Springmvc 的注解不是 springboot 的</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSpringBootService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数传入启动类的入口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SpringApplication.run(HelloSpringBootService.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="启动方式-2"><a href="#启动方式-2" class="headerlink" title="启动方式 2"></a>启动方式 2</h3><blockquote>
<p>启动方式一种提到的 @EnableAutoConfiguration 的作用是注入到 mvc 容器中，那么在 service 包中的其他类是没办法扫描到的，所以需要添加扫包范围，这样 service 中的其他接口就能正常访问了</p>
</blockquote>
<p><strong>添加扫包范围</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// 注意这是 Springmvc 的注解不是 springboot 的</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.erics.service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSpringBootService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数传入启动类的入口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SpringApplication.run(HelloSpringBootService.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写新 service 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getMember&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;member&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="启动方式-3"><a href="#启动方式-3" class="headerlink" title="启动方式 3"></a>启动方式 3</h3><blockquote>
<p>单独创建一个启动类，使用注解 @SpringBootApplication</p>
<p>注意：</p>
<ul>
<li>加上 @SpringBootApplication 的类不可以直接放在 java 根目录下</li>
<li>该类的扫包范围：当前启动类包或者子包下面</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(App.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="web-开发"><a href="#web-开发" class="headerlink" title="web 开发"></a>web 开发</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><blockquote>
<p>在我们开发Web应用的时候，需要引用大量的js、css、图片等静态资源。</p>
<p><strong>默认配置</strong></p>
<ul>
<li>Spring Boot默认提供静态资源目录位置需置于classpath下，目录名需符合如下规则：<ul>
<li>&#x2F;static</li>
<li>&#x2F;public</li>
<li>&#x2F;resources	</li>
<li>&#x2F;META-INF&#x2F;resources</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="yml-与-properties"><a href="#yml-与-properties" class="headerlink" title="yml 与 properties"></a>yml 与 properties</h3><blockquote>
<p>SpringBoot支持两种配置方式,一种是properties文件,一种是yml</p>
<p>使用yml可以减少配置文件的重复性。</p>
<p>现在主要推荐使用 yml 的配置方式，springboot 默认读取 application 文件名的配置文件<br>而且 Spring 提供了 @Value 注解，可以获取配置文件中的值</p>
</blockquote>
<p><strong>application.properties 的配置</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">erics.age</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">erics.address</span>=<span class="string">shanghai</span></span><br></pre></td></tr></table></figure>



<p><strong>application.yml 配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">erics:</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">shanghai</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件的参数调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;erics.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;erics.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;erics: &quot;</span> + age + <span class="string">&quot; from &quot;</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="渲染-web-页面"><a href="#渲染-web-页面" class="headerlink" title="渲染 web 页面"></a>渲染 web 页面</h3><blockquote>
<p>模版引擎：能够帮助 seo 搜索到页面</p>
<p>SpringBoot 提供了默认配置的模版引擎主要有以下几种</p>
<ul>
<li>Thymeleaf</li>
<li>Freemarker</li>
<li>Velocity</li>
<li>Groovy</li>
<li>Mustache</li>
</ul>
</blockquote>
<h3 id="整合-freemarker"><a href="#整合-freemarker" class="headerlink" title="整合 freemarker"></a>整合 freemarker</h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="编写-controller-类"><a href="#编写-controller-类" class="headerlink" title="编写 controller 类"></a>编写 controller 类</h4><blockquote>
<p>由于引入 freemarker 是前后端不分离的项目，所以需要新建 controller 层，创建 demo 类，在类上加 @Controller 注解，然后</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMarkerIndexController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;freemarkerIndex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">freemarkerIndex</span><span class="params">(Map&lt;String, String&gt; result)</span> &#123;</span><br><span class="line">        result.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;erics&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;freemarkerIndex&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="编写静态页面"><a href="#编写静态页面" class="headerlink" title="编写静态页面"></a>编写静态页面</h4><blockquote>
<p>controller 接口中返回的就是静态页面的地址，所以我们在 resources 目录下新建 templates 目录，并创建一个和接口返回地址同名的 ftl 同名文件，在页面中通过 ${} 的形式拿到接口返回的值</p>
<p>接口返回的值类似于 HttpRequest.setAttribute 方式传入的</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: cadetblue&quot;</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h4 id="ftl-其他用法"><a href="#ftl-其他用法" class="headerlink" title="ftl 其他用法"></a>ftl 其他用法</h4><blockquote>
<p>简单展示一下 freemarker 的 if 和迭代集合的用法</p>
</blockquote>
<p><strong>controller 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/foods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFoods</span><span class="params">(Map&lt;String, Object&gt; result)</span> &#123;</span><br><span class="line">    result.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;erics&quot;</span>);</span><br><span class="line">    result.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    result.put(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    List&lt;String&gt; foodsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    foodsList.add(<span class="string">&quot;milk&quot;</span>);</span><br><span class="line">    foodsList.add(<span class="string">&quot;eggs&quot;</span>);</span><br><span class="line">    foodsList.add(<span class="string">&quot;beef&quot;</span>);</span><br><span class="line">    result.put(<span class="string">&quot;foods&quot;</span>, foodsList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;freemarkerIndex&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>ftl 文件</strong><br>注意：<br>1 用符号代替: &gt; gt , &gt;&#x3D;  gte  ,&lt; lt  , &lt;&#x3D; lte<br>2 加括号 &lt;#if(x&gt;y)&gt;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size: large; color: cadetblue&quot;</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&lt;#if sex == &quot;0&quot;&gt;</span><br><span class="line">    男</span><br><span class="line">    &lt;#elseif sex == &quot;1&quot;&gt;</span><br><span class="line">    女</span><br><span class="line">&lt;#else &gt;</span><br><span class="line">    其他</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">&lt;#if age gte 18&gt;</span><br><span class="line">    成年</span><br><span class="line">    &lt;#else&gt;</span><br><span class="line">    未成年</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">&lt;#list foods as food&gt;</span><br><span class="line">    $&#123;food&#125;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>









<h2 id="数据库访问"><a href="#数据库访问" class="headerlink" title="数据库访问"></a>数据库访问</h2><h3 id="整合-jdbcTmeplate"><a href="#整合-jdbcTmeplate" class="headerlink" title="整合 jdbcTmeplate"></a>整合 jdbcTmeplate</h3><h4 id="引入-pom-文件"><a href="#引入-pom-文件" class="headerlink" title="引入 pom 文件"></a>引入 pom 文件</h4><p>注意：mysql-connector-java 的依赖要取决于我们的 mysql 版本，我的版本是 6，一开始引入的数据库连接依赖是 5，就一直报以下错误：java.sql.SQLException%3A+java.lang.ClassCastException%3A+java.math.BigInteger+cannot+be+cast+to+java.lang.Long&amp;src&#x3D;pclm&amp;ls&#x3D;safarimac</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="Application-yml-新增配置"><a href="#Application-yml-新增配置" class="headerlink" title="Application.yml 新增配置"></a>Application.yml 新增配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>



<h4 id="业务编写"><a href="#业务编写" class="headerlink" title="业务编写"></a>业务编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    Boolean <span class="title function_">insertUser</span><span class="params">(String name, <span class="type">int</span> age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">insertUser</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> jdbcTemplate.update(<span class="string">&quot;insert into users values(NULL,?,?);&quot;</span>, name, age);</span><br><span class="line">        <span class="keyword">return</span> i &gt; <span class="number">0</span> ? <span class="literal">true</span>  :<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="数据库业务表"><a href="#数据库业务表" class="headerlink" title="数据库业务表"></a>数据库业务表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>







<h3 id="整合-mybatis"><a href="#整合-mybatis" class="headerlink" title="整合 mybatis"></a>整合 mybatis</h3><h4 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="Application-yml-配置"><a href="#Application-yml-配置" class="headerlink" title="Application.yml 配置"></a>Application.yml 配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>



<h4 id="mapper-编写"><a href="#mapper-编写" class="headerlink" title="mapper 编写"></a>mapper 编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM USERS WHERE NAME = #&#123;name&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findByName</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO USERS(NAME, AGE) VALUES(#&#123;name&#125;, #&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="启动方式-mapper扫描"><a href="#启动方式-mapper扫描" class="headerlink" title="启动方式-mapper扫描"></a>启动方式-mapper扫描</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.erics.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(App.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;insertUser2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">insertUser2</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.insert(user.getName(), user.getAge());</span><br><span class="line">    <span class="keyword">return</span> i &gt; <span class="number">0</span> ? <span class="string">&quot;successed&quot;</span> : <span class="string">&quot;false&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="整合多数据源"><a href="#整合多数据源" class="headerlink" title="整合多数据源"></a>整合多数据源</h3><h4 id="数据库表创建"><a href="#数据库表创建" class="headerlink" title="数据库表创建"></a>数据库表创建</h4><blockquote>
<p>由于是多数据源，所以这里创建两个数据库<br>一个是 my_user 库里面建立一张 User 表<br>一个是 my_order 库里面建立一张 Order 表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_number` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `order_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>





<h4 id="引入依赖-3"><a href="#引入依赖-3" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="application-yml-配置"><a href="#application-yml-配置" class="headerlink" title="application.yml 配置"></a>application.yml 配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/my_user</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">order:</span></span><br><span class="line">    <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/my_order</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>



<h4 id="数据源相关配置"><a href="#数据源相关配置" class="headerlink" title="数据源相关配置"></a>数据源相关配置</h4><p><strong>user 数据源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.erics.user.mapper&quot;, sqlSessionFactoryRef = &quot;userSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDataSourceConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将userdb注册到容器中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">userDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将会员userSqlSessionFactory注册到容器中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userSqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">userSqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;userDataSource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(userDataSource());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建会员管理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userTransactionManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">userTransactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userDataSource&quot;)</span> DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单sqlSesion模版</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlSessionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userSqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">menberSqlSessionTemplate</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Qualifier(&quot;userSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>order 数据源配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.erics.order.mapper&quot;, sqlSessionFactoryRef = &quot;orderSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将订单db注册到容器中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;orderDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.order&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">orderDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将订单SqlSessionFactory注册到容器中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;orderSqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">orderSqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;orderDataSource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(orderDataSource());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单管理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;orderTransactionManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">orderTransactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;orderDataSource&quot;)</span> DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单sqlSesion模版</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlSessionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;orderSqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">menberSqlSessionTemplate</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Qualifier(&quot;orderSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="创建分包-mapper"><a href="#创建分包-mapper" class="headerlink" title="创建分包 mapper"></a>创建分包 mapper</h4><blockquote>
<p>分别建立 user.mapper 和 order.mapper 包，并写好两个 mapper 文件</p>
</blockquote>
<p><strong>userMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into users values(null,#&#123;name&#125;,#&#123;age&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>orderMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Insert(&quot;insert into order_number values(null,#&#123;number&#125;);&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">inserOrder</span><span class="params">(<span class="meta">@Param(&quot;number&quot;)</span> String number)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="启动及调用"><a href="#启动及调用" class="headerlink" title="启动及调用"></a>启动及调用</h4><blockquote>
<p>启动类和正常一样，调用如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDataSourceController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/two/insertUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">addUser</span> <span class="operator">=</span> userMapper.addUser(user.getName(), user.getAge());</span><br><span class="line">        <span class="keyword">return</span> addUser &gt; <span class="number">0</span> ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/two/insertOrder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">insertUser</span><span class="params">(String number)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inserOrder</span> <span class="operator">=</span> orderMapper.inserOrder(number);</span><br><span class="line">        <span class="keyword">return</span> inserOrder &gt; <span class="number">0</span> ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h2 id="开发工具整合"><a href="#开发工具整合" class="headerlink" title="开发工具整合"></a>开发工具整合</h2><h3 id="整合热部署"><a href="#整合热部署" class="headerlink" title="整合热部署"></a>整合热部署</h3><blockquote>
<ul>
<li>什么是热部署：修改 java 类或静态文件不需要再重启项目</li>
<li>原理：类加载器</li>
<li>但是只适合本地开发</li>
</ul>
</blockquote>
<h4 id="引入依赖-4"><a href="#引入依赖-4" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="idea-配置-mac"><a href="#idea-配置-mac" class="headerlink" title="idea 配置(mac)"></a>idea 配置(mac)</h4><p>首先打开 preferences：导航栏找到 compiler，勾选如下信息</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-14%2022.35.34.png" style="zoom:40%">

<p>然后通过快捷键：shift + command + option + &#x2F;，打开 registry，选中如下信息即可配置完成</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-14%2022.38.01.png" style="zoom:40%">









<h3 id="整合-lombok"><a href="#整合-lombok" class="headerlink" title="整合 lombok"></a>整合 lombok</h3><blockquote>
<p>简化开发：实体类自动生成get set 方法</p>
<p>原理：开发时不需要写 get 和 set 等方法，但是在编译的时候会自动生成这些方法放到class文件中</p>
</blockquote>
<h4 id="idea-安装-lombok-插件"><a href="#idea-安装-lombok-插件" class="headerlink" title="idea 安装 lombok 插件"></a>idea 安装 lombok 插件</h4><p>略</p>
<h4 id="引入依赖-5"><a href="#引入依赖-5" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote>
<ul>
<li>在实体类直接加上 @Data 注解可以自动生成 get set 等方法</li>
<li>@slf4j 可以自动获得一个 log 对象</li>
</ul>
</blockquote>
<h3 id="整合定时任务"><a href="#整合定时任务" class="headerlink" title="整合定时任务"></a>整合定时任务</h3><h4 id="Schedual"><a href="#Schedual" class="headerlink" title="@Schedual"></a>@Schedual</h4><blockquote>
<p>该注解是 springboot 提供的定时任务注解，小的项目可以使用，大的不可以，因为它不支持集群</p>
</blockquote>
<p><strong>一：创建一个定时任务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedualTaskDemo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3 秒执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 3000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskService</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&lt;&lt;定时任务执行&gt;&gt;: &quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二：启动类加上 @EnableScheduling 注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">app</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(app.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Quartz-表达式"><a href="#Quartz-表达式" class="headerlink" title="Quartz 表达式"></a>Quartz 表达式</h4><blockquote>
<p>在配置定时任务的时间的时候有时候需要配置一些比较复杂的需求，这时候需要使用 Quartz 表达式，这个表达式也不需要我们自己写，可以去下面的网站获取：</p>
<p><a href="https://www.bejson.com/othertools/cron/">https://www.bejson.com/othertools/cron/</a></p>
<p>然后在 @Schedual 注解通过 cron 属性配置即可,如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;1/2 * * * * ?&quot;)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="使用-Async-实现异步"><a href="#使用-Async-实现异步" class="headerlink" title="使用 @Async 实现异步"></a>使用 @Async 实现异步</h3><blockquote>
<p>@Async 就是用多线程封装的，就是额外开一个线程去执行方法，所以有可能会非常消耗 cpu 资源，所以大的项目建议使用 mq 异步实现。</p>
<p>这里使用的案例如下：假设现在的客户端向服务端发送请求进行用户注册，服务端需要执行一次数据库操作（这里用 log 操作模拟）用时一秒，然后再向客户发送短信（也用 log 模拟）用时三秒，理论上客户在 4 秒后才会收到服务端的响应，但是如果我们将发短信的方法异步执行，那么客户一秒就可以接受到响应。</p>
</blockquote>
<h4 id="用户注册短信发送模拟"><a href="#用户注册短信发送模拟" class="headerlink" title="用户注册短信发送模拟"></a>用户注册短信发送模拟</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncControllerDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟数据库操作</span></span><br><span class="line">        log.info(<span class="string">&quot;&gt;01&lt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用发短信方法</span></span><br><span class="line">        sendMessage();</span><br><span class="line">        log.info(<span class="string">&quot;&gt;04&lt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&gt;02&lt;&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;正在发送短信...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;&gt;03&lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="使用-Thread-重写方法"><a href="#使用-Thread-重写方法" class="headerlink" title="使用 Thread 重写方法"></a>使用 Thread 重写方法</h4><p>重写了 addMessage 方法，让另一个线程去执行 sendMessage 方法，但是springboot 提供了 @Async 注解，我们可以不用这么麻烦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">addMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟数据库操作</span></span><br><span class="line">    log.info(<span class="string">&quot;&gt;01&lt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用发短信方法</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            sendMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    log.info(<span class="string">&quot;&gt;04&lt;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Async-失效问题"><a href="#Async-失效问题" class="headerlink" title="@Async 失效问题"></a>@Async 失效问题</h4><blockquote>
<p>注意：如果异步注解写当前自己类，有可能aop会失效，无法拦截注解，最终导致异步注解失效，需要经过代理类调用接口；</p>
<p>所以需要将异步的代码单独抽取成一个类调用接口。</p>
</blockquote>
<p><strong>无效做法</strong></p>
<p>一：在短信发送的方法上加上异步注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;02&lt;&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;正在发送短信...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;&gt;03&lt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：在 app 启动类上加上 @EnableAsync 注解</p>
<p>三：启动后发现异步失效，仍然是单线程在执行</p>
<p><strong>有效做法</strong></p>
<p>一：创建 async 包，里面创建一个 MemberServiceAnync 类，将短信发送方法放进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncControllerDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberServiceAsync memberServiceAsync;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟数据库操作</span></span><br><span class="line">        log.info(<span class="string">&quot;&gt;01&lt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用发短信方法</span></span><br><span class="line">        memberServiceAsync.sendMessage();</span><br><span class="line">        log.info(<span class="string">&quot;&gt;04&lt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：调用，发现异步调用成功，但是这还是有问题的，因为 Async 注解本质还是 new Thread 去执行方法，而我们是不推荐这么去操作线程的，推荐使用线程池</p>
<h4 id="Async-整合线程池"><a href="#Async-整合线程池" class="headerlink" title="@Async 整合线程池"></a>@Async 整合线程池</h4><blockquote>
<p>在刚刚的例子中，我们仅仅只是在方法上加上 @Async 然后去调用，这是有很大风险的，假设现在有1000 个用户同时注册，那么意味着后台会创建 1000 个新线程，很容易崩溃，所以推荐使用线程池去重复利用。</p>
</blockquote>
<p><strong>一：引入线程池配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每秒需要多少个线程处理?</span></span><br><span class="line"><span class="comment">     * tasks/(1/taskcost)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池维护线程的最大数量</span></span><br><span class="line"><span class="comment">     * (max(tasks)- queueCapacity)/(1/taskcost)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxPoolSize</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存队列</span></span><br><span class="line"><span class="comment">     * (coreSizePool/taskcost)*responsetime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">queueCapacity</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许的空闲时间</span></span><br><span class="line"><span class="comment">     * 默认为60</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">keepAlive</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TaskExecutor <span class="title function_">taskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">// 设置核心线程数</span></span><br><span class="line">        executor.setCorePoolSize(corePoolSize);</span><br><span class="line">        <span class="comment">// 设置最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(maxPoolSize);</span><br><span class="line">        <span class="comment">// 设置队列容量</span></span><br><span class="line">        executor.setQueueCapacity(queueCapacity);</span><br><span class="line">        <span class="comment">// 设置允许的空闲时间（秒）</span></span><br><span class="line">        <span class="comment">//executor.setKeepAliveSeconds(keepAlive);</span></span><br><span class="line">        <span class="comment">// 设置默认线程名称</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;thread-&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置拒绝策略rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">// 等待所有任务结束后再关闭线程池</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二：在短信发送方法上指定线程池名称即可</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async(&quot;taskExecutor&quot;)</span></span><br></pre></td></tr></table></figure>









<h3 id="全局捕获异常"><a href="#全局捕获异常" class="headerlink" title="全局捕获异常"></a>全局捕获异常</h3><blockquote>
<p>@ExceptionHandler 表示拦截异常</p>
<p>@ControllerAdvice 是 controller 的一个辅助类，最常用的就是作为全局异常处理的切面类</p>
<p>@ControllerAdvice 可以指定扫描范围</p>
<p>@ControllerAdvice 约定了几种可行的返回值，如果是直接返回 model 类的话，需要使用 @ResponseBody 进行 json 转换</p>
<ul>
<li>返回 String，表示跳到某个 view</li>
<li>返回 modelAndView</li>
<li>返回 model + @ResponseBody</li>
</ul>
</blockquote>
<p><strong>创建一个捕获异常类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截运行异常出现的错误~~~</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">exceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;500&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;系统出现错误~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="整合日志框架"><a href="#整合日志框架" class="headerlink" title="整合日志框架"></a>整合日志框架</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><blockquote>
<ul>
<li>ALL 最低等级的，用于打开所有日志记录。</li>
<li>TRACE designates finer-grained informational events than the DEBUG.Since:1.2.12，很低的日志级别，一般不会使用。</li>
<li><em><strong>*DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。*</strong></em></li>
<li><em>*INFO 消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。*</em>**</li>
<li>WARN 表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示</li>
<li><em><strong>*ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。*</strong></em></li>
<li>FATAL 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。</li>
<li>OFF 最高等级的，用于关闭所有日志记录。</li>
</ul>
</blockquote>
<h3 id="整合-logback"><a href="#整合-logback" class="headerlink" title="整合 logback"></a>整合 logback</h3><blockquote>
<p>springboot 默认整合了 logback，日志输出的路径在当前项目的 log 目录下</p>
<p>并且由于已经默认整合了，所以不用引入单独的依赖，<strong>只需要引进 lombok 即可</strong></p>
</blockquote>
<h4 id="引入-lombok-依赖-略"><a href="#引入-lombok-依赖-略" class="headerlink" title="引入 lombok 依赖 略"></a>引入 lombok 依赖 略</h4><h4 id="配置-xml"><a href="#配置-xml" class="headerlink" title="配置 xml"></a>配置 xml</h4><p>在  resources 目录下新建一个 log 目录，然后创建一个 logback.xml 的文件，并添加以下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--本文主要输出日志为控制台日志，系统日志，sql日志，异常日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p (%file:%line\)- %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--系统info级别日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;File&gt; 日志目录，没有会自动创建--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;rollingPolicy&gt;日志策略，每天简历一个日志文件，或者当天日志文件超过64MB时--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--encoder 日志编码及输出格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;fileLog&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>log/file/fileLog.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/file/fileLog.log.%d.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- or whenever the file size reaches 64 MB --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>64 MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;sqlFile&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>log/sql/sqlFile.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/sql/sqlFile.log.%d.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- or whenever the file size reaches 64 MB --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>64 MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--用来设置日志的输入格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--异常日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;errorFile&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>log/error/errorFile.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/error/errorFile.%d.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- or whenever the file size reaches 64 MB --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>64 MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--用来设置日志的输入格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            日志都在这里 过滤出 error</span></span><br><span class="line"><span class="comment">            使用 try &#123;&#125;catch (Exception e)&#123;&#125; 的话异常无法写入日志，可以在catch里用logger.error()方法手动写入日志</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  日志输出级别 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--All\DEBUG\INFO\WARN\ERROR\FATAL\OFF--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打印info级别日志，分别在控制台，fileLog，errorFile输出</span></span><br><span class="line"><span class="comment">        异常日志在上面由过滤器过滤出ERROR日志打印</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileLog&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;errorFile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--打印sql至sqlFile文件日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.dolphin.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;sqlFile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="application-yml-配置-1"><a href="#application-yml-配置-1" class="headerlink" title="application.yml 配置"></a>application.yml 配置</h4><blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  	<span class="attr">config:</span> <span class="string">classpath:log/logback.xml</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Service-调用"><a href="#Service-调用" class="headerlink" title="Service 调用"></a>Service 调用</h4><p><strong>在调用的类上加上 @slf4j 注解</strong>, 在项目目录下会出现一个 log 目录，里面有 error、file、sql 三级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetProperties</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserConfig userConfig;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getPros&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserConfig <span class="title function_">getPros</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(userConfig.toString());</span><br><span class="line">        <span class="keyword">return</span> userConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="整合-log4j"><a href="#整合-log4j" class="headerlink" title="整合 log4j"></a>整合 log4j</h3><h3 id="使用-aop-统一打印日志"><a href="#使用-aop-统一打印日志" class="headerlink" title="使用 aop 统一打印日志"></a>使用 aop 统一打印日志</h3><blockquote>
<p>基于 aop 实现或者 elk</p>
<p>在方法前后实现拦截，减少打印日志代码的冗余性问题</p>
</blockquote>
<h4 id="引入依赖-6"><a href="#引入依赖-6" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

















<h2 id="整合配置文件"><a href="#整合配置文件" class="headerlink" title="整合配置文件"></a>整合配置文件</h2><blockquote>
<p>在springboot整合配置文件，分成两大类：</p>
<ul>
<li>application.properties 和 application.yml</li>
<li>Bootstrap.properties 和 Bootstrap.yml</li>
</ul>
<p><strong>加载顺序：</strong></p>
<ul>
<li>bootstrap.yml 先加载 application.yml后加载</li>
<li>bootstrap.yml 用于应用程序上下文的引导阶段</li>
<li>bootstrap.yml 由父Spring ApplicationContext加载</li>
</ul>
<p><strong>区别：</strong></p>
<ul>
<li>bootstrap.yml 和 application.yml 都可以用来配置参数。</li>
<li>bootstrap.yml 用来程序引导时执行，应用于更加早期配置信息读取。可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。一旦bootStrap.yml 被加载，则内容不会被覆盖。</li>
<li>application.yml 可以用来定义应用级别的， 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。</li>
</ul>
</blockquote>
<h4 id="Value-注解读取配置文件"><a href="#Value-注解读取配置文件" class="headerlink" title="@Value 注解读取配置文件"></a>@Value 注解读取配置文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getPro&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPro</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;: &quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="properties-转换成-yml"><a href="#properties-转换成-yml" class="headerlink" title="properties 转换成 yml"></a>properties 转换成 yml</h4><blockquote>
<p>Properties在线转换yml格式网址：<a href="https://www.toyaml.com/index.html">https://www.toyaml.com/index.html</a></p>
</blockquote>
<h4 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h4><p><strong>一：引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>二：配置文件编写</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">erics</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">shanghai</span></span><br></pre></td></tr></table></figure>

<p><strong>三：实体类接收</strong></p>
<p>在 @ConfigurationProperties 注解上面一定要加上 @Component 注解，否则会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>四：使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetProperties</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserConfig userConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getPros&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserConfig <span class="title function_">getPros</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h4><blockquote>
<p>在SpringBoot的配置文件中，我们可以使用SpringBoot提供的的一些随机数</p>
<p>${random.value}、${random.int}、${random.long}</p>
<p>${random.int(10)}、${random.int[1024,65536]}</p>
<p>-${app.name:默认值} 来指定找不到属性时的默认值</p>
</blockquote>
<h4 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h4><blockquote>
<p>假设现在有三个环境：</p>
<ul>
<li>application-test</li>
<li>application-dev</li>
<li>application-prd</li>
</ul>
<p>然后再 application.yml 中通过以下方式指定：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h4><blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="comment">#  设置端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line"><span class="comment">#    设置项目的访问路径,设置了访问路径后在方法之前需要加上这个才行,默认是 /，没有名称的</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/erics</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><blockquote>
<p>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。(百度百科)</p>
</blockquote>
<h2 id="认证模式"><a href="#认证模式" class="headerlink" title="认证模式"></a>认证模式</h2><h3 id="Basic-认证"><a href="#Basic-认证" class="headerlink" title="Basic 认证"></a>Basic 认证</h3><blockquote>
<p>Basic认证是一种较为简单的HTTP认证方式，客户端通过明文（Base64编码格式）传输用户名和密码到服务端进行认证，通常需要配合HTTPS来保证信息传输的安全。</p>
<p>Basic认证不需要自己实现登陆页面，比如登陆 svn 的时候浏览器右上角弹出的那个登陆页，就是典型的 Basic 认证</p>
</blockquote>
<p><strong>搭建一个简单的基于 Basic 认证的 框架</strong></p>
<p>1：引入基础的 SpringBoot 和 SpringSecurity 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2: 编写基础的启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(App.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3: 编写简单的 Service 层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addMember&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addMember&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delMember&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delMember&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateMember&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateMember&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showMember&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;showMember&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4: 编写Basic权限配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigBasic</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="comment">// 这里配置密码</span></span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;admin&quot;</span>).authorities(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/**&quot;</span>).fullyAuthenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行效果如下：</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-05%2022.30.30.png" style="zoom: 40%">



<p>但是在输入用户名和密码时会出现如下错误：<br>There is no PasswordEncoder mapped for the id “null”</p>
<p>这说明没有配置对应的密码解码器</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-05%2022.32.18.png">

<p>我们需要在 SecurityConfigBasic 添加如下方法来配置文件下配置<br>这个方法会显示不推荐，但是这确实是可以解决问题的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NoOpPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (NoOpPasswordEncoder) NoOpPasswordEncoder.getInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在即可访问我们的接口了<br>其原理大致是服务器会返回一个 sessionid，以后每次访问都会携带一个 sessionid 来验证权限，这算是比较过时的方式了</p>
<p>我们还可以设置成 form 表单形式，只需要改一行代码，将 config 类中的 configure 方法的 basic（）改为 form（）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      http.authorizeRequests().antMatchers(<span class="string">&quot;/**&quot;</span>).fullyAuthenticated().and().formLogin();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>当我们访问接口时，就会自动跳到 login 页面，如下：</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-05%2022.44.09.png" style="zoom:50%">







<h3 id="配置权限策略"><a href="#配置权限策略" class="headerlink" title="配置权限策略"></a>配置权限策略</h3><blockquote>
<p>admin 用用户可以访问所有接口<br>user_add 只能访问 add 接口<br>user_del 只能访问 del 接口</p>
</blockquote>
<p>基于 Security 框架主要实现思路是这样的，现给每一个接口都设置权限，方式是配置一个权限关键字<br>比如给 &#x2F;addMember 接口配置一个关键字：addMember，我们再给某一个账号配置一个对应的关键字即可，这样登陆的时候就可以根据账号所对应的关键字来判断有没有接口权限</p>
<p>配好权限的 config 类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigForm</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 给账户授权关键字，即可以访问到哪些接口</span></span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .authorities(<span class="string">&quot;addMember&quot;</span>, <span class="string">&quot;delMember&quot;</span>, <span class="string">&quot;updateMember&quot;</span>, <span class="string">&quot;showMember&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;user_add&quot;</span>).password(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .authorities(<span class="string">&quot;addMember&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;user_del&quot;</span>).password(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .authorities(<span class="string">&quot;delMember&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;user_update&quot;</span>).password(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .authorities(<span class="string">&quot;updateMember&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 给每一个接口配置一个权限关键字</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/delMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;delMember&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/addMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;addMember&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/updateMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;updateMember&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/showMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;showMember&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>).fullyAuthenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NoOpPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (NoOpPasswordEncoder) NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="配置权限不足页面"><a href="#配置权限不足页面" class="headerlink" title="配置权限不足页面"></a>配置权限不足页面</h3><blockquote>
<p>思路比较简单，编写一个服务器错误拦截器，里面给一些常见错误返回一个统一的 controller 的路径，然后再将统一返回错误的 controller 写好就行</p>
</blockquote>
<p><strong>configure 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServerAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConfigurableServletWebServerFactory <span class="title function_">webServerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">        <span class="type">ErrorPage</span> <span class="variable">errorPage400</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.BAD_REQUEST, <span class="string">&quot;/error/400&quot;</span>);</span><br><span class="line">        <span class="type">ErrorPage</span> <span class="variable">errorPage401</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.UNAUTHORIZED, <span class="string">&quot;/error/401&quot;</span>);</span><br><span class="line">        <span class="type">ErrorPage</span> <span class="variable">errorPage403</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.FORBIDDEN, <span class="string">&quot;/error/403&quot;</span>);</span><br><span class="line">        <span class="type">ErrorPage</span> <span class="variable">errorPage404</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.NOT_FOUND, <span class="string">&quot;/error/404&quot;</span>);</span><br><span class="line">        <span class="type">ErrorPage</span> <span class="variable">errorPage415</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.UNSUPPORTED_MEDIA_TYPE, <span class="string">&quot;/error/415&quot;</span>);</span><br><span class="line">        <span class="type">ErrorPage</span> <span class="variable">errorPage500</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">&quot;/error/500&quot;</span>);</span><br><span class="line">        factory.addErrorPages(errorPage400, errorPage401, </span><br><span class="line">                              errorPage403, errorPage404, errorPage415, errorPage500);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>controller</strong></p>
<p>路径要和 configure 类对应上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error/403&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;您当前访问的接口权限不足!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="配置自己的登陆页面"><a href="#配置自己的登陆页面" class="headerlink" title="配置自己的登陆页面"></a>配置自己的登陆页面</h3><blockquote>
<p>为了方便，就不前后端分离了，直接引入 freemarker 即可</p>
</blockquote>
<p>1: pom 引入freemarker 依赖，前面的文章已经有代码了</p>
<p>2: application 文件配置freemarker</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">classic_compatible:</span> <span class="literal">true</span> <span class="comment">#处理空值</span></span><br><span class="line">      <span class="attr">datetime_format:</span> <span class="string">yyy-MM-dd</span> <span class="string">HH:mm</span></span><br><span class="line">      <span class="attr">number_format:</span> <span class="number">0</span><span class="string">.##</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span></span><br><span class="line">    <span class="attr">template-loader-path:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure>

<p>3: 编写登陆页面（简陋版本）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;权限控制系统&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;用户名称&lt;/span&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">    &lt;span&gt;用户密码&lt;/span&gt;&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登陆&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;#<span class="keyword">if</span> RequestParameters[<span class="string">&#x27;error&#x27;</span>]??&gt;</span><br><span class="line">    用户名称或者密码错误</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>4: 编写 controller 类来完成返回登陆页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5: 将 login 页面配置到 配置类的 configure 方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/delMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;delMember&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/addMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;addMember&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/updateMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;updateMember&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/showMember&quot;</span>).hasAnyAuthority(<span class="string">&quot;showMember&quot;</span>)</span><br><span class="line">                <span class="comment">// 配置使用自定义的login页面</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// 如果使用自定义的login页面，就只能使用 formLogin 不能使用 basic</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>).fullyAuthenticated().and().formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login&quot;</span>).and().csrf().disable();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



















<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><blockquote>
<p><strong>JWT(Json Web Token)</strong></p>
<p>JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
</blockquote>
<h3 id="Session-和-Token"><a href="#Session-和-Token" class="headerlink" title="Session 和 Token"></a>Session 和 Token</h3><blockquote>
<ol>
<li>Session 存放在服务器– SessionId<ul>
<li>最大的缺点是集群无法共享</li>
</ul>
</li>
<li>Token + Redis<ul>
<li>Token 就类似于 Session 的 id</li>
<li>Token 一般依赖于 Redis 上存放的 value 值</li>
<li>缺点就是每次都需要根据 Token 查询到真实的内容，对服务器端压力大</li>
</ul>
</li>
</ol>
</blockquote>
<p>**传统Token **</p>
<blockquote>
<p>传统的Token，例如：用户登录成功生成对应的令牌，key为令牌 value：userid，隐藏了数据真实性 ,同时将该token存放到redis中，返回对应的真实令牌给客户端存放。</p>
<p>客户端每次访问后端请求的时候，会传递该token在请求中，服务器端接收到该token之后，从redis中查询如果存在的情况下，则说明在有效期内，如果在Redis中不存在的情况下，则说明过期或者token错误。</p>
</blockquote>
<h3 id="jwt-底层组成部分"><a href="#jwt-底层组成部分" class="headerlink" title="jwt 底层组成部分"></a>jwt 底层组成部分</h3><blockquote>
<ol>
<li><p>HEADER：头部<br>描述 jwt 加密方式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>PAYLOAD：装载的数据<br>Payload 中不能存放敏感信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;iat&quot;</span>: <span class="number">1516239022</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>VERIFY SIGNATURE：验证签名<br>防止别人篡改 payload 中的数据</p>
</li>
</ol>
<p><strong>其中，header 和 payload 是 Base 64 做的一个编码，随便找一个在线 Base64 解码器都可以解码成功，而 signature 签名是基于 md5 加密算法</strong></p>
</blockquote>
<blockquote>
<p><strong>Token 和 jwt 的区别</strong></p>
<p>token 依赖于 Redis 查询数据信息，token 存放 value 数据比较安全（存放于 redis 中），jwt 不需要依赖于服务器端，直接将数据信息存放在客户端（浏览器）</p>
</blockquote>
<blockquote>
<p><strong>Base64</strong></p>
<p>Base 64 不是加密和解密，主要是解码和编码，基于 64 个可打印字符来表示二进制数据</p>
</blockquote>
<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h2><h2 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h2><blockquote>
<p>为什么要用服务治理：就以刚刚我们写的天气接口为例，我们借助 httpClient 进行 rpc 调用，地址是写死在了代码中，如果调用的接口换了一个服务器，或者说，是集群的形式，总不能一直该代码吧。<br>所以会引入一个注册中心，生产者会提供自己的可用 url 给注册中心，消费者从注册中心拿到 url 后会进本地 rpc 调用（图）</p>
</blockquote>
<h3 id="没有服务注册中心的-rpc"><a href="#没有服务注册中心的-rpc" class="headerlink" title="没有服务注册中心的 rpc"></a>没有服务注册中心的 rpc</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>端口 8080</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getMember&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;会员服务接口调用成功...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="http-工具封装"><a href="#http-工具封装" class="headerlink" title="http 工具封装"></a>http 工具封装</h4><p><strong>需要引入依赖</strong><br>一般在父工程中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CloseableHttpClient httpClient;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHARSET</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(HttpClientUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 采用静态代码块，初始化超时时间配置，再根据配置生成默认httpClient对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">RequestConfig</span> <span class="variable">config</span> <span class="operator">=</span> RequestConfig.custom().setConnectTimeout(<span class="number">60000</span>).setSocketTimeout(<span class="number">15000</span>).build();</span><br><span class="line">        httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url, params, CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> doPost(url, params, CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HTTP Get 获取内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     请求的url地址 ?之前的地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params  请求的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charset 编码格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 页面内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url, Map&lt;String, String&gt; params, String charset)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (params != <span class="literal">null</span> &amp;&amp; !params.isEmpty()) &#123;</span><br><span class="line">                List&lt;NameValuePair&gt; pairs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;NameValuePair&gt;(params.size());</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                        pairs.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(entry.getKey(), value));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将请求参数和url进行拼接</span></span><br><span class="line">                url += <span class="string">&quot;?&quot;</span> + EntityUtils.toString(<span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(pairs, charset));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">            <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">                httpGet.abort();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;HttpClient,error status code :&quot;</span> + statusCode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                result = EntityUtils.toString(entity, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            EntityUtils.consume(entity);</span><br><span class="line">            response.close();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;请求服务器端出错:&quot;</span> + e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HTTP Post 获取内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     请求的url地址 ?之前的地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params  请求的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charset 编码格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 页面内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String url, Map&lt;String, String&gt; params, String charset)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;NameValuePair&gt; pairs = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span> &amp;&amp; !params.isEmpty()) &#123;</span><br><span class="line">            pairs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;NameValuePair&gt;(params.size());</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                    pairs.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(entry.getKey(), value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        <span class="keyword">if</span> (pairs != <span class="literal">null</span> &amp;&amp; pairs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(pairs, CHARSET));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">                httpPost.abort();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;HttpClient,error status code :&quot;</span> + statusCode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                result = EntityUtils.toString(entity, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            EntityUtils.consume(entity);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;请求服务器端出错:&quot;</span> + e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">                response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>端口8081</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderToMemberService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/orderToMember&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">orderToMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080/getMember&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> HttpClientUtils.doGet(url, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><blockquote>
<p><strong>Eureka 的组成部分</strong></p>
<ul>
<li>Eureka Server 端，用来储存 ip 和端口号<br>所以 server 端需要提供接口用来被生产者调用来进行注册</li>
</ul>
</blockquote>
<p>如下图勾选了右上角的 allow parallel run ，再修改配置文件中的端口号，即可再启动一个服务</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-23%2011.10.38.png">



<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-23%2011.12.38.png">





<h2 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h2><h3 id="手写本地负载均衡算法"><a href="#手写本地负载均衡算法" class="headerlink" title="手写本地负载均衡算法"></a>手写本地负载均衡算法</h3><blockquote>
<ul>
<li>轮询<br>这里需要使用到原子类，不是说使用一个私有的成员变量 count 然后++不行，而是这样会有线程安全性问题，所以推荐直接使用原子类。</li>
<li>随机</li>
<li>权重<br>权重的原理就是根据权重生成多少个一样的地址，这样取余就好了<br>也就是说，如果权重是 1：1，就变成了轮询算法</li>
<li>…</li>
</ul>
</blockquote>
<h3 id="ribbon-本地负载均衡器"><a href="#ribbon-本地负载均衡器" class="headerlink" title="ribbon 本地负载均衡器"></a>ribbon 本地负载均衡器</h3><p>如何使用 ribbon 的随机算法呢？建一个 config 包，然后在里面用 bean 注解将目标负载均衡算法注入到容器中即可</p>
<h3 id="配置中心整合"><a href="#配置中心整合" class="headerlink" title="配置中心整合"></a>配置中心整合</h3><blockquote>
<p>nacos 默认集合了配置中心模块和服务治理模块，我们只需要引入依赖后将配置文件的内容上传到配置中心即可</p>
<p>配置文件的 nacos 配置最好加一个 file-extension</p>
</blockquote>
<h4 id="实现动态刷新配置"><a href="#实现动态刷新配置" class="headerlink" title="实现动态刷新配置"></a>实现动态刷新配置</h4><blockquote>
<p>当我们在 nacos 服务端修改了某配置并点击发布后，我们可以观察到，在本地磁盘的 nacos&#x2F;config 目录下的配置文件会同步刷新，但是此时如果不重启项目直接访问接口的话会发现，得到的答案还是改动之前的值，因为 spring 默认是单例模式，此时访问的 bean 对象还是之前项目启动时注入的那个，所以需要实现 bean 的动态刷新：</p>
<ul>
<li>反射（实现难度很大）</li>
<li>直接加刷新注解：<ol>
<li>将之前的单例对象从 IOC 容器中销毁</li>
<li>再读取配置时就会重新注入</li>
</ol>
</li>
<li>将类设置成原型，每次访问都会建立一个新对象,@Scopr(“prototype”)<br>这种方式是不靠谱的，因为会占用服务器堆内存</li>
</ul>
<p>那服务器是怎么将配置文件的更改告诉给客户端的呢？心跳或长轮询<br>那么是怎么判断内容有没有更改呢？md5</p>
<p>源码入口类：LocalConfigInfoProcessor</p>
</blockquote>
<h3 id="Nacos-搭建集群"><a href="#Nacos-搭建集群" class="headerlink" title="Nacos 搭建集群"></a>Nacos 搭建集群</h3><blockquote>
<p>搭建集群是为了高可用，一个节点挂了也没事，但是集群也会带来很多问题，比如数据如何同步：采用 AP 或 CP 模式</p>
<p>本节将模拟 nacos 集群的搭建<br>为什么说是模拟呢？因为集群一般是搭建在不同服务器上的，因为如果部署在同一个服务器上，服务器 down 了，再多的集群也一样都不能用。所以这里暂时没有适合的条件，只能模拟。</p>
<p>注意</p>
<ul>
<li>注册中心集群的接口地址不会持久化放在 db 中</li>
</ul>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-07-22%2014.37.50.png" style="zoom:50%">





<h4 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h4><blockquote>
<ol>
<li>将 nacos 客户端复制三份，分别将名字改成待会将要配置的端口号</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>在 conf 目录下找到 cluster.conf.example 文件, 在 末尾添加集群的 ip 地址，这里不能用 127.0.0.1 必须用本机的 IP 地址加想要设置的端口号, 改完后将文件名的 example 去掉</li>
</ol>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-07-22%2013.55.02.png" style="zoom:50%">



<blockquote>
<ol start="3">
<li>修改 application.properties 文件，首先修改端口号为：server.port &#x3D; 8748，再修改一下 db 信息，将 db.num &#x3D; 1 开始的 db 配置全部取消注释，并修改用户和密码</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>启动前记得将 startup.sh 里面的 set MODE 由 standalone 改成 cluster</li>
</ol>
</blockquote>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="NoSql-数据库发展"><a href="#NoSql-数据库发展" class="headerlink" title="NoSql 数据库发展"></a>NoSql 数据库发展</h2><h3 id="web-的发展"><a href="#web-的发展" class="headerlink" title="web 的发展"></a>web 的发展</h3><blockquote>
<p>web 1.0 时代用户只能看不能编辑，网站服务器和数据库的压力都不打，web 2.0 时代用户量剧增，且用户可以上传内容，所以服务器和数据库的压力都倍增，这个时候用户的请求不能直接与数据库交互，否则效率低不说，数据库也扛不住，这个时候 redis 就应运而生了</p>
</blockquote>
<h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><blockquote>
<p>服务端：redis-server</p>
<p>客户端:redis-cli -h localhost -p 6379</p>
</blockquote>
<p>客户端成功启动后可以用 ping 测试</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-07-23%2010.19.18.png">





<h3 id="基础命令："><a href="#基础命令：" class="headerlink" title="基础命令："></a>基础命令：</h3><blockquote>
<p>将 key 自动 + 1 ：incr key<br>首先这个 key 对应的 value 必须是 Integer 类型，且如果这个 key 不存在，会自动创建这个 key 并赋值 1</p>
</blockquote>
<h2 id="Java-操作-Redis"><a href="#Java-操作-Redis" class="headerlink" title="Java 操作 Redis"></a>Java 操作 Redis</h2><h3 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h3><blockquote>
<p>java 操作 reids 可以使用 jedis 框架，引入依赖后即可进行相关操作</p>
</blockquote>
<p><strong>引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>写测试类，演示基本的操作 redis 方法</strong></p>
<p>redis 也是数据库，那么操作 redis 很明显也是需要创建连接的，一般需要创建连接就需要用到池化，那么这里就需要现配置 redis 连接池类，然后从池中拿 reids 连接实例，就可以通过一些方法来操作 redis 了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建链接</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 jedis 连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        config.setMaxIdle(<span class="number">10</span>); <span class="comment">// 最大空闲连接</span></span><br><span class="line">        config.setMinIdle(<span class="number">5</span>); <span class="comment">// 最小空闲连接</span></span><br><span class="line">        config.setMaxWaitMillis(<span class="number">3000</span>); <span class="comment">// 最大等待时间</span></span><br><span class="line">        config.setMaxTotal(<span class="number">50</span>); <span class="comment">// 最大连接数</span></span><br><span class="line"></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config, <span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getKeys</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTest</span><span class="params">()</span> &#123;</span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="java-操作-string"><a href="#java-操作-string" class="headerlink" title="java 操作 string"></a>java 操作 string</h3><blockquote>
<p>完成以下需求</p>
<ol>
<li>添加一个 string 类型数据，key 为 pv，用于保存 str  的值，初始值为 0</li>
<li>查询该 key 对应的值</li>
<li>修改 str 的值为 1000</li>
<li>实现整型数据原子自增 1</li>
<li>实现整型数据原子自增 1000</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stringOperation</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line">      <span class="comment">// 1. 添加一个 string 类型数据，key 为 pv，用于保存 str  的值，初始值为 0</span></span><br><span class="line">      jedis.set(key, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">      <span class="comment">// 2. 查询该 key 对应的值</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> jedis.get(key);</span><br><span class="line">      System.out.println(s);</span><br><span class="line">      <span class="comment">// 3. 修改 str 的值为 1000</span></span><br><span class="line">      jedis.set(key, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">      <span class="comment">// 4. 实现整型数据原子自增 1</span></span><br><span class="line">      <span class="type">Long</span> <span class="variable">incr</span> <span class="operator">=</span> jedis.incr(key);</span><br><span class="line">      System.out.println(incr);</span><br><span class="line">      <span class="comment">// 5. 实现整型数据原子自增 1000</span></span><br><span class="line">      <span class="type">Long</span> <span class="variable">incrBy</span> <span class="operator">=</span> jedis.incrBy(key, <span class="number">1000</span>);</span><br><span class="line">      System.out.println(incrBy);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





<h3 id="java-操作-hash"><a href="#java-操作-hash" class="headerlink" title="java 操作 hash"></a>java 操作 hash</h3><blockquote>
<p>实现以下需求：</p>
<ol>
<li>往哈希结构中添加以下商品：<ol>
<li>apple：1000</li>
<li>pear：2000</li>
<li>banana：1500</li>
</ol>
</li>
<li>获取哈希中所有的商品</li>
<li>新增 800 个 apple</li>
<li>删除整个哈希的数据</li>
</ol>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2023/06/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><hr>
<h2 id="单一原则"><a href="#单一原则" class="headerlink" title="单一原则"></a>单一原则</h2><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><h3 id="单例的作用"><a href="#单例的作用" class="headerlink" title="单例的作用"></a>单例的作用</h3><blockquote>
<p><strong>一：表示全局唯一</strong></p>
<p>如果某些数据在系统中应当只保存一份，那么就应该设计为单例类</p>
</blockquote>
<h3 id="饿汉"><a href="#饿汉" class="headerlink" title="饿汉"></a>饿汉</h3><blockquote>
<ul>
<li>优点：先天性线程安全，当类初始化的时候就会被创建该对象</li>
<li>缺点：如果项目使用过多饿汉式，会导致项目在启动时很慢，占用很多内存<br>如果用户不使用该对象，也会被创建出对象</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonV1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonV1 singletonV1= <span class="keyword">new</span> <span class="title class_">SingletonV1</span>(); <span class="comment">// 当初始化时先声明一个对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例模式肯定是不能让开发者自己去 new 对象的，所以将构造函数私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonV1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回该对象的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonV1 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletonV1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="懒汉-线程不安全"><a href="#懒汉-线程不安全" class="headerlink" title="懒汉-线程不安全"></a>懒汉-线程不安全</h3><blockquote>
<p>当客户真正需要的时候才去初始化</p>
</blockquote>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><blockquote>
<p>下面的代码是经典写法，和饿汉式的区别是不会在加载类的时候就初始化对象，而是在获取实例的方法里进行非空判断</p>
<p>这么写是存在线程安全问题的，当多个线程一起访问时，可能会出现多个线程都在初始化对象的情况</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonLazyUnSafe</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLazyUnSafe singletonLazyUnSafe;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonLazyUnSafe</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLazyUnSafe <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 先进行对象是否为空的判断，为空会先创建对象再返回</span></span><br><span class="line">        <span class="keyword">if</span> (singletonLazyUnSafe == <span class="literal">null</span>) &#123;</span><br><span class="line">            singletonLazyUnSafe = <span class="keyword">new</span> <span class="title class_">SingletonLazyUnSafe</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonLazyUnSafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="模拟多线程测试"><a href="#模拟多线程测试" class="headerlink" title="模拟多线程测试"></a>模拟多线程测试</h4><blockquote>
<p>很明显，上面的代码是存在线程安全问题的，所以我们会进行多线程模拟测试，为了使实验的结果易于观察，在初始化对象语句前面增加一条睡眠语句即可</p>
</blockquote>
<p><strong>懒汉代码改造</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonLazyUnSafe</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLazyUnSafe singletonLazyUnSafe;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonLazyUnSafe</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonLazyUnSafe <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 先进行对象是否为空的判断，为空会先创建对象再返回</span></span><br><span class="line">        <span class="keyword">if</span> (singletonLazyUnSafe == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 方便模拟多个线程一起访问的场景</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            singletonLazyUnSafe = <span class="keyword">new</span> <span class="title class_">SingletonLazyUnSafe</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonLazyUnSafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">SingletonLazyUnSafe</span> <span class="variable">singletonLazyUnSafe</span> <span class="operator">=</span> SingletonLazyUnSafe.getInstance();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + singletonLazyUnSafe);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-06-27%2022.34.50.png" style="zoom:50%">







<h3 id="双重检查锁单例"><a href="#双重检查锁单例" class="headerlink" title="双重检查锁单例"></a>双重检查锁单例</h3><blockquote>
<p>为了解决懒汉式的线程安全问题，同时又不影响效率，引入双重检查锁机制<br>主要思想是：第一次创建需要上锁，一旦创建好了，就不需要上锁</p>
<p>先看两个不好的解决方案</p>
<p>这个也是有问题的，当多个线程进入，第一个线程在 set 对象的属性的时候，第二个线程进来发现他不为null，直接返回，那么就会有问题，这个问题可以和建造者模式一起看，建造者模式的一个优势就是让对象不可变</p>
</blockquote>
<p><strong>一：效率不行</strong><br>这种写法和 synnchrnized 加在方法名前没什么区别，他虽然可以避免线程安全问题，但是效率受到影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLockSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (DoubleCheckLockSingleton.class) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">DoubleCheckLockSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>二：安全不行</strong><br>这种写法就没办法解决线程安全问题，多个线程访问时还是会进入到 if 分支，只不过区别变成了创建对象的时候是排队进行的而已</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLockSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == instance) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (DoubleCheckLockSingleton.class) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">DoubleCheckLockSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><blockquote>
<p>23 种设计模式里并没有简单工厂模式，他被认为是静态工厂方法模式，是工厂方法模式的一种特殊情况</p>
</blockquote>
<p><strong>1. 定义一个 Resource 类</strong><br>因为是 demo，所以弄的简单一点了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2.为了让我们的demo更完善，自己再写一个获取资源的 Exception 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceLoadException</span>  <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResourceLoadException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;&lt;加载 Resource 时出现异常&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResourceLoadException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3.未使用工厂模式时获取资源的业务代码</strong><br>if分支的那里的代码是需要优化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * url 可能会有很多不同的前缀：http、https、classpath、ftp 等等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">load</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 url 前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> getPrefix(url);</span><br><span class="line">        <span class="comment">// 根据前缀获取不同的资源</span></span><br><span class="line">        <span class="comment">// 下面的代码就是后面我们需要用工厂模式代替的部分</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;http&quot;</span>.equals(prefix)) &#123;</span><br><span class="line">            <span class="comment">// 省略很多复杂的业务逻辑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;ftp&quot;</span>.equals(prefix)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;classpath&quot;</span>.equals(prefix)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取传入 url 的前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getPrefix</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == url || <span class="string">&quot;&quot;</span>.equals(url) || !url.contains(<span class="string">&quot;:&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ResourceLoadException</span>(<span class="string">&quot;传入的 url 不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4.创建一个简单工厂</strong></p>
<p>让业务和创建细节分离<br>但是这种方案是不满足开闭原则的，即对修改关闭，对拓展开放</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Resource <span class="title function_">create</span><span class="params">(String type, String url)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;http&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="comment">// 省略很多复杂的业务逻辑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;ftp&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;classpath&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5. loader 类中的 load 方法变为如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Resource <span class="title function_">load</span><span class="params">(String url)</span> &#123;</span><br><span class="line">  <span class="comment">// 获取 url 前缀</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> getPrefix(url);</span><br><span class="line">  <span class="keyword">return</span> ResourceFactory.create(prefix, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><blockquote>
<p>如果我们获取资源的步骤很简单，那么简单工厂模式完全够用了，但是如果步骤十分繁琐，申请一个资源的代码有200行，那么4个分支就是800行，放在一起明显不简洁，所以可以使用工厂方法模式，其主要思想是把相似类型的对象的创建逻辑独立出去，让职责更加单一</p>
</blockquote>
<h4 id="IResourceFactory-接口"><a href="#IResourceFactory-接口" class="headerlink" title="IResourceFactory 接口"></a>IResourceFactory 接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IResourceFactory</span> &#123;</span><br><span class="line">    Resource <span class="title function_">load</span><span class="params">(String url)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="各种实现类"><a href="#各种实现类" class="headerlink" title="各种实现类"></a>各种实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">IResourceFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">load</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 中间可能包含几百行复杂的创建资源的业务代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="调用这些类的方法"><a href="#调用这些类的方法" class="headerlink" title="调用这些类的方法"></a>调用这些类的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护一个工厂</span></span><br><span class="line">    <span class="keyword">private</span> IResourceFactory resourceFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">load</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> getPrefix(url);</span><br><span class="line">        <span class="comment">// 工厂方法模式的好处是将创建的细节放在了分支外,在这里可以不用关心类的创建</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;http&quot;</span>.equals(prefix)) &#123;</span><br><span class="line">            resourceFactory = <span class="keyword">new</span> <span class="title class_">HttpResourceLoader</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;ftp&quot;</span>.equals(prefix)) &#123;</span><br><span class="line">            resourceFactory = <span class="keyword">new</span> <span class="title class_">FtpResourceLoader</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;classpath&quot;</span>.equals(prefix)) &#123;</span><br><span class="line">            resourceFactory = <span class="keyword">new</span> <span class="title class_">ClasspathResourceLoader</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resourceFactory = <span class="keyword">new</span> <span class="title class_">ClasspathResourceLoader</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resourceFactory.load(url);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getPrefix</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == url || <span class="string">&quot;&quot;</span>.equals(url) || !url.contains(<span class="string">&quot;:&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ResourceLoadException</span>(<span class="string">&quot;传入的 url 不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="优化一"><a href="#优化一" class="headerlink" title="优化一"></a>优化一</h4><blockquote>
<p>可以规避掉这些 if else 吗？一方面是不好看，一方面是不满足开闭原则</p>
<p>可以利用缓存来预先处理</p>
</blockquote>
<p>这里省略了前缀处理等代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护一个工厂</span></span><br><span class="line">    <span class="keyword">private</span> IResourceFactory resourceFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, IResourceFactory&gt; resourceLoaderCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工厂方法版本二，但是还是不满足开闭原则</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        resourceLoaderCache.put(<span class="string">&quot;http&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpResourceLoader</span>());</span><br><span class="line">        resourceLoaderCache.put(<span class="string">&quot;ftp&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpResourceLoader</span>());</span><br><span class="line">        resourceLoaderCache.put(<span class="string">&quot;classpath&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpResourceLoader</span>());</span><br><span class="line">        resourceLoaderCache.put(<span class="string">&quot;default&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpResourceLoader</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">load</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 url 前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> getPrefix(url);</span><br><span class="line">        <span class="keyword">return</span> resourceLoaderCache.get(prefix).load(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="优化二：读取配置文件"><a href="#优化二：读取配置文件" class="headerlink" title="优化二：读取配置文件"></a>优化二：读取配置文件</h4><blockquote>
<p>开闭原则是不允许修改代码，那么我们可以修改配置文件</p>
</blockquote>
<p><strong>一：创建一个配置文件，里面是我们的具体的每个工厂的全限定名</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>=<span class="string">com.erics.creationalPattern.factory.factoryMethod.resourceFactory.impl.HttpResourceLoader</span></span><br><span class="line"><span class="attr">ftp</span>=<span class="string">com.erics.creationalPattern.factory.factoryMethod.resourceFactory.impl.FtpResourceLoader</span></span><br><span class="line"><span class="attr">classpath</span>=<span class="string">com.erics.creationalPattern.factory.factoryMethod.resourceFactory.impl.ClasspathResourceLoader</span></span><br><span class="line"><span class="attr">default</span>=<span class="string">com.erics.creationalPattern.factory.factoryMethod.resourceFactory.impl.DefaultResourceLoader</span></span><br></pre></td></tr></table></figure>



<p><strong>二：在静态代码块中读取配置文件，通过反射创建类并加载</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.erics.creationalPattern.factory.factoryMethod.resourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.erics.creationalPattern.factory.factoryMethod.resourceFactory.impl.ClasspathResourceLoader;</span><br><span class="line"><span class="keyword">import</span> com.erics.creationalPattern.factory.factoryMethod.resourceFactory.impl.FtpResourceLoader;</span><br><span class="line"><span class="keyword">import</span> com.erics.creationalPattern.factory.factoryMethod.resourceFactory.impl.HttpResourceLoader;</span><br><span class="line"><span class="keyword">import</span> com.erics.creationalPattern.factory.simpleFactory.Resource;</span><br><span class="line"><span class="keyword">import</span> com.erics.creationalPattern.factory.simpleFactory.ResourceFactory;</span><br><span class="line"><span class="keyword">import</span> com.erics.creationalPattern.factory.simpleFactory.ResourceLoadException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护一个工厂</span></span><br><span class="line">    <span class="keyword">private</span> IResourceFactory resourceFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, IResourceFactory&gt; resourceLoaderCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">    <span class="comment">// 版本三：加载配置文件到缓存, 优点如下</span></span><br><span class="line">    <span class="comment">// 1 完全满足开闭原则， 当需要扩充需求时，只需要修改配置文件，不用改代码</span></span><br><span class="line">    <span class="comment">// 2 资源可以缓存吗？如果每次获取的资源是一样的，那缓存资源有必要吗</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader()</span><br><span class="line">                .getResourceAsStream(<span class="string">&quot;resourceFactory.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey().toString();</span><br><span class="line">                <span class="comment">// 通过反射创建类，并加到 map 里</span></span><br><span class="line">                Class&lt;?&gt; aClass = Class.forName(entry.getValue().toString());</span><br><span class="line">                <span class="type">IResourceFactory</span> <span class="variable">loader</span> <span class="operator">=</span>(IResourceFactory) aClass.getConstructor().newInstance();</span><br><span class="line">                resourceLoaderCache.put(key, loader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException | NoSuchMethodException | InstantiationException |</span><br><span class="line">                 IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">load</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 url 前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> getPrefix(url);</span><br><span class="line">        <span class="keyword">return</span> resourceLoaderCache.get(prefix).load(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="优化三：增加产品线"><a href="#优化三：增加产品线" class="headerlink" title="优化三：增加产品线"></a>优化三：增加产品线</h4><h3 id="抽象工厂方法模式"><a href="#抽象工厂方法模式" class="headerlink" title="抽象工厂方法模式"></a>抽象工厂方法模式</h3><blockquote>
<p>新增产品族</p>
</blockquote>
<p><strong>总结</strong></p>
<ul>
<li>简单工厂模式：一个工厂生产多个商品</li>
<li>工厂方法模式：一个工厂生产一个商品</li>
<li>抽象工厂方法模式：一个工厂生产一个产品族</li>
</ul>
<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h2 id="原型设计模式"><a href="#原型设计模式" class="headerlink" title="原型设计模式"></a>原型设计模式</h2><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><hr>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><h4 id="cglib"><a href="#cglib" class="headerlink" title="cglib"></a>cglib</h4><blockquote>
<p>cglib 需要引入 srpingboot 项目依赖</p>
</blockquote>
<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><blockquote>
<p>装饰器模式和代理模式的代码结构很相似，且都是为了增强，但是两种设计模式的意图是不一样的：</p>
<ol>
<li>代理类附加的功能是和原始类无关的，而装饰器模式中追加的往往是一些对于原始类进行增强的功能</li>
<li>装饰器模式并不屏蔽原始对象，只是增加了一些包装器，想用原始对象的话还是可以用的<br>而代理设计模式是直接把原始对象屏蔽掉，直接面向代理进行开发</li>
</ol>
</blockquote>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><blockquote>
<p>注意对这个 demo 正确性的理解：component &#x3D; new DecoratorOne(component); 的深刻理解</p>
</blockquote>
<h3 id="IO-库"><a href="#IO-库" class="headerlink" title="IO 库"></a>IO 库</h3><blockquote>
<p>为什么组合优于继承，在4 -2 讲了</p>
<p>假如 InputStream 只有一个子类 FileInputStream，那么再弄一个孙子类 BufferedInputStream 继承 FileInputStream 不是不可以，甚至可以说很完美，但是，InputStream 实际有很多个子类，如果给每一个子类弄一个带缓存功能的孙子类，那么会造成类爆炸，代码量几何倍数上涨，而且很多都是重复代码</p>
</blockquote>
<h2 id="桥接器模式"><a href="#桥接器模式" class="headerlink" title="桥接器模式"></a>桥接器模式</h2><blockquote>
<p>知道即可</p>
</blockquote>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h2 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h2><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><hr>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="*观察者模式"></a>*观察者模式</h2>]]></content>
  </entry>
  <entry>
    <title>超强进阶</title>
    <url>/2023/07/28/%E8%B6%85%E5%BC%BA%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="源码基础"><a href="#源码基础" class="headerlink" title="源码基础"></a>源码基础</h1><hr>
<h2 id="bean-的元数据"><a href="#bean-的元数据" class="headerlink" title="bean 的元数据"></a>bean 的元数据</h2><blockquote>
<p>从 bean 的 xml 注入方式可以看到，bean 的 xml 标签中有大量的比如 id、name 之类的数据<br>这些数据就称为一个 bean 的元数据 </p>
</blockquote>
<h3 id="bean-的注入方式"><a href="#bean-的注入方式" class="headerlink" title="bean 的注入方式"></a>bean 的注入方式</h3><p><strong>1、xml 注入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.entity.Book&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookPrice&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2、注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DependsOn(value = &#123;&quot;xx&quot;, &quot;yy&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDao</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@DependsOn(value = &#123;&quot;xx&quot;, &quot;yy&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>3、配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;teacherBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">TestDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        teacher.setName(<span class="string">&quot;Ms.Li&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TestConfig.class);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacherBean</span> <span class="operator">=</span> (Teacher) context.getBean(<span class="string">&quot;teacherBean&quot;</span>);</span><br><span class="line">        System.out.println(teacherBean.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4、Import 注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(Teacher.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure>





<h3 id="BeanDefinition-详解"><a href="#BeanDefinition-详解" class="headerlink" title="BeanDefinition 详解"></a>BeanDefinition 详解</h3><blockquote>
<p>从以上四种方式可以看出，bean 的注入方式是有很多的，也就是说，对于使用者而言，我们对于 bean 的描述有很多，那为了让他们在底层是统一的格式，我们将他们变成了一种统一的描述，<strong>抽象成一种统一的元数据</strong>。</p>
<p><strong>spring 提供了一个 BeanDefinition 接口统一了将描述成 bean 的元数据。</strong></p>
<p>而我们在使用的时候，我们通常是通过注解或者 xml 的方式去注册一个 bean，spring 在启动的第一步就是加载配置的数据，这些元数据会被加载到内存中以一个个 BeanDefinition 的形式保存在一个 Map 中。</p>
<p><strong>BeanDefinition 包涵哪些信息</strong></p>
<ul>
<li>定义了id、别名与Bean的对应关系（BeanDefinitionHolder）</li>
<li>具体的工厂方法（Class 类型），包括工厂方法的返回类型，工厂方法的Method对象</li>
<li>构造函数、构造函数形参类型</li>
<li>Bean 的 class对象</li>
<li>作用范围、是否懒加载等等</li>
</ul>
</blockquote>
<h4 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinition</span> <span class="keyword">extends</span> <span class="title class_">AttributeAccessor</span>, BeanMetadataElement &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 常量标志一个bean的作用范围</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">SCOPE_SINGLETON</span> <span class="operator">=</span> ConfigurableBeanFactory.SCOPE_SINGLETON;</span><br><span class="line">	<span class="type">String</span> <span class="variable">SCOPE_PROTOTYPE</span> <span class="operator">=</span> ConfigurableBeanFactory.SCOPE_PROTOTYPE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置父BeanDefinition，可以只对有父子关系的bean</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setParentName</span><span class="params">(<span class="meta">@Nullable</span> String parentName)</span>;</span><br><span class="line">	String <span class="title function_">getParentName</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// bean的类的全限定名</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setBeanClassName</span><span class="params">(<span class="meta">@Nullable</span> String beanClassName)</span>;</span><br><span class="line">	String <span class="title function_">getBeanClassName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setScope</span><span class="params">(<span class="meta">@Nullable</span> String scope)</span>;</span><br><span class="line">	String <span class="title function_">getScope</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setLazyInit</span><span class="params">(<span class="type">boolean</span> lazyInit)</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isLazyInit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置依赖性，被依赖的bean会优先创建</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setDependsOn</span><span class="params">(<span class="meta">@Nullable</span> String... dependsOn)</span>;</span><br><span class="line">	String[] getDependsOn();</span><br><span class="line">	<span class="comment">// 是否允许自动装配</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setAutowireCandidate</span><span class="params">(<span class="type">boolean</span> autowireCandidate)</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isAutowireCandidate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置是否主要bean</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setPrimary</span><span class="params">(<span class="type">boolean</span> primary)</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isPrimary</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 工厂bean和工厂方法</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setFactoryBeanName</span><span class="params">(<span class="meta">@Nullable</span> String factoryBeanName)</span>;</span><br><span class="line">	String <span class="title function_">getFactoryBeanName</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setFactoryMethodName</span><span class="params">(<span class="meta">@Nullable</span> String factoryMethodName)</span>;</span><br><span class="line">	String <span class="title function_">getFactoryMethodName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	ConstructorArgumentValues <span class="title function_">getConstructorArgumentValues</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">hasConstructorArgumentValues</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> !getConstructorArgumentValues().isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用setter注入时的key-value对，都保存在这里</span></span><br><span class="line">	MutablePropertyValues <span class="title function_">getPropertyValues</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">hasPropertyValues</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> !getPropertyValues().isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// @since 5.1初始化方法和销毁方法</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setInitMethodName</span><span class="params">(<span class="meta">@Nullable</span> String initMethodName)</span>;</span><br><span class="line">	String <span class="title function_">getInitMethodName</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setDestroyMethodName</span><span class="params">(<span class="meta">@Nullable</span> String destroyMethodName)</span>;</span><br><span class="line">	String <span class="title function_">getDestroyMethodName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 为bean设置角色</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setRole</span><span class="params">(<span class="type">int</span> role)</span>;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">getRole</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// bean的描述</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(<span class="meta">@Nullable</span> String description)</span>;</span><br><span class="line">	String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回此bean定义的可解析类型，基于bean类或其他特定元数据。</span></span><br><span class="line">    <span class="comment">// 这通常在运行时合并bean定义上完全解决但不一定是在配置时定义实例上。</span></span><br><span class="line">	ResolvableType <span class="title function_">getResolvableType</span><span class="params">()</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isPrototype</span><span class="params">()</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isAbstract</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="AbstractBeanDefinition"><a href="#AbstractBeanDefinition" class="headerlink" title="AbstractBeanDefinition"></a>AbstractBeanDefinition</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractBeanDefinition</span> <span class="keyword">extends</span> <span class="title class_">BeanMetadataAttributeAccessor</span></span><br><span class="line">		<span class="keyword">implements</span> <span class="title class_">BeanDefinition</span>, Cloneable &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义一些常量</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SCOPE_DEFAULT</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AUTOWIRE_NO</span> <span class="operator">=</span> AutowireCapableBeanFactory.AUTOWIRE_NO;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AUTOWIRE_BY_NAME</span> <span class="operator">=</span> AutowireCapableBeanFactory.AUTOWIRE_BY_NAME;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AUTOWIRE_BY_TYPE</span> <span class="operator">=</span> AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE;</span><br><span class="line">    <span class="comment">// ...还有很多</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化默认值</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> Object beanClass;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> <span class="variable">scope</span> <span class="operator">=</span> SCOPE_DEFAULT</span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">autowireCandidate</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">primary</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="comment">// ...还有很多</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造器</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="title function_">AbstractBeanDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 指定构造器参数和属性参数</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="title function_">AbstractBeanDefinition</span><span class="params">(<span class="meta">@Nullable</span> ConstructorArgumentValues cargs, <span class="meta">@Nullable</span> MutablePropertyValues pvs)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.constructorArgumentValues = cargs;</span><br><span class="line">		<span class="built_in">this</span>.propertyValues = pvs;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用深拷贝创建一个新的</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="title function_">AbstractBeanDefinition</span><span class="params">(BeanDefinition original)</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 复制一个bean的定义到当前bean，通常父子bean合并时可用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overrideFrom</span><span class="params">(BeanDefinition other)</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...此处省略其他的方法实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="GenericBeanDefinition"><a href="#GenericBeanDefinition" class="headerlink" title="GenericBeanDefinition"></a>GenericBeanDefinition</h4><blockquote>
<p>该类实现比较简单，提供了设置父子关系和构建实例的方法，该类及其子类是目前版本使用最多的BeanDefinition<br>且通过该类可以堆类进行数据注入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericBeanDefinition</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanDefinition</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> String parentName;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">GenericBeanDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 通过深拷贝创建一个bean</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">GenericBeanDefinition</span><span class="params">(BeanDefinition original)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(original);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParentName</span><span class="params">(<span class="meta">@Nullable</span> String parentName)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.parentName = parentName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getParentName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.parentName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> AbstractBeanDefinition <span class="title function_">cloneBeanDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 api 进行注入,这个测试类说明我们可以用一些字符串就能描述一个类，包括他的类型、初始化方法、属性等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenericBeanDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">GenericBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>();</span><br><span class="line">       beanDefinition.setBeanClassName(<span class="string">&quot;com.erics.bean.User&quot;</span>);</span><br><span class="line">       beanDefinition.setScope(<span class="string">&quot;prototype&quot;</span>);</span><br><span class="line">       beanDefinition.setInitMethodName(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">       <span class="type">MutablePropertyValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">       values.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;erics&quot;</span>);</span><br><span class="line">       values.addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">       beanDefinition.setPropertyValues(values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们再用一个案例来展示有继承关系的 BeanDefinition</p>
<p>首先定义一个父类和子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果用 xml 形式去描述是这样的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;animal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.testDemo.Animal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.Dog&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangcai&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>我们可以使用带有继承关系的 BeanDefinition 来描述</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJCDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 父类的 definition</span></span><br><span class="line">       <span class="type">RootBeanDefinition</span> <span class="variable">rootBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">       rootBeanDefinition.setBeanClassName(<span class="string">&quot;com.erics.testDemo.Animal&quot;</span>);</span><br><span class="line">       <span class="type">MutablePropertyValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">       values.addPropertyValue(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line">       values.addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">1</span>);</span><br><span class="line">       rootBeanDefinition.setPropertyValues(values);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 子类的 definition</span></span><br><span class="line">       <span class="type">ChildBeanDefinition</span> <span class="variable">childBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChildBeanDefinition</span>(<span class="string">&quot;animal&quot;</span>);</span><br><span class="line">       childBeanDefinition.setBeanClassName(<span class="string">&quot;com.erics.testDemo.Dog&quot;</span>);</span><br><span class="line">       <span class="type">MutablePropertyValues</span> <span class="variable">values1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">       values1.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;wangcai&quot;</span>);</span><br><span class="line">       childBeanDefinition.setPropertyValues(values1);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>GenericBeanDefinition在很多场景可以替换以上的内容，但是由于各种等原因，RootBeanDefinition依旧存在而且很重要，后期的归一处理还是要将不同的BeanDefinition转换或合并至一个RootBeanDefinition：</p>
<ul>
<li>RootBeanDefinition与AbstractBeanDefinition是互补关系，RootBeanDefinition在AbstractBeanDefinition的基础上定义了更多属性。</li>
<li>RootBeanDefinition不能有父BeanDefinition，可以和ChildBeanDefinition配合使用构建父子关系（bean是可以继承的）。</li>
<li>目前最常用的BeanDefinition是GenericBeanDefinition及其子类的实现，GenericBeanDefinition很强大，也可以很轻松的独立的构建父子关系。</li>
<li>有时为了统一调用，不同的BeanDefinition可以合并、拷贝等。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换的</span></span><br><span class="line"><span class="type">GenericBeanDefinition</span> <span class="variable">definition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>(dog);</span><br><span class="line"><span class="comment">// 合并的</span></span><br><span class="line">definition.overrideFrom(animal);</span><br></pre></td></tr></table></figure>







<h3 id="BeanDefinition-注册器"><a href="#BeanDefinition-注册器" class="headerlink" title="BeanDefinition 注册器"></a>BeanDefinition 注册器</h3><blockquote>
<p>当有了统一标准的元数据后，我们就可以很轻松的实现 bean 的统一管理，我们可以使用一个容器，这个容器很容易就优先就想到是 map 类，spring 也大致就是这么做的，spring 提供了一个 BeadDefinitionRegistry 接口，只要实现了这个接口，就有注册 BeanDefinition 的能力</p>
</blockquote>
<p><strong>BeanDefinitionRegistry</strong></p>
<p>通过这个注册器接口可以看出，他还实现了别名注册器，说明 bean 还可以拥有一个别名<br>我们也可以通过别名找到这个 bean </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title class_">AliasRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册一个BeanDefinition</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class="line">			<span class="keyword">throws</span> BeanDefinitionStoreException;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">	BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">containsBeanDefinition</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">	String[] getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> <span class="title function_">getBeanDefinitionCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isBeanNameInUse</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AliasRegistry 接口如下，为我们提供了注册别名的能力：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AliasRegistry</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">registerAlias</span><span class="params">(String name, String alias)</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">removeAlias</span><span class="params">(String alias)</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isAlias</span><span class="params">(String name)</span>;</span><br><span class="line">	String[] getAliases(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SimpleBeanDefinitionRegistry 是 spring 提供的一个简单的 BeanDefinitionRegistry 的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleBeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title class_">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 维持一个map用来保存beanDefinition，就这么简单</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对beanDefinition的增删查改</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class="line">			<span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">		Assert.hasText(beanName, <span class="string">&quot;&#x27;beanName&#x27; must not be empty&quot;</span>);</span><br><span class="line">		Assert.notNull(beanDefinition, <span class="string">&quot;BeanDefinition must not be null&quot;</span>);</span><br><span class="line">		<span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.beanDefinitionMap.remove(beanName) == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException &#123;</span><br><span class="line">		<span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="built_in">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">		<span class="keyword">if</span> (bd == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> bd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsBeanDefinition</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.beanDefinitionMap.containsKey(beanName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] getBeanDefinitionNames() &#123;</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(<span class="built_in">this</span>.beanDefinitionMap.keySet());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBeanDefinitionCount</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.beanDefinitionMap.size();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBeanNameInUse</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> isAlias(beanName) || containsBeanDefinition(beanName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写个简单的测试类来试用一下这个实现类，完成往注册器中添加 BeanDefinition 以及拿到 BeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJCDefinition</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 定义一个注册器</span></span><br><span class="line">       <span class="type">SimpleBeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBeanDefinitionRegistry</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 父类的 definition</span></span><br><span class="line">       <span class="type">RootBeanDefinition</span> <span class="variable">rootBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">       rootBeanDefinition.setBeanClassName(<span class="string">&quot;com.erics.testDemo.Animal&quot;</span>);</span><br><span class="line">       <span class="type">MutablePropertyValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">       values.addPropertyValue(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line">       values.addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">1</span>);</span><br><span class="line">       rootBeanDefinition.setPropertyValues(values);</span><br><span class="line">       <span class="comment">// 注册该 bean</span></span><br><span class="line">       registry.registerBeanDefinition(<span class="string">&quot;animal&quot;</span>, rootBeanDefinition);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 子类的 definition</span></span><br><span class="line">       <span class="type">ChildBeanDefinition</span> <span class="variable">childBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChildBeanDefinition</span>(<span class="string">&quot;animal&quot;</span>);</span><br><span class="line">       childBeanDefinition.setBeanClassName(<span class="string">&quot;com.erics.testDemo.Dog&quot;</span>);</span><br><span class="line">       <span class="type">MutablePropertyValues</span> <span class="variable">values1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">       values1.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;wangcai&quot;</span>);</span><br><span class="line">       childBeanDefinition.setPropertyValues(values1);</span><br><span class="line">       <span class="comment">// 注册该bean</span></span><br><span class="line">       registry.registerBeanDefinition(<span class="string">&quot;dog&quot;</span>, childBeanDefinition);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 从注册器中拿到 beanDefinition 的信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;父类信息：&quot;</span> + registry.getBeanDefinition(<span class="string">&quot;animal&quot;</span>));</span><br><span class="line">       System.out.println(<span class="string">&quot;子类信息：&quot;</span> + registry.getBeanDefinition(<span class="string">&quot;dog&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h3 id="如何加载-BeanDefinition"><a href="#如何加载-BeanDefinition" class="headerlink" title="如何加载 BeanDefinition"></a>如何加载 BeanDefinition</h3><h4 id="加载-xml-中的-bean"><a href="#加载-xml-中的-bean" class="headerlink" title="加载 xml 中的 bean"></a>加载 xml 中的 bean</h4><p><strong>1 创建一个 bean xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;animal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.testDemo.Animal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.erics.testDemo.Dog&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangcai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2 解析这个 xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadRegistryXml</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 先创建一个注册器，以便阅读区来阅读</span></span><br><span class="line">       <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBeanDefinitionRegistry</span>();</span><br><span class="line">       <span class="comment">// 创建一个 bean 的 xml 阅读器，提供一个注册器给他的构造方法</span></span><br><span class="line">       <span class="type">XmlBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(registry);</span><br><span class="line">       <span class="comment">// 加载目标 bean</span></span><br><span class="line">       reader.loadBeanDefinitions(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">       logger.info(<span class="string">&quot;animal: &#123;&#125; ---&quot;</span>, registry.getBeanDefinition(<span class="string">&quot;animal&quot;</span>).getBeanClassName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h4 id="加载带注解的-bean"><a href="#加载带注解的-bean" class="headerlink" title="加载带注解的 bean"></a>加载带注解的 bean</h4><blockquote>
<p>在 Dog 类上加 @Component 注解后，这个类就会加载到注册器中，就可以拿到</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRegistryByAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 定义一个注册器，用来注册和管理BeanDefinition</span></span><br><span class="line">       <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBeanDefinitionRegistry</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 通过配置文件加载</span></span><br><span class="line">       <span class="type">AnnotatedBeanDefinitionReader</span> <span class="variable">annoReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(registry);</span><br><span class="line">       annoReader.register(Dog.class);</span><br><span class="line">       logger.info(Arrays.toString(registry.getBeanDefinitionNames()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h4 id="读取配置类"><a href="#读取配置类" class="headerlink" title="读取配置类"></a>读取配置类</h4><blockquote>
<p>ConfigurationClassBeanDefinitionReader可以读取配置类，但是这个类不让我们使用<br>该类中如下方法可以将元数据封装为 ConfigurationClassBeanDefinition</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">private void loadBeanDefinitionsForConfigurationClass</span><br><span class="line">private void registerBeanDefinitionForImportedConfigurationClass</span><br><span class="line">private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod)</span><br></pre></td></tr></table></figure>





<h4 id="类路径扫描"><a href="#类路径扫描" class="headerlink" title="类路径扫描"></a>类路径扫描</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRegistryByScanner</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBeanDefinitionRegistry</span>();</span><br><span class="line">       <span class="comment">// 扫包器</span></span><br><span class="line">       <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(registry);</span><br><span class="line">       scanner.scan(<span class="string">&quot;com.erics&quot;</span>);</span><br><span class="line">       logger.info(Arrays.toString(registry.getBeanDefinitionNames()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>









<h3 id="扫描包的过程"><a href="#扫描包的过程" class="headerlink" title="扫描包的过程"></a>扫描包的过程</h3><blockquote>
<p>无论是扫包还是其他方式，解析一个类大概有以下几种方式：</p>
<ol>
<li>将一个类加载到内存形成类架构，然后获取这个类的 class 文件，通过反射来获取元数据</li>
<li>直接操作字节码文件（.class），读取字节码内的元数据</li>
</ol>
<p><strong>而 spring 选择了第二种方式：</strong></p>
<ul>
<li>首先：操作字节码文件性能要优于反射，因为节省了将类加载到内存这一步</li>
<li>其次：第一种方式会慢慢的将所有的用到的类加载到内存中，不仅浪费空间，而且增加了 gc 的次数<br>而第二种方式会根据元数据按需加载</li>
</ul>
</blockquote>
<p><strong>以 ClassPathBeanDefinitionScanner 的 doScan 方法为例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">    <span class="comment">// BeanDefinitionHolder持有 BeanDefinition实例和名字以及别名</span></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        <span class="comment">// 这里是具体的扫描过程，找出全部符合过滤器要求的BeanDefinition</span></span><br><span class="line">        <span class="comment">// 返回的BeanDefinition的实际类型为ScannedGenericBeanDefinition</span></span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        <span class="comment">// 根据不同的bean类型做统一处理，如附默认值等</span></span><br><span class="line">        <span class="comment">// 因为有些数据我们并没有配置，需要这里做默认处理</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            <span class="comment">// 如果存在，则解析@Scope注解，为候选bean设置代理的方式ScopedProxyMode，XML属性也能配置：scope-resolver、scoped-proxy，可以指定代理方式jdk或者cglib</span></span><br><span class="line">            <span class="type">ScopeMetadata</span> <span class="variable">scopeMetadata</span> <span class="operator">=</span> <span class="built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 首先从注解中获取bean的名字，如果没有</span></span><br><span class="line">            <span class="comment">// 使用beanName生成器beanNameGenerator来生成beanName</span></span><br><span class="line">            <span class="comment">// 在注解中的bean的默认名称和xml中是不一致的</span></span><br><span class="line">            <span class="comment">// 注解中如果没有指定名字本质是通过ClassUtil 的 getShortName 方法获取的</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> <span class="built_in">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="built_in">this</span>.registry);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 将进一步设置应用于给定的BeanDefinition，使用AbstractBeanDefinition的一些默认属性值</span></span><br><span class="line">            <span class="comment">//设置autowireCandidate属性，即XML的autowire-candidate属性，IoC学习的时候就见过该属性，默认为true，表示该bean支持成为自动注入候选bean</span></span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123; postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果bean定义是AnnotatedBeanDefinition类型，ScannedGenericBeanDefinition同样属于AnnotatedBeanDefinition类型</span></span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line"> <span class="comment">// 4 处理类上的其他通用注解：@Lazy, @Primary, @DependsOn, @Role, @Description</span></span><br><span class="line">           AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 检查给定的 beanName，确定相应的bean 定义是否需要注册或与现有bean定义兼容</span></span><br><span class="line">            <span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                <span class="type">BeanDefinitionHolder</span> <span class="variable">definitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(candidate, beanName);</span><br><span class="line">                <span class="comment">// 根据proxyMode属性的值，判断是否需要创建scope代理，一般都是不需要的</span></span><br><span class="line">                definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>上述代码比较重要的一个点就是 findCandidateComponents，他是具体找包的过层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;BeanDefinition&gt; <span class="title function_">findCandidateComponents</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.componentsIndex != <span class="literal">null</span> &amp;&amp; indexSupportsIncludeFilters()) &#123;</span><br><span class="line">        <span class="comment">// Spring5的新特性，直接从&quot;META-INF/spring.components&quot;组件索引文件中加载符合条件的bean，避免了包扫描，用于提升启动速度</span></span><br><span class="line">        <span class="comment">// Spring5升级的其中一个重点就提升了注解驱动的启动性能，&quot;META-INF/spring.components&quot;这个文件类似于一个“组件索引”文件，我们将需要加载的组件（beean定义）预先的以键值对的样式配置到该文件中，当项目中存在&quot;META-INF/spring.components&quot;文件并且文件中配置了属性时，Spring不会进行包扫描，而是直接读取&quot;META-INF/spring.components&quot;中组件的定义并直接加载，从而达到提升性能的目的。</span></span><br><span class="line">        <span class="keyword">return</span> addCandidateComponentsFromIndex(<span class="built_in">this</span>.componentsIndex, basePackage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scanCandidateComponents(basePackage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>我们可以通过添加以下依赖来查看索引</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-indexer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行当前 springboot 工程后，在 target&#x2F;classes&#x2F;META_INF&#x2F;spring.components 文件中，可以看到在该文件中建立了一个关于类的索引，key是类的权限定名，value 是一些关键特征</p>
<img src="https://cdn.jsdelivr.net/gh/EricsLei/ericsPics/img/%E6%88%AA%E5%B1%8F2023-07-30%2001.11.45.png">

<p><strong>在 findCandidateComponents 中有一个 scanCandidateComponents 方法才是至关重要的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;BeanDefinition&gt; <span class="title function_">scanCandidateComponents</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 生成完整的资源解析路径</span></span><br><span class="line">        <span class="comment">// com.ydlclass -&gt; classpath*:com/ydlclass/**/*.class</span></span><br><span class="line">        <span class="comment">// 关于资源解析的内容会在后边的课程单独讲</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">packageSearchPath</span> <span class="operator">=</span> ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">            resolveBasePackage(basePackage) + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">this</span>.resourcePattern;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 加载所有路径下的资源，我们看到前缀是&quot;classpath*&quot;，因此项目依赖的jar包中的相同路径下资源都会被加载进来</span></span><br><span class="line">        <span class="comment">// Spring会将每一个定义的字节码文件加载成为一个Resource资源（包括内部类都是一个Resource资源）</span></span><br><span class="line">        <span class="comment">// 此处是以资源（流）的方式加载（普通文件），而不是将一个类使用类加载器加载到jvm中。</span></span><br><span class="line">        Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">traceEnabled</span> <span class="operator">=</span> logger.isTraceEnabled();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">debugEnabled</span> <span class="operator">=</span> logger.isDebugEnabled();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历所有的资源文件</span></span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> resource.getFilename();</span><br><span class="line">            <span class="comment">// 此处忽略CGLIB生成的代理类文件，这个应该不陌生</span></span><br><span class="line">            <span class="keyword">if</span> (filename != <span class="literal">null</span> &amp;&amp; filename.contains(ClassUtils.CGLIB_CLASS_SEPARATOR)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Scanning &quot;</span> + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// getMetadataReader方法会生成一个元数据读取器</span></span><br><span class="line">                <span class="comment">// 我们的例子中是SimpleMetadataReader</span></span><br><span class="line">                <span class="type">MetadataReader</span> <span class="variable">metadataReader</span> <span class="operator">=</span> getMetadataReaderFactory().getMetadataReader(resource);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查读取到的类是否可以作为候选组件，即是否符合TypeFilter类型过滤器的要求</span></span><br><span class="line">                <span class="comment">// 使用IncludeFilter。就算目标类上没有@Component注解，它也会被扫描成为一个Bean</span></span><br><span class="line">                <span class="comment">// 使用ExcludeFilter，就算目标类上面有@Component注解也不会成为Bean</span></span><br><span class="line">                <span class="keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                    <span class="comment">// 构建一个ScannedGenericBeanDefinition</span></span><br><span class="line">                    <span class="type">ScannedGenericBeanDefinition</span> <span class="variable">sbd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScannedGenericBeanDefinition</span>(metadataReader);</span><br><span class="line">                    sbd.setSource(resource);</span><br><span class="line">                    <span class="keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                            logger.debug(<span class="string">&quot;Identified candidate component class: &quot;</span> + resource);</span><br><span class="line">                        &#125;</span><br><span class="line">                        candidates.add(sbd);</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上边的源码中我们看到读取类文件的真实的实例是simpleMetadataReader，spring选用了【read+visitor】的方式来读取字节码，read负责暴露接口，visitor负责真正的读取工作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SimpleMetadataReader</span> <span class="keyword">implements</span> <span class="title class_">MetadataReader</span> &#123;</span><br><span class="line"></span><br><span class="line">	SimpleMetadataReader(Resource resource, <span class="meta">@Nullable</span> ClassLoader classLoader) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">SimpleAnnotationMetadataReadingVisitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAnnotationMetadataReadingVisitor</span>(classLoader);</span><br><span class="line">        <span class="comment">// 这里是核心，一个reader需要结合一个visitor</span></span><br><span class="line">		getClassReader(resource).accept(visitor, PARSING_OPTIONS);</span><br><span class="line">		<span class="built_in">this</span>.resource = resource;</span><br><span class="line">        <span class="comment">// 元数据都是visitor的能力，典型的访问者设计模式</span></span><br><span class="line">		<span class="built_in">this</span>.annotationMetadata = visitor.getMetadata();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 通过资源获取一个ClassReader</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ClassReader <span class="title function_">getClassReader</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> resource.getInputStream()) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(is);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提供了通用能力</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ClassMetadata <span class="title function_">getClassMetadata</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.annotationMetadata;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> AnnotationMetadata <span class="title function_">getAnnotationMetadata</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.annotationMetadata;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SimpleAnnotationMetadataReadingVisitor</strong>类使用了大量asm的内容，由此可见spring在读取元数据的时候，是直接读取class文件的内容，而非加载后通过反射获取，我们列举其中的个别属性和方法，大致能窥探一二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.asm.AnnotationVisitor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.asm.Opcodes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.asm.SpringAsmInfo;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SimpleAnnotationMetadataReadingVisitor</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问一个内部类的方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitInnerClass</span><span class="params">(String name, <span class="meta">@Nullable</span> String outerName, String innerName, <span class="type">int</span> access)</span> &#123;</span><br><span class="line">        <span class="comment">// ...省略</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问注解的方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">public</span> AnnotationVisitor <span class="title function_">visitAnnotation</span><span class="params">(String descriptor, <span class="type">boolean</span> visible)</span> &#123;</span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问方法的方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(</span></span><br><span class="line"><span class="params">// ...省略</span></span><br><span class="line"><span class="params">	&#125;</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">     // ...省略</span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这些类都是对注解和类的元数据进行了封装，提供更简单的访问方式，很简单。</p>
<p>我们写一个简单的小例子，来看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAsm</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;com/ydlclass/User.class&quot;</span>);</span><br><span class="line">    <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(resource.getInputStream());</span><br><span class="line">    logger.info(classReader.getClassName());</span><br><span class="line">    <span class="comment">// 缺少visitor的reader能力优先，我们只做几个简单的实现</span></span><br><span class="line">    <span class="comment">// visitor实现相对复杂，我们没有必要去学习</span></span><br><span class="line">    <span class="comment">// classReader.accept(xxxVisitor);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回的对应的常量池的偏移量+1</span></span><br><span class="line">    <span class="comment">// 0-3 cafebaba  4-7 主次版本号 8-9 第一个是10+1</span></span><br><span class="line">    <span class="comment">// 二进制可以使用bined插件查看</span></span><br><span class="line">    logger.info(<span class="string">&quot;The first item is &#123;&#125;.&quot;</span>,classReader.getItem(<span class="number">1</span>));</span><br><span class="line">    logger.info(<span class="string">&quot;The first item is &#123;&#125;.&quot;</span>,classReader.getItem(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 00 3A 这是字节码文件看到的，</span></span><br><span class="line">    <span class="comment">// 常量池的计数是 1-57 0表示不引用任何一个常量池项目</span></span><br><span class="line">    logger.info(<span class="string">&quot;The first item is &#123;&#125;.&quot;</span>,classReader.getItemCount());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过javap -v  .\User.class   class文件访问标志</span></span><br><span class="line">    <span class="comment">// flags: (0x0021) ACC_PUBLIC, ACC_SUPER   十进制就是33</span></span><br><span class="line">    <span class="comment">// ACC_SUPER   0x00 20	是否允许使用invokespecial字节码指令的新语义．</span></span><br><span class="line">    <span class="comment">// ACC_PUBLIC  0x00 01	是否为Public类型</span></span><br><span class="line">    logger.info(<span class="string">&quot;classReader.getAccess() is &#123;&#125;&quot;</span>,classReader.getAccess());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h2><h3 id="内省-api"><a href="#内省-api" class="headerlink" title="内省 api"></a>内省 api</h3><blockquote>
<p><strong>内省</strong>(IntroSpector)是Java 语言<strong>针对Bean类</strong>属性、事件的一种缺省处理方法，spring的源码中也会经常出现相关的api，所以我们有必要了解一下。</p>
<p>JavaBean是一种特殊的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。事实上，内省机制也是通过反射来实现的。</p>
<p>相对于内省，反射则更加强大，他能在运行状态把Java类中的各种成分映射成相应的Java类，可以动态的获取所有的属性以及动态调用任意一个方法，强调的是运行状态。</p>
<p><strong>内省：BeanInfo 主要的三个类</strong></p>
<ul>
<li>Introspector</li>
<li>BeanInfo</li>
<li>PropertyDescriptor</li>
</ul>
<p><strong>为什么又了反射还要有内省 api</strong></p>
<ol>
<li>作用范围不同：内省主要针对 JavaBean，反射针对所有的类</li>
<li>操作不同：内省主要是拿到类的描述器：PropertyDescriptor 再进行操作，而反射主要拿到类的 class 文件再操作</li>
</ol>
</blockquote>
<blockquote>
<p>内省api的一般的做法是通过类 Introspector 的 getBeanInfo方法来获取某个对象的 <strong>BeanInfo</strong> 信息，然后通过 BeanInfo 来获取属性的描述器(<strong>PropertyDescriptor</strong>)，通过这个属性描述器就可以获取某个属性对应的 取值&#x2F;赋值 方法，然后我们就可以通过反射机制来调用这些方法，这就是内省机制。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.BeanInfo;</span><br><span class="line"><span class="keyword">import</span> java.beans.Introspector;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIntrospect1</span><span class="params">()</span> <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">    <span class="type">BeanInfo</span> <span class="variable">beanInfo</span> <span class="operator">=</span> Introspector.getBeanInfo(User.class, Object.class);</span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>,propertyDescriptor.getPropertyType());</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>,propertyDescriptor.getReadMethod());</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>,propertyDescriptor.getWriteMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.操纵bean的指定属性：age</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIntrospect2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="type">PropertyDescriptor</span> <span class="variable">pd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>(<span class="string">&quot;age&quot;</span>, User.class);</span><br><span class="line">    <span class="comment">// 得到属性的写方法，为属性赋值</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> pd.getWriteMethod();</span><br><span class="line">    method.invoke(user, <span class="number">24</span>);</span><br><span class="line">    <span class="comment">// 获取属性的值</span></span><br><span class="line">    method = pd.getReadMethod();</span><br><span class="line">    System.out.println(method.invoke(user, <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写一个小的测试案例来拿到 Animal 类的各种方法和属性并且可以进行复制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToolTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(BeanDefinitionTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIntrospector</span><span class="params">()</span> <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">        <span class="type">BeanInfo</span> <span class="variable">beanInfo</span> <span class="operator">=</span> Introspector.getBeanInfo(Animal.class, Object.class);</span><br><span class="line">        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">        <span class="keyword">for</span> (PropertyDescriptor descriptor : descriptors) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot; &#123;&#125;---&quot;</span>, descriptor.getPropertyType());</span><br><span class="line">            logger.info(<span class="string">&quot; &#123;&#125;---&quot;</span>, descriptor.getWriteMethod());</span><br><span class="line">            logger.info(<span class="string">&quot; &#123;&#125;---&quot;</span>, descriptor.getReadMethod());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIntrospectorWrite</span><span class="params">()</span> <span class="keyword">throws</span> IntrospectionException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(); <span class="comment">// 首先要有一个类去写</span></span><br><span class="line">        <span class="comment">// 创建一个写的描述器</span></span><br><span class="line">        <span class="type">PropertyDescriptor</span> <span class="variable">descriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>(<span class="string">&quot;type&quot;</span>, Animal.class);</span><br><span class="line">        <span class="comment">// 拿到写方法的权限</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">writeMethod</span> <span class="operator">=</span> descriptor.getWriteMethod();</span><br><span class="line">        <span class="comment">// 开始写</span></span><br><span class="line">        writeMethod.invoke(animal, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125; ---&quot;</span>, animal);</span><br><span class="line">        <span class="comment">// 拿到读的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">readMethod</span> <span class="operator">=</span> descriptor.getReadMethod();</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125; ---&quot;</span>, readMethod.invoke(animal));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事实上，上面的一些操作用大名鼎鼎的 BeanUtils 更加的简单优雅</p>
<p>首先引入 BeanUtils 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanUtils</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">      <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">      BeanUtils.setProperty(animal, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line">      BeanUtils.setProperty(animal, <span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">      logger.info(<span class="string">&quot;&#123;&#125;---&quot;</span>, animal);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





<h3 id="更强大的反射工具"><a href="#更强大的反射工具" class="headerlink" title="更强大的反射工具"></a>更强大的反射工具</h3><h4 id="bean-的创建"><a href="#bean-的创建" class="headerlink" title="bean 的创建"></a>bean 的创建</h4><blockquote>
<p>在spring中，我们除了能看到内省相关的api，看到的更多的可能是反射api了，当然针对原生api的复杂性，spring同样进行了封装，让其使用起来更简单。</p>
<p>spring给我们提供了强大的反射工具BeanWrapper，下边的例子展示了该类如何配合BeanDefinition对其进行了实例化：</p>
</blockquote>
<p>通过下面的测试代码我们可以发现，我们使用 BeanWrapper 配合 BeanDefinition 可以无需 new 任何对象就可以初始化一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanWrappertest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(BeanDefinitionTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenericBeanDefinition</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过扫包等方式拿到一个类的元数据</span></span><br><span class="line">        <span class="type">GenericBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>();</span><br><span class="line">        beanDefinition.setBeanClassName(<span class="string">&quot;com.erics.bean.User&quot;</span>);</span><br><span class="line">        beanDefinition.setScope(<span class="string">&quot;prototype&quot;</span>);</span><br><span class="line">        beanDefinition.setInitMethodName(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">        <span class="type">MutablePropertyValues</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">        values.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;erics&quot;</span>);</span><br><span class="line">        values.addPropertyValue(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        beanDefinition.setPropertyValues(values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有了元数据以后配合 BeanWrapper 可以实例化对象</span></span><br><span class="line">        <span class="comment">// 这些代码是重复的，后期可以循环使用</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(beanDefinition.getBeanClassName());</span><br><span class="line">        <span class="comment">// 实例化 bean 做属性填充</span></span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>(clazz);</span><br><span class="line">        wrapper.setPropertyValues(beanDefinition.getPropertyValues());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrappedInstance</span> <span class="operator">=</span> wrapper.getWrappedInstance();</span><br><span class="line">        </span><br><span class="line">        logger.info(<span class="string">&quot;---&#123;&#125;&quot;</span>, wrappedInstance);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h4><blockquote>
<p>以下代码展示了如何批量初始化对象的大致逻辑，但是代码还是有问题的：从 xml 读出来的 definition 都是 String 类型的，但是其实在定义时我们是定义成 Integer 的，这个时候就会报类型转化错误，这个问题在下一节转换器中可以得到解决</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBatchCreate</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">      <span class="comment">// 1、通过任意形式捕获beanDefinition</span></span><br><span class="line">      <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBeanDefinitionRegistry</span>();</span><br><span class="line">      <span class="type">XmlBeanDefinitionReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(registry);</span><br><span class="line">      xmlReader.loadBeanDefinitions(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2、通过反射实例化</span></span><br><span class="line">      String[] definitionNames = registry.getBeanDefinitionNames();</span><br><span class="line">      <span class="keyword">for</span> (String definitionName : definitionNames) &#123;</span><br><span class="line">          <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> registry.getBeanDefinition(definitionName);</span><br><span class="line">          <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> beanDefinition.getBeanClassName();</span><br><span class="line">          Class&lt;?&gt; aClass = Class.forName(beanClassName);</span><br><span class="line">          Constructor&lt;?&gt; constructor = aClass.getConstructor();</span><br><span class="line">          <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 3、使用BeanWrapper包裹实例，使其更方便使用反射方法</span></span><br><span class="line">          <span class="type">BeanWrapper</span> <span class="variable">beanWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>(bean);</span><br><span class="line">          beanWrapper.setPropertyValues(beanDefinition.getPropertyValues());</span><br><span class="line">          bean = beanWrapper.getWrappedInstance();</span><br><span class="line">          System.out.println(bean);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="ResolvableType"><a href="#ResolvableType" class="headerlink" title="ResolvableType"></a>ResolvableType</h4><blockquote>
<p>该类可以封装Java类型，提供对超类类型、接口和泛型参数的访问，以及最终解析为类的能力，这是非常常见的一个类，他能及其方便的简化对反射api的调用，该类在spring中的使用率非常高。</p>
<p>ResolvableType可以从字段、方法参数、方法返回类型或类中获得。这个类上的大多数方法本身都会返回一个ResolvableType，以便于链式调用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResolvable</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ResolvableType</span> <span class="variable">types</span> <span class="operator">=</span> ResolvableType.forField(getClass().getDeclaredField(<span class="string">&quot;map&quot;</span>));</span><br><span class="line">      logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, types.getType()); <span class="comment">// 拿到 map 的类型</span></span><br><span class="line">      logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, types.getSuperType()); <span class="comment">// 拿到 map 的父类</span></span><br><span class="line">      logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, types.getGeneric(<span class="number">0</span>)); <span class="comment">// 拿到 map 的第一个泛型</span></span><br><span class="line">      logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, types.getGeneric(<span class="number">1</span>)); <span class="comment">// 拿到 map 的第二个泛型</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>







<h3 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h3><blockquote>
<p>我们从xml中搜集到的所有数据都是【字符串】，但是实际的类中的成员变量可能是数字，数组，集合，或者是复杂的引用数据类型，所以spring给我们提供了强大的转换服务（conversionService接口）。</p>
</blockquote>
<h4 id="转换服务"><a href="#转换服务" class="headerlink" title="转换服务"></a>转换服务</h4><blockquote>
<p>Spring 提供了一个转化服务的接口<br>ConversionService接口很简单，可以根据源类型和目标类型进行判断是否可以转换，并执行转换：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConversionService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">canConvert</span><span class="params">(<span class="meta">@Nullable</span> Class&lt;?&gt; sourceType, Class&lt;?&gt; targetType)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">canConvert</span><span class="params">(<span class="meta">@Nullable</span> TypeDescriptor sourceType, TypeDescriptor targetType)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	&lt;T&gt; T <span class="title function_">convert</span><span class="params">(<span class="meta">@Nullable</span> Object source, Class&lt;T&gt; targetType)</span>;</span><br><span class="line"></span><br><span class="line">	 <span class="comment">// 将给定的&#123;@code source&#125;转换为指定的&#123;@code targetType&#125;。</span></span><br><span class="line">	Object <span class="title function_">convert</span><span class="params">(<span class="meta">@Nullable</span> Object source, <span class="meta">@Nullable</span> TypeDescriptor sourceType, TypeDescriptor targetType)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们不妨看看DefaultConversionService的源码, 这是最典型也是最常用的实现<br>更多核心的功能是在器父类中实现的，在构造实例时，他会默认传入大量可用转化器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultConversionService</span> <span class="keyword">extends</span> <span class="title class_">GenericConversionService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DefaultConversionService sharedInstance;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">DefaultConversionService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 添加大量的默认的转换器</span></span><br><span class="line">		addDefaultConverters(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 类似单例的获取方式</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ConversionService <span class="title function_">getSharedInstance</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">DefaultConversionService</span> <span class="variable">cs</span> <span class="operator">=</span> sharedInstance;</span><br><span class="line">		<span class="keyword">if</span> (cs == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (DefaultConversionService.class) &#123;</span><br><span class="line">				cs = sharedInstance;</span><br><span class="line">				<span class="keyword">if</span> (cs == <span class="literal">null</span>) &#123;</span><br><span class="line">					cs = <span class="keyword">new</span> <span class="title class_">DefaultConversionService</span>();</span><br><span class="line">					sharedInstance = cs;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cs;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加适合大多数环境的转换器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addDefaultConverters</span><span class="params">(ConverterRegistry converterRegistry)</span> &#123;</span><br><span class="line">		addScalarConverters(converterRegistry);</span><br><span class="line">		addCollectionConverters(converterRegistry);</span><br><span class="line"></span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">ByteBufferConverter</span>((ConversionService) converterRegistry));</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToTimeZoneConverter</span>());</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">ZoneIdToTimeZoneConverter</span>());</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">ZonedDateTimeToCalendarConverter</span>());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//...还有好多</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 增加通用的转换器，例如集合、数组、对象等</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addCollectionConverters</span><span class="params">(ConverterRegistry converterRegistry)</span> &#123;</span><br><span class="line">		<span class="type">ConversionService</span> <span class="variable">conversionService</span> <span class="operator">=</span> (ConversionService) converterRegistry;</span><br><span class="line"></span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">ArrayToCollectionConverter</span>(conversionService));</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">CollectionToArrayConverter</span>(conversionService));</span><br><span class="line"></span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToCollectionConverter</span>(conversionService));</span><br><span class="line"></span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">CollectionToObjectConverter</span>(conversionService));</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">ObjectToCollectionConverter</span>(conversionService));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...还有好多</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增标量的转化器，主要是字符串数字类型</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addScalarConverters</span><span class="params">(ConverterRegistry converterRegistry)</span> &#123;</span><br><span class="line">		converterRegistry.addConverterFactory(<span class="keyword">new</span> <span class="title class_">NumberToNumberConverterFactory</span>());</span><br><span class="line">		converterRegistry.addConverterFactory(<span class="keyword">new</span> <span class="title class_">StringToNumberConverterFactory</span>());</span><br><span class="line">		converterRegistry.addConverter(Number.class, String.class, <span class="keyword">new</span> <span class="title class_">ObjectToStringConverter</span>());</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToPropertiesConverter</span>());</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">PropertiesToStringConverter</span>());</span><br><span class="line">		converterRegistry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToUUIDConverter</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//...还有好多</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="独立编写转化器"><a href="#独立编写转化器" class="headerlink" title="独立编写转化器"></a>独立编写转化器</h4><blockquote>
<p>spring 给我们提供了许多转化方法，但是很多时候我们也需要自己去实现一些转换器</p>
</blockquote>
<p><strong>可以看一下 GenericConverter 的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GenericConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 返回目标类型和源类型的一个set</span></span><br><span class="line">   Set&lt;ConvertiblePair&gt; <span class="title function_">getConvertibleTypes</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// 新的方法</span></span><br><span class="line">   Object <span class="title function_">convert</span><span class="params">(<span class="meta">@Nullable</span> Object source, TypeDescriptor sourceType, TypeDescriptor targetType)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 定义了一个 source-to-target class pair.</span></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ConvertiblePair</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; sourceType;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; targetType;</span><br><span class="line"></span><br><span class="line">      ... 其他内容省略</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后编写一个自己的类去实现它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeStringToIntegerConverter</span> <span class="keyword">implements</span> <span class="title class_">GenericConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ConvertiblePair&gt; <span class="title function_">getConvertibleTypes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> <span class="title class_">ConvertiblePair</span>(TypedStringValue.class, Integer.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">convert</span><span class="params">(Object o, TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)</span> &#123;</span><br><span class="line">        <span class="type">TypedStringValue</span> <span class="variable">typedStringValue</span> <span class="operator">=</span> (TypedStringValue) o;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(typedStringValue.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下该 converter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBatchCreate</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">      <span class="comment">// 1、通过任意形式捕获beanDefinition</span></span><br><span class="line">      <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleBeanDefinitionRegistry</span>();</span><br><span class="line">      <span class="type">XmlBeanDefinitionReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(registry);</span><br><span class="line">      xmlReader.loadBeanDefinitions(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2、通过反射实例化</span></span><br><span class="line">      String[] definitionNames = registry.getBeanDefinitionNames();</span><br><span class="line">      <span class="keyword">for</span> (String definitionName : definitionNames) &#123;</span><br><span class="line">          <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> registry.getBeanDefinition(definitionName);</span><br><span class="line">          <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> beanDefinition.getBeanClassName();</span><br><span class="line">          Class&lt;?&gt; aClass = Class.forName(beanClassName);</span><br><span class="line">          Constructor&lt;?&gt; constructor = aClass.getConstructor();</span><br><span class="line">          <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 3、使用BeanWrapper包裹实例，使其更方便使用反射方法</span></span><br><span class="line">          <span class="type">BeanWrapper</span> <span class="variable">beanWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>(bean);</span><br><span class="line">          <span class="comment">// 4、自定义转化服务</span></span><br><span class="line">          <span class="type">DefaultConversionService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConversionService</span>();</span><br><span class="line">          service.addConverter(<span class="keyword">new</span> <span class="title class_">TypeStringToIntegerConverter</span>());</span><br><span class="line">          beanWrapper.setConversionService(service);</span><br><span class="line"></span><br><span class="line">          beanWrapper.setPropertyValues(beanDefinition.getPropertyValues());</span><br><span class="line">          bean = beanWrapper.getWrappedInstance();</span><br><span class="line">          System.out.println(bean);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<p><strong>我们还可以通过实现函数式接口 Converter 来完成，该方式更简单</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeStringToIntegerConverter2</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;TypedStringValue, Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">convert</span><span class="params">(TypedStringValue typedStringValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(typedStringValue.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h1 id="源码核心"><a href="#源码核心" class="headerlink" title="源码核心"></a>源码核心</h1><hr>
<h2 id="容器和上下文"><a href="#容器和上下文" class="headerlink" title="容器和上下文"></a>容器和上下文</h2><blockquote>
<p>我们经常接触的容器主要有：servlet 和 spring 容器，容器的好处主要有以下几种：</p>
<p>1、统一管理，使用容器通常需要按照统一的规范，比如我们的Jakarta Servlet™ 6.0规范，spring6.0规范等等。按照特定规范，编写规范的容器内容（servlet，bean），可以更好的管理容器内容的生命周期。</p>
<p>2、隔离应用，屏蔽外界的复杂性，更专注于业务开发。理论上，我们可以不明白容器是如何启动的，如何建立了连接等等，可以将更多的精力放在业务上。</p>
<p>3、分层管理，每个层边界清晰，各司其职，如mvc的容器就和spring的容器不一样，又互相关联。容器各司其职，每一层都做每一层该做的事</p>
</blockquote>
<h2 id="bean-工厂能力概述"><a href="#bean-工厂能力概述" class="headerlink" title="bean 工厂能力概述"></a>bean 工厂能力概述</h2><blockquote>
<p>bean工厂是我们spring容器的载体，是spring上下文的主要内容。下图展示了我们整个bean工厂的常见的接口和类以及功能，其中我们需要注意几点：</p>
<ol>
<li>不同的接口展现了不同的能力，是对子类能力的抽象</li>
<li>抽象类构建通用方法的实现，是通用核心方法的具体实现</li>
<li>具体类完成特定功能的实现，是特定功能的具体实现</li>
</ol>
</blockquote>
<h3 id="基础能力"><a href="#基础能力" class="headerlink" title="基础能力"></a>基础能力</h3><blockquote>
<p>从接口的定义中，我们可以完全了解bean的基础功能，主要是获取bean以及获取bean的一些基本特征：</p>
</blockquote>
<p><strong>BeanFactory 接口的核心方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这个变量在获取一个FactoryBean时使用</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">FACTORY_BEAN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">    <span class="comment">// 工厂的核心方法，提供了多种获取单个实例bean的能力</span></span><br><span class="line">	Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">	&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">	Object <span class="title function_">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">	&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">	&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span>;</span><br><span class="line">	&lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">	Class&lt;?&gt; getType(String name, <span class="type">boolean</span> allowFactoryBeanInit) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">	String[] getAliases(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="拓展-ObjectProvider"><a href="#拓展-ObjectProvider" class="headerlink" title="拓展-ObjectProvider"></a>拓展-ObjectProvider</h4><blockquote>
<p>ObjectProvider 是为了解决隐式注入的时产生的问题而提出的概念</p>
<p>在 spring 4.3 之前，如果 bean 需要使用特定的构造器进行构造必须使用 @Autowired 注解</p>
</blockquote>
<h3 id="更强的枚举能力"><a href="#更强的枚举能力" class="headerlink" title="更强的枚举能力"></a>更强的枚举能力</h3><blockquote>
<p>ListableBeanFactory为后续的实现类提供了更强的枚举能力，这些能力可能不对外公开，但是对于子类操作容器的操作bean十分重要，我们不妨看看他提供的接口：</p>
</blockquote>
<p><strong>ListableBeanFactory 核心方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ListableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对BeanDefinition的细节操作</span></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">containsBeanDefinition</span><span class="params">(String beanName)</span>;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">getBeanDefinitionCount</span><span class="params">()</span>;</span><br><span class="line">	String[] getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据类型枚举出所有的Bean的名字</span></span><br><span class="line">	String[] getBeanNamesForType(ResolvableType type);</span><br><span class="line">	String[] getBeanNamesForType(<span class="meta">@Nullable</span> Class&lt;?&gt; type);</span><br><span class="line">	String[] getBeanNamesForType(<span class="meta">@Nullable</span> Class&lt;?&gt; type, <span class="type">boolean</span> includeNonSingletons, <span class="type">boolean</span> allowEagerInit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据类型获取bean的一个map</span></span><br><span class="line">	&lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getBeansOfType</span><span class="params">(<span class="meta">@Nullable</span> Class&lt;T&gt; type, <span class="type">boolean</span> includeNonSingletons, <span class="type">boolean</span> allowEagerInit)</span></span><br><span class="line">			<span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据注解获得bean的名称</span></span><br><span class="line">	String[] getBeanNamesForAnnotation(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotationType);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 根据注解获得bean</span></span><br><span class="line">    Map&lt;String, Object&gt; <span class="title function_">getBeansWithAnnotation</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取一个bean的注解</span></span><br><span class="line">	&lt;A <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; A <span class="title function_">findAnnotationOnBean</span><span class="params">(String beanName, Class&lt;A&gt; annotationType)</span></span><br><span class="line">			<span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="灵活的分层能力"><a href="#灵活的分层能力" class="headerlink" title="灵活的分层能力"></a>灵活的分层能力</h3><blockquote>
<p>分层的能力十分重要，这在web工程里有典型应用，spring和springmvc会建立两个独立的上下文，后续涉及web工程时我们再深入讲解，分层之后各司其职，更易管理：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HierarchicalBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回bean工厂的父工厂</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	BeanFactory <span class="title function_">getParentBeanFactory</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 此方法忽略祖先上下文定义的bean，只会查询本地工厂</span></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">containsLocalBean</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="构建和自动装配的能力"><a href="#构建和自动装配的能力" class="headerlink" title="构建和自动装配的能力"></a>构建和自动装配的能力</h3><blockquote>
<p>这个接口的实现及其复杂，主要是赋予子类自动装配的能力，是容器最核心的接口，这个接口定义了bean的创建以及装配能力，同时细粒度的控制了bean的生命周期： </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不进行外部bean的自动装配的常量，BeanFactoryAware等和注释驱动的注入仍将被应用</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">AUTOWIRE_NO</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 注入方式的常量，按类型或名称</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">AUTOWIRE_BY_NAME</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">AUTOWIRE_BY_TYPE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">AUTOWIRE_CONSTRUCTOR</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// 用于创建实例的典型方法，</span></span><br><span class="line">	<span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line">	&lt;T&gt; T <span class="title function_">createBean</span><span class="params">(Class&lt;T&gt; beanClass)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 自动装配的能力</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">autowireBean</span><span class="params">(Object existingBean)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对bean进行一些配置，如调用aware接口</span></span><br><span class="line">	Object <span class="title function_">configureBean</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// 用于对bean生命周期进行细粒度控制的专门方法</span></span><br><span class="line">    <span class="comment">// 主要是三块内容：创建（实例化）  属性填充（装配）  初始化</span></span><br><span class="line">	<span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 生命周期第一步（创建）</span></span><br><span class="line"><span class="comment">	 * 按照指定的装配策略根据class生成一个完整的bean的实例</span></span><br><span class="line"><span class="comment">	 * 执行bean的完全初始化，包括所有适用的BeanPostProcessors</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> dependencyCheck 是否对对象执行依赖项检查(不适用于自动装配构造函数，因此忽略)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 新的bean的实例</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Object <span class="title function_">createBean</span><span class="params">(Class&lt;?&gt; beanClass, <span class="type">int</span> autowireMode, <span class="type">boolean</span> dependencyCheck)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 生命周期第二步（装配）</span></span><br><span class="line"><span class="comment"> 	 * 通过应用 after-instantiation 和 property post-processing (例如注释驱动的注入)</span></span><br><span class="line"><span class="comment"> 	 * 来填充给定的bean实例。 </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Object <span class="title function_">autowire</span><span class="params">(Class&lt;?&gt; beanClass, <span class="type">int</span> autowireMode, <span class="type">boolean</span> dependencyCheck)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过指定的自动装配方式来对给定的Bean进行自动装配。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">autowireBeanProperties</span><span class="params">(Object existingBean, <span class="type">int</span> autowireMode, <span class="type">boolean</span> dependencyCheck)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将具体值的bean定义的属性值应用到给定的bean实例。</span></span><br><span class="line"><span class="comment">	 * 是属性填充的重要步骤</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">applyBeanPropertyValues</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初始化前的回调</span></span><br><span class="line"><span class="comment">	 * 将BeanPostProcessors应用到给定的现有bean实例</span></span><br><span class="line"><span class="comment">	 * 调用它们的postProcessBeforeInitialization方法   </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初始化给定的原始bean，应用工厂回调，如setBeanName和setBeanFactory，</span></span><br><span class="line"><span class="comment">	 * 当然也包括应用所有的bean post processors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Object <span class="title function_">initializeBean</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初始化后的回调</span></span><br><span class="line"><span class="comment">	 * 将BeanPostProcessors应用到给定的现有bean实例</span></span><br><span class="line"><span class="comment">	 * 调用它们的postProcessAfterInitialization方法   </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 销毁给定的bean实例</span></span><br><span class="line"><span class="comment">	 * 使用DisposableBean接口定义的销毁方法 </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">destroyBean</span><span class="params">(Object existingBean)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// 解决匹配注入点的方法</span></span><br><span class="line">    <span class="comment">// 在注入的时候通过以下的方法匹配属性与之对应的bean</span></span><br><span class="line">	<span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 解析唯一匹配给定对象类型(如果有的话)的bean实例，包括它的bean名称。</span></span><br><span class="line"><span class="comment">	 * 比如我们调用getBean(User.class) 会匹配一个或多个bean，需要该方法进行选择</span></span><br><span class="line"><span class="comment">	 * 这实际上是getBean(Class)的一个变体。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	&lt;T&gt; NamedBeanHolder&lt;T&gt; <span class="title function_">resolveNamedBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 解析给定bean名称的bean实例， 向目标工厂方法公开提供依赖描述符。</span></span><br><span class="line"><span class="comment">	 * 这实际上是getBean(String, Class)的一个变体，</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Object <span class="title function_">resolveBeanByName</span><span class="params">(String name, DependencyDescriptor descriptor)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 针对此工厂中定义的bean解析指定的依赖项，注入的时候很有用。</span></span><br><span class="line"><span class="comment">	 * 通过一个依赖的描述（对方法，字段，构造器的抽象），获得一个bean</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	Object <span class="title function_">resolveDependency</span><span class="params">(DependencyDescriptor descriptor, <span class="meta">@Nullable</span> String requestingBeanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="更强的配置能力"><a href="#更强的配置能力" class="headerlink" title="更强的配置能力"></a>更强的配置能力</h3><blockquote>
<p>这个bean工厂接口并不用于正常的应用程序代码中。这个扩展接口只是为了允许框架内部的即插即用和对bean工厂配置方法的特殊访问，具体如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">HierarchicalBeanFactory</span>, SingletonBeanRegistry &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 标准单例作用域的范围标识符:&quot;singleton&quot;。自定义作用域可以通过registerScope添加。</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">SCOPE_SINGLETON</span> <span class="operator">=</span> <span class="string">&quot;singleton&quot;</span>;</span><br><span class="line">	<span class="type">String</span> <span class="variable">SCOPE_PROTOTYPE</span> <span class="operator">=</span> <span class="string">&quot;prototype&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置此bean工厂的父级。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setParentBeanFactory</span><span class="params">(BeanFactory parentBeanFactory)</span> <span class="keyword">throws</span> IllegalStateException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将class loader设置为加载中的bean类，默认是线程上下文类装入器。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setBeanClassLoader</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader beanClassLoader)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回这个工厂的的class loader，用于加载bean类</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	ClassLoader <span class="title function_">getBeanClassLoader</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 指定一个临时ClassLoader用于类型匹配，默认为none。</span></span><br><span class="line"><span class="comment">	 * 如果涉及到加载时织入，则通常只指定临时ClassLoader，以确保实际的bean类尽可能延迟地加载。</span></span><br><span class="line"><span class="comment">	 * 一旦BeanFactory完成引导阶段，临时加载器就会被移除。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setTempClassLoader</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader tempClassLoader)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回用于类型匹配的临时ClassLoader，</span></span><br><span class="line">	ClassLoader <span class="title function_">getTempClassLoader</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置是否缓存bean元数据，例如给定的bean定义(以合并的方式)和resolved bean classes。</span></span><br><span class="line"><span class="comment">	 * 关闭此标志可启用bean Definition和特定bean类的热刷新。</span></span><br><span class="line"><span class="comment">	 * 如果该标志关闭，则任何bean实例的创建都将重新查询bean class loader以获得新解析的类。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setCacheBeanMetadata</span><span class="params">(<span class="type">boolean</span> cacheBeanMetadata)</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isCacheBeanMetadata</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 指定bean的表达式分析器</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setBeanExpressionResolver</span><span class="params">(<span class="meta">@Nullable</span> BeanExpressionResolver resolver)</span>;</span><br><span class="line">	BeanExpressionResolver <span class="title function_">getBeanExpressionResolver</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置和获取转化服务</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setConversionService</span><span class="params">(<span class="meta">@Nullable</span> ConversionService conversionService)</span>;</span><br><span class="line">	ConversionService <span class="title function_">getConversionService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加属性编辑器</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">addPropertyEditorRegistrar</span><span class="params">(PropertyEditorRegistrar registrar)</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">registerCustomEditor</span><span class="params">(Class&lt;?&gt; requiredType, Class&lt;? extends PropertyEditor&gt; propertyEditorClass)</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">copyRegisteredEditorsTo</span><span class="params">(PropertyEditorRegistry registry)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置一个自定义类型转换器，这个BeanFactory应该使用它来转换bean属性值、构造函数参数值等。</span></span><br><span class="line"><span class="comment">     * 这将覆盖默认的PropertyEditor机制，从而使任何自定义编辑器或自定义编辑器注册器变得无关紧要。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	TypeConverter <span class="title function_">getTypeConverter</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 为注入的值添加一个String解析器，如“aa$&#123;bb&#125;cc”。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">addEmbeddedValueResolver</span><span class="params">(StringValueResolver valueResolver)</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">hasEmbeddedValueResolver</span><span class="params">()</span>;</span><br><span class="line">	String <span class="title function_">resolveEmbeddedValue</span><span class="params">(String value)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加和获取bean的后置处理器</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">addBeanPostProcessor</span><span class="params">(BeanPostProcessor beanPostProcessor)</span>;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">getBeanPostProcessorCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册自定义的作用范围</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">registerScope</span><span class="params">(String scopeName, Scope scope)</span>;</span><br><span class="line">	String[] getRegisteredScopeNames();</span><br><span class="line">	Scope <span class="title function_">getRegisteredScope</span><span class="params">(String scopeName)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//为这个bean工厂设置&#123;@code ApplicationStartup&#125;,用来记录启动步骤</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setApplicationStartup</span><span class="params">(ApplicationStartup applicationStartup)</span>;</span><br><span class="line">	ApplicationStartup <span class="title function_">getApplicationStartup</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从一个bean工厂拷贝配置</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">copyConfigurationFrom</span><span class="params">(ConfigurableBeanFactory otherFactory)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册别名</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">registerAlias</span><span class="params">(String beanName, String alias)</span> <span class="keyword">throws</span> BeanDefinitionStoreException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获得合并的bean的定义，后边细讲</span></span><br><span class="line">	BeanDefinition <span class="title function_">getMergedBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否是工厂bean</span></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isFactoryBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 控制指定bean当前的创建状态。仅供容器内部使用。</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setCurrentlyInCreation</span><span class="params">(String beanName, <span class="type">boolean</span> inCreation)</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isCurrentlyInCreation</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 为给定的bean注册一个依赖bean，在给定的bean被销毁之前销毁它。</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">registerDependentBean</span><span class="params">(String beanName, String dependentBeanName)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果有的话，返回依赖于指定bean的所有bean的名称。</span></span><br><span class="line">	String[] getDependentBeans(String beanName);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果有的话，返回指定bean所依赖的所有bean的名称。</span></span><br><span class="line">	String[] getDependenciesForBean(String beanName);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据bean名称销毁给定的bean实例(通常是从该工厂获得的原型实例)。</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">destroyBean</span><span class="params">(String beanName, Object beanInstance)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 销毁指定的【作用域bean】</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">destroyScopedBean</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 销毁此工厂中的所有单例bean，包括已注册为一次性的内部bean。在工厂关闭时被召回。</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">destroySingletons</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="更多配置项"><a href="#更多配置项" class="headerlink" title="更多配置项"></a>更多配置项</h3><blockquote>
<p>AbstractAutowireCapableBeanFactory为子类提供了更多的配置项如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span></span><br><span class="line">		<span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 实例化策略，默认使用CglibSubclassingInstantiationStrategy</span></span><br><span class="line">	<span class="keyword">private</span> InstantiationStrategy instantiationStrategy;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 方法参数名解析策略</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">ParameterNameDiscoverer</span> <span class="variable">parameterNameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultParameterNameDiscoverer</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否允许循环引用（会详细介绍）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">allowCircularReferences</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="comment">// 是否在循环引用的情况下注入一个原始bean实例，即使注入的bean最终被包装类。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">allowRawInjectionDespiteWrapping</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 要在依赖项检查和自动装配时忽略的依赖项类型，如类对象的集合:例如，字符串。默认值为none。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; ignoredDependencyTypes = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">	<span class="comment">// 在依赖项检查和自动装配时忽略的依赖项接口，如类对象集。缺省情况下，只有BeanFactory接口被忽略。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; ignoredDependencyInterfaces = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 当前创建的bean的名称，保存在ThreadLocal中。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> NamedThreadLocal&lt;String&gt; currentlyCreatedBean = <span class="keyword">new</span> <span class="title class_">NamedThreadLocal</span>&lt;&gt;(<span class="string">&quot;Currently created bean&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 未完成的FactoryBean实例的缓存</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, BeanWrapper&gt; factoryBeanInstanceCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 每个工厂类的候选工厂方法缓存</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, Method[]&gt; factoryMethodCandidateCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 过滤后的PropertyDescriptors缓存:bean类到PropertyDescriptor数组。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, PropertyDescriptor[]&gt; filteredPropertyDescriptorsCache =</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 构造器</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AbstractAutowireCapableBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		ignoreDependencyInterface(BeanNameAware.class);</span><br><span class="line">		ignoreDependencyInterface(BeanFactoryAware.class);</span><br><span class="line">		ignoreDependencyInterface(BeanClassLoaderAware.class);</span><br><span class="line">		<span class="built_in">this</span>.instantiationStrategy = <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AbstractAutowireCapableBeanFactory</span><span class="params">(<span class="meta">@Nullable</span> BeanFactory parentBeanFactory)</span>     &#123;</span><br><span class="line">		<span class="built_in">this</span>();</span><br><span class="line">		setParentBeanFactory(parentBeanFactory);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置初始化策略，这里用到了策略设计模式</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInstantiationStrategy</span><span class="params">(InstantiationStrategy instantiationStrategy)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.instantiationStrategy = instantiationStrategy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> InstantiationStrategy <span class="title function_">getInstantiationStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.instantiationStrategy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置参数名称解析器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameterNameDiscoverer</span><span class="params">(<span class="meta">@Nullable</span> ParameterNameDiscoverer parameterNameDiscoverer)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.parameterNameDiscoverer = parameterNameDiscoverer;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> ParameterNameDiscoverer <span class="title function_">getParameterNameDiscoverer</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.parameterNameDiscoverer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后边会详细讲解</span></span><br><span class="line">	<span class="comment">// 设置是否允许bean之间的循环引用—并自动尝试解析它们。</span></span><br><span class="line">	<span class="comment">// 默认为“true”。springboot中默认是false。</span></span><br><span class="line">	<span class="comment">// 注意:通常建议不要依赖bean之间的循环引用。</span></span><br><span class="line">	<span class="comment">// 重构您的应用程序逻辑，使涉及的两个bean委托给封装它们的公共逻辑的第三个bean。</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAllowCircularReferences</span><span class="params">(<span class="type">boolean</span> allowCircularReferences)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.allowCircularReferences = allowCircularReferences;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAllowCircularReferences</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.allowCircularReferences;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置是否允许将一个bean的原始实例注入到其他bean的属性中尽管注入的bean最终会被包装(例如，通过AOP自动代理)。</span></span><br><span class="line"><span class="comment">	 * 这只会在循环引用无法通过其他方式解决的情况下作为最后的手段使用:</span></span><br><span class="line"><span class="comment">	 * 从本质上讲，宁愿注入一个原始实例，也不愿整个bean装配过程失败。</span></span><br><span class="line"><span class="comment">	 * 从Spring 2.0开始，默认为“false”。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAllowRawInjectionDespiteWrapping</span><span class="params">(<span class="type">boolean</span> allowRawInjectionDespiteWrapping)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.allowRawInjectionDespiteWrapping = allowRawInjectionDespiteWrapping;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAllowRawInjectionDespiteWrapping</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.allowRawInjectionDespiteWrapping;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 忽略自动装配的给定依赖类型:</span></span><br><span class="line"><span class="comment">	 * 例如，String。默认值为none。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ignoreDependencyType</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.ignoredDependencyTypes.add(type);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 忽略自动装配的给定依赖接口。</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ignoreDependencyInterface</span><span class="params">(Class&lt;?&gt; ifc)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.ignoredDependencyInterfaces.add(ifc);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="工厂的生命周期"><a href="#工厂的生命周期" class="headerlink" title="工厂的生命周期"></a>工厂的生命周期</h3><blockquote>
<p>bean工厂的生命周期比较简单：start-&gt;onRefresh-&gt;Running-&gt;onClose-&gt;stop</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Lifecycle</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">isRunning</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LifecycleProcessor</span> <span class="keyword">extends</span> <span class="title class_">Lifecycle</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 上下文刷新通知，例如自动启动组件。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 上下文关闭阶段的通知，例如自动停止组件。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="bean-工厂的创建"><a href="#bean-工厂的创建" class="headerlink" title="bean 工厂的创建"></a>bean 工厂的创建</h2>]]></content>
  </entry>
</search>
